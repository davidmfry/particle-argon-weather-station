
/Users/davidfry/Projects/Particle/Argon-weather-station/weather-station/target/weather-station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049b8  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  000d89d0  000d89d0  000089d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .backup       00000000  2003f400  2003f400  00018a7c  2**0
                  CONTENTS
  4 .data         00000078  2003e1f0  000d89d8  0000e1f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000588  2003e268  2003e268  0001e268  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d8a50  000d8a50  00018a50  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8a78  000d8a78  00018a78  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d7c6d  00000000  00000000  00018a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013c7f  00000000  00000000  000f06e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000187e9  00000000  00000000  00104368  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000024b8  00000000  00000000  0011cb51  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003b48  00000000  00000000  0011f009  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00038569  00000000  00000000  00122b51  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00031016  00000000  00000000  0015b0ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000dabab  00000000  00000000  0018c0d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c7e8  00000000  00000000  00266c7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	20 83 0d 00                                          ...

000d401c <module_user_pre_init>:
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
   d4022:	b508      	push	{r3, lr}
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f004 f86f 	bl	d8110 <memcpy>
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f004 f874 	bl	d8126 <memset>
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e1f0 	.word	0x2003e1f0
   d4048:	000d89d8 	.word	0x000d89d8
   d404c:	2003e268 	.word	0x2003e268
   d4050:	2003e268 	.word	0x2003e268
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
   d4058:	b570      	push	{r4, r5, r6, lr}
   d405a:	f002 ff9d 	bl	d6f98 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d89d0 	.word	0x000d89d0
   d4080:	000d8988 	.word	0x000d8988

000d4084 <module_user_setup>:
   d4084:	f000 bcc2 	b.w	d4a0c <setup>

000d4088 <module_user_loop>:
   d4088:	b508      	push	{r3, lr}
   d408a:	f000 fd29 	bl	d4ae0 <loop>
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4092:	f002 bf4f 	b.w	d6f34 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 b9f7 	b.w	d5488 <malloc>

000d409a <_ZdlPv>:
   d409a:	f001 b9fd 	b.w	d5498 <free>

000d409e <_ZdaPv>:
   d409e:	f001 b9fb 	b.w	d5498 <free>

000d40a2 <__cxa_guard_acquire>:
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_ZN15ThingSpeakClass13abortWriteRawEv.isra.3.constprop.16>:
		textToSearch.remove(toPosition);
		
		return textToSearch.substring(fromPosition);	
	}
	
    int abortWriteRaw()
   d40b4:	b508      	push	{r3, lr}
    {
        this->client->stop();
   d40b6:	6803      	ldr	r3, [r0, #0]
   d40b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d40ba:	4798      	blx	r3
        return ERR_UNEXPECTED_FAIL;
    }
   d40bc:	4800      	ldr	r0, [pc, #0]	; (d40c0 <_ZN15ThingSpeakClass13abortWriteRawEv.isra.3.constprop.16+0xc>)
   d40be:	bd08      	pop	{r3, pc}
   d40c0:	fffffed2 	.word	0xfffffed2

000d40c4 <_ZN10CloudClass7publishEPKcS1_.isra.11.constprop.13>:
// Deprecated methods
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40c4:	b513      	push	{r0, r1, r4, lr}
   d40c6:	4b06      	ldr	r3, [pc, #24]	; (d40e0 <_ZN10CloudClass7publishEPKcS1_.isra.11.constprop.13+0x1c>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40c8:	4a06      	ldr	r2, [pc, #24]	; (d40e4 <_ZN10CloudClass7publishEPKcS1_.isra.11.constprop.13+0x20>)
   d40ca:	781b      	ldrb	r3, [r3, #0]
   d40cc:	f88d 3000 	strb.w	r3, [sp]
   d40d0:	233c      	movs	r3, #60	; 0x3c
// Deprecated methods
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40d2:	4604      	mov	r4, r0
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40d4:	f001 fb6c 	bl	d57b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
    return publish(name, data, PUBLIC);
}
   d40d8:	4620      	mov	r0, r4
   d40da:	b002      	add	sp, #8
   d40dc:	bd10      	pop	{r4, pc}
   d40de:	bf00      	nop
   d40e0:	2003e26c 	.word	0x2003e26c
   d40e4:	2003e26e 	.word	0x2003e26e

000d40e8 <_ZN15ThingSpeakClass8setFieldEjf>:
	Returns:
	Code of 200 if successful.
	Code of -101 if value is out of range or string is too long (> 255 bytes)
	
	*/
    int setField(unsigned int field, float value)
   d40e8:	b530      	push	{r4, r5, lr}
	};

	int convertFloatToChar(float value, char *valueString)
	{
		// Supported range is -999999000000 to 999999000000
		if(0 == isinf(value) && (value > 999999000000 || value < -999999000000))
   d40ea:	eddf 7a22 	vldr	s15, [pc, #136]	; d4174 <_ZN15ThingSpeakClass8setFieldEjf+0x8c>
   d40ee:	eeb0 7ac0 	vabs.f32	s14, s0
   d40f2:	eeb4 7a67 	vcmp.f32	s14, s15
   d40f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	Returns:
	Code of 200 if successful.
	Code of -101 if value is out of range or string is too long (> 255 bytes)
	
	*/
    int setField(unsigned int field, float value)
   d40fa:	b08b      	sub	sp, #44	; 0x2c
   d40fc:	4605      	mov	r5, r0
   d40fe:	460c      	mov	r4, r1
	};

	int convertFloatToChar(float value, char *valueString)
	{
		// Supported range is -999999000000 to 999999000000
		if(0 == isinf(value) && (value > 999999000000 || value < -999999000000))
   d4100:	dc0d      	bgt.n	d411e <_ZN15ThingSpeakClass8setFieldEjf+0x36>
   d4102:	eddf 7a1d 	vldr	s15, [pc, #116]	; d4178 <_ZN15ThingSpeakClass8setFieldEjf+0x90>
   d4106:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d410a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d410e:	dc2b      	bgt.n	d4168 <_ZN15ThingSpeakClass8setFieldEjf+0x80>
   d4110:	eddf 7a1a 	vldr	s15, [pc, #104]	; d417c <_ZN15ThingSpeakClass8setFieldEjf+0x94>
   d4114:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d4118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d411c:	d424      	bmi.n	d4168 <_ZN15ThingSpeakClass8setFieldEjf+0x80>
		{
			// Out of range
			return ERR_OUT_OF_RANGE;
		}
		// Given that the resolution of Spark is 1 / 2^12, or ~0.00024 volts, assume that 5 places right of decimal should be sufficient for most applications
        sprintf(valueString, "%.5f", value);
   d411e:	ee10 0a10 	vmov	r0, s0
   d4122:	f003 fa97 	bl	d7654 <__aeabi_f2d>
   d4126:	4602      	mov	r2, r0
   d4128:	460b      	mov	r3, r1
   d412a:	a805      	add	r0, sp, #20
   d412c:	4914      	ldr	r1, [pc, #80]	; (d4180 <_ZN15ThingSpeakClass8setFieldEjf+0x98>)
   d412e:	f001 f9c3 	bl	d54b8 <sprintf>
	Code 0f -101 if value is out of range or string is too long (> 255 bytes)
	
	*/ 
    int setField(unsigned int field, const char * value)
	{
		return setField(field, String(value));
   d4132:	a905      	add	r1, sp, #20
   d4134:	a801      	add	r0, sp, #4
   d4136:	f002 f9de 	bl	d64f6 <_ZN6StringC1EPK19__FlashStringHelper>
    int setField(unsigned int field, String value)
	{
		#ifdef PRINT_DEBUG_MESSAGES
            Particle.publish(SPARK_PUBLISH_TOPIC, "setField " + String(field) + " to " + String(value), SPARK_PUBLISH_TTL, PRIVATE);
		#endif
		if(field < FIELDNUM_MIN || field > FIELDNUM_MAX) return ERR_INVALID_FIELD_NUM;
   d413a:	1e60      	subs	r0, r4, #1
   d413c:	2807      	cmp	r0, #7
   d413e:	d80a      	bhi.n	d4156 <_ZN15ThingSpeakClass8setFieldEjf+0x6e>
		// Max # bytes for ThingSpeak field is 255 (UTF-8)
		if(value.length() > FIELDLENGTH_MAX) return ERR_OUT_OF_RANGE;
   d4140:	9b03      	ldr	r3, [sp, #12]
   d4142:	2bff      	cmp	r3, #255	; 0xff
   d4144:	d80a      	bhi.n	d415c <_ZN15ThingSpeakClass8setFieldEjf+0x74>
		this->nextWriteField[field - 1] = value;
   d4146:	eb05 1000 	add.w	r0, r5, r0, lsl #4
   d414a:	a901      	add	r1, sp, #4
   d414c:	3008      	adds	r0, #8
   d414e:	f002 fa02 	bl	d6556 <_ZN6StringaSERKS_>
		return OK_SUCCESS;
   d4152:	24c8      	movs	r4, #200	; 0xc8
   d4154:	e004      	b.n	d4160 <_ZN15ThingSpeakClass8setFieldEjf+0x78>
    int setField(unsigned int field, String value)
	{
		#ifdef PRINT_DEBUG_MESSAGES
            Particle.publish(SPARK_PUBLISH_TOPIC, "setField " + String(field) + " to " + String(value), SPARK_PUBLISH_TTL, PRIVATE);
		#endif
		if(field < FIELDNUM_MIN || field > FIELDNUM_MAX) return ERR_INVALID_FIELD_NUM;
   d4156:	f06f 04c8 	mvn.w	r4, #200	; 0xc8
   d415a:	e001      	b.n	d4160 <_ZN15ThingSpeakClass8setFieldEjf+0x78>
		// Max # bytes for ThingSpeak field is 255 (UTF-8)
		if(value.length() > FIELDLENGTH_MAX) return ERR_OUT_OF_RANGE;
   d415c:	f06f 0464 	mvn.w	r4, #100	; 0x64
	Code 0f -101 if value is out of range or string is too long (> 255 bytes)
	
	*/ 
    int setField(unsigned int field, const char * value)
	{
		return setField(field, String(value));
   d4160:	a801      	add	r0, sp, #4
   d4162:	f002 f981 	bl	d6468 <_ZN6StringD1Ev>
	{
		char valueString[20]; // range is -999999000000.00000 to 999999000000.00000, so 19 + 1 for the terminator
		int status = convertFloatToChar(value, valueString);
		if(status != OK_SUCCESS) return status;

		return setField(field, valueString);
   d4166:	e001      	b.n	d416c <_ZN15ThingSpeakClass8setFieldEjf+0x84>
	};

	int convertFloatToChar(float value, char *valueString)
	{
		// Supported range is -999999000000 to 999999000000
		if(0 == isinf(value) && (value > 999999000000 || value < -999999000000))
   d4168:	f06f 0464 	mvn.w	r4, #100	; 0x64
		char valueString[20]; // range is -999999000000.00000 to 999999000000.00000, so 19 + 1 for the terminator
		int status = convertFloatToChar(value, valueString);
		if(status != OK_SUCCESS) return status;

		return setField(field, valueString);
	};
   d416c:	4620      	mov	r0, r4
   d416e:	b00b      	add	sp, #44	; 0x2c
   d4170:	bd30      	pop	{r4, r5, pc}
   d4172:	bf00      	nop
   d4174:	7f7fffff 	.word	0x7f7fffff
   d4178:	5368d496 	.word	0x5368d496
   d417c:	d368d496 	.word	0xd368d496
   d4180:	000d8334 	.word	0x000d8334

000d4184 <_ZN15ThingSpeakClass9escapeUrlE6String>:
private:
	
	
	// Creates a new String 
	
	String escapeUrl(String message){
   d4184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4188:	4615      	mov	r5, r2
   d418a:	b086      	sub	sp, #24
		char t;
		char ch[] = " ";
   d418c:	2320      	movs	r3, #32
		char temp[4];
		char *encoded;
		String result = "";
   d418e:	4931      	ldr	r1, [pc, #196]	; (d4254 <_ZN15ThingSpeakClass9escapeUrlE6String+0xd0>)
	
	// Creates a new String 
	
	String escapeUrl(String message){
		char t;
		char ch[] = " ";
   d4190:	f8ad 3000 	strh.w	r3, [sp]
private:
	
	
	// Creates a new String 
	
	String escapeUrl(String message){
   d4194:	4606      	mov	r6, r0
		char t;
		char ch[] = " ";
		char temp[4];
		char *encoded;
		String result = "";
   d4196:	f002 f9ae 	bl	d64f6 <_ZN6StringC1EPK19__FlashStringHelper>
		unsigned int i;
		unsigned int n = message.length() + 1;  // add an extra for the null
   d419a:	68ac      	ldr	r4, [r5, #8]
			t = message.charAt(i);
			if( (t >= 0x00 && t <= 0x1F) || t >= 0x80 ){
				n--;
				continue;
			}
			if(t == 0x22 || t == 0x25 || t == 0x26 || t == 0x2B || t == 0x3B){
   d419c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d425c <_ZN15ThingSpeakClass9escapeUrlE6String+0xd8>
		char ch[] = " ";
		char temp[4];
		char *encoded;
		String result = "";
		unsigned int i;
		unsigned int n = message.length() + 1;  // add an extra for the null
   d41a0:	3401      	adds	r4, #1
		
		// figure out the length of the char array
		for(i = 0; i < message.length(); i++){
   d41a2:	2700      	movs	r7, #0
   d41a4:	68ab      	ldr	r3, [r5, #8]
   d41a6:	429f      	cmp	r7, r3
   d41a8:	d215      	bcs.n	d41d6 <_ZN15ThingSpeakClass9escapeUrlE6String+0x52>
			t = message.charAt(i);
   d41aa:	4639      	mov	r1, r7
   d41ac:	4628      	mov	r0, r5
   d41ae:	f002 fa6b 	bl	d6688 <_ZNK6String6charAtEj>
			if( (t >= 0x00 && t <= 0x1F) || t >= 0x80 ){
   d41b2:	f1a0 0320 	sub.w	r3, r0, #32
   d41b6:	b2db      	uxtb	r3, r3
   d41b8:	2b5f      	cmp	r3, #95	; 0x5f
   d41ba:	d901      	bls.n	d41c0 <_ZN15ThingSpeakClass9escapeUrlE6String+0x3c>
				n--;
   d41bc:	3c01      	subs	r4, #1
				continue;
   d41be:	e008      	b.n	d41d2 <_ZN15ThingSpeakClass9escapeUrlE6String+0x4e>
			}
			if(t == 0x22 || t == 0x25 || t == 0x26 || t == 0x2B || t == 0x3B){
   d41c0:	3822      	subs	r0, #34	; 0x22
   d41c2:	b2c0      	uxtb	r0, r0
   d41c4:	2819      	cmp	r0, #25
   d41c6:	d804      	bhi.n	d41d2 <_ZN15ThingSpeakClass9escapeUrlE6String+0x4e>
   d41c8:	fa28 f000 	lsr.w	r0, r8, r0
   d41cc:	07c2      	lsls	r2, r0, #31
				n = n + 2;
   d41ce:	bf48      	it	mi
   d41d0:	3402      	addmi	r4, #2
		String result = "";
		unsigned int i;
		unsigned int n = message.length() + 1;  // add an extra for the null
		
		// figure out the length of the char array
		for(i = 0; i < message.length(); i++){
   d41d2:	3701      	adds	r7, #1
   d41d4:	e7e6      	b.n	d41a4 <_ZN15ThingSpeakClass9escapeUrlE6String+0x20>
				n = n + 2;
			}
		}
		
		// create the char array
		encoded = (char *)malloc(sizeof(char) * n);	
   d41d6:	4620      	mov	r0, r4
   d41d8:	f001 f956 	bl	d5488 <malloc>
		if(encoded == NULL){
   d41dc:	4607      	mov	r7, r0
   d41de:	b3a8      	cbz	r0, d424c <_ZN15ThingSpeakClass9escapeUrlE6String+0xc8>
			return result;
		}
		encoded[0] = 0;
   d41e0:	2400      	movs	r4, #0
			// don't include non-printable or anything about 127
			if( (t >= 0x00 && t <= 0x1F) || t >= 0x80 ){
				continue;
			}
			// encode the special characters
			if(t == 0x22 || t == 0x25 || t == 0x26 || t == 0x2B || t == 0x3B){
   d41e2:	f8df 8078 	ldr.w	r8, [pc, #120]	; d425c <_ZN15ThingSpeakClass9escapeUrlE6String+0xd8>
		// create the char array
		encoded = (char *)malloc(sizeof(char) * n);	
		if(encoded == NULL){
			return result;
		}
		encoded[0] = 0;
   d41e6:	7004      	strb	r4, [r0, #0]
			
		// build the char array
		for(i = 0; i < message.length(); i++){
   d41e8:	68ab      	ldr	r3, [r5, #8]
   d41ea:	429c      	cmp	r4, r3
   d41ec:	d220      	bcs.n	d4230 <_ZN15ThingSpeakClass9escapeUrlE6String+0xac>
			t = message.charAt(i);
   d41ee:	4621      	mov	r1, r4
   d41f0:	4628      	mov	r0, r5
   d41f2:	f002 fa49 	bl	d6688 <_ZNK6String6charAtEj>
			// don't include non-printable or anything about 127
			if( (t >= 0x00 && t <= 0x1F) || t >= 0x80 ){
   d41f6:	f1a0 0320 	sub.w	r3, r0, #32
   d41fa:	b2db      	uxtb	r3, r3
   d41fc:	2b5f      	cmp	r3, #95	; 0x5f
		}
		encoded[0] = 0;
			
		// build the char array
		for(i = 0; i < message.length(); i++){
			t = message.charAt(i);
   d41fe:	4602      	mov	r2, r0
			// don't include non-printable or anything about 127
			if( (t >= 0x00 && t <= 0x1F) || t >= 0x80 ){
   d4200:	d814      	bhi.n	d422c <_ZN15ThingSpeakClass9escapeUrlE6String+0xa8>
				continue;
			}
			// encode the special characters
			if(t == 0x22 || t == 0x25 || t == 0x26 || t == 0x2B || t == 0x3B){
   d4202:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
   d4206:	b2db      	uxtb	r3, r3
   d4208:	2b19      	cmp	r3, #25
   d420a:	d809      	bhi.n	d4220 <_ZN15ThingSpeakClass9escapeUrlE6String+0x9c>
   d420c:	fa28 f303 	lsr.w	r3, r8, r3
   d4210:	07db      	lsls	r3, r3, #31
   d4212:	d505      	bpl.n	d4220 <_ZN15ThingSpeakClass9escapeUrlE6String+0x9c>
				sprintf(temp, "%%%02X", t);
   d4214:	4910      	ldr	r1, [pc, #64]	; (d4258 <_ZN15ThingSpeakClass9escapeUrlE6String+0xd4>)
   d4216:	a801      	add	r0, sp, #4
   d4218:	f001 f94e 	bl	d54b8 <sprintf>
				strcat(encoded, temp);
   d421c:	a901      	add	r1, sp, #4
   d421e:	e002      	b.n	d4226 <_ZN15ThingSpeakClass9escapeUrlE6String+0xa2>
				continue;
			}
			// add the regular characters
			ch[0] = t;
   d4220:	f88d 2000 	strb.w	r2, [sp]
			strcat(encoded, ch);
   d4224:	4669      	mov	r1, sp
   d4226:	4638      	mov	r0, r7
   d4228:	f003 ffae 	bl	d8188 <strcat>
			return result;
		}
		encoded[0] = 0;
			
		// build the char array
		for(i = 0; i < message.length(); i++){
   d422c:	3401      	adds	r4, #1
   d422e:	e7db      	b.n	d41e8 <_ZN15ThingSpeakClass9escapeUrlE6String+0x64>
			// add the regular characters
			ch[0] = t;
			strcat(encoded, ch);
		}
			
		result = String(encoded);
   d4230:	4639      	mov	r1, r7
   d4232:	a802      	add	r0, sp, #8
   d4234:	f002 f95f 	bl	d64f6 <_ZN6StringC1EPK19__FlashStringHelper>
   d4238:	a902      	add	r1, sp, #8
   d423a:	4630      	mov	r0, r6
   d423c:	f002 f9a5 	bl	d658a <_ZN6StringaSEOS_>
   d4240:	a802      	add	r0, sp, #8
   d4242:	f002 f911 	bl	d6468 <_ZN6StringD1Ev>
		free(encoded);
   d4246:	4638      	mov	r0, r7
   d4248:	f001 f926 	bl	d5498 <free>
		
		return result; 
	}
   d424c:	4630      	mov	r0, r6
   d424e:	b006      	add	sp, #24
   d4250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4254:	000d840c 	.word	0x000d840c
   d4258:	000d8339 	.word	0x000d8339
   d425c:	02000219 	.word	0x02000219

000d4260 <_ZN15ThingSpeakClass15getHTTPResponseER6String>:
			if (!this->client->print("\r\n")) return false;
		}
		return true;
	};

	int getHTTPResponse(String & response)
   d4260:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4262:	b085      	sub	sp, #20
   d4264:	4605      	mov	r5, r0
   d4266:	460e      	mov	r6, r1
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4268:	f000 ff12 	bl	d5090 <HAL_Timer_Get_Milli_Seconds>
	{
        long startWaitForResponseAt = millis();
        while(client->available() == 0 && millis() - startWaitForResponseAt < TIMEOUT_MS_SERVERRESPONSE)
   d426c:	f241 3787 	movw	r7, #4999	; 0x1387
   d4270:	4604      	mov	r4, r0
   d4272:	6828      	ldr	r0, [r5, #0]
   d4274:	6803      	ldr	r3, [r0, #0]
   d4276:	691b      	ldr	r3, [r3, #16]
   d4278:	4798      	blx	r3
   d427a:	b940      	cbnz	r0, d428e <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x2e>
   d427c:	f000 ff08 	bl	d5090 <HAL_Timer_Get_Milli_Seconds>
   d4280:	1b00      	subs	r0, r0, r4
   d4282:	42b8      	cmp	r0, r7
   d4284:	d803      	bhi.n	d428e <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x2e>
        {
            delay(100);
   d4286:	2064      	movs	r0, #100	; 0x64
   d4288:	f001 f93e 	bl	d5508 <delay>
	};

	int getHTTPResponse(String & response)
	{
        long startWaitForResponseAt = millis();
        while(client->available() == 0 && millis() - startWaitForResponseAt < TIMEOUT_MS_SERVERRESPONSE)
   d428c:	e7f1      	b.n	d4272 <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x12>
        {
            delay(100);
        }
        if(client->available() == 0)
   d428e:	6828      	ldr	r0, [r5, #0]
   d4290:	6803      	ldr	r3, [r0, #0]
   d4292:	691b      	ldr	r3, [r3, #16]
   d4294:	4798      	blx	r3
   d4296:	b330      	cbz	r0, d42e6 <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x86>
        {
			return ERR_TIMEOUT; // Didn't get server response in time
        }

		if(!client->find(const_cast<char *>("HTTP/1.1")))
   d4298:	4914      	ldr	r1, [pc, #80]	; (d42ec <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x8c>)
   d429a:	6828      	ldr	r0, [r5, #0]
   d429c:	f002 f836 	bl	d630c <_ZN6Stream4findEPc>
   d42a0:	b910      	cbnz	r0, d42a8 <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x48>
		{
			#ifdef PRINT_HTTP
				Particle.publish(SPARK_PUBLISH_TOPIC, "ERROR: Didn't find HTTP/1.1", SPARK_PUBLISH_TTL, PRIVATE);
    		#endif
			return ERR_BAD_RESPONSE; // Couldn't parse response (didn't find HTTP/1.1)
   d42a2:	f46f 7097 	mvn.w	r0, #302	; 0x12e
   d42a6:	e01f      	b.n	d42e8 <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x88>
		}
		int status = client->parseInt();
   d42a8:	6828      	ldr	r0, [r5, #0]
   d42aa:	f002 f862 	bl	d6372 <_ZN6Stream8parseIntEv>
		#ifdef PRINT_HTTP
			Particle.publish(SPARK_PUBLISH_TOPIC, "Got Status of " + String(status), SPARK_PUBLISH_TTL, PRIVATE);
		#endif
		if(status != OK_SUCCESS)
   d42ae:	28c8      	cmp	r0, #200	; 0xc8
			#ifdef PRINT_HTTP
				Particle.publish(SPARK_PUBLISH_TOPIC, "ERROR: Didn't find HTTP/1.1", SPARK_PUBLISH_TTL, PRIVATE);
    		#endif
			return ERR_BAD_RESPONSE; // Couldn't parse response (didn't find HTTP/1.1)
		}
		int status = client->parseInt();
   d42b0:	4604      	mov	r4, r0
		#ifdef PRINT_HTTP
			Particle.publish(SPARK_PUBLISH_TOPIC, "Got Status of " + String(status), SPARK_PUBLISH_TTL, PRIVATE);
		#endif
		if(status != OK_SUCCESS)
   d42b2:	d116      	bne.n	d42e2 <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x82>
		{
			return status;
		}

		if(!client->find(const_cast<char *>("\r\n")))
   d42b4:	490e      	ldr	r1, [pc, #56]	; (d42f0 <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x90>)
   d42b6:	6828      	ldr	r0, [r5, #0]
   d42b8:	f002 f828 	bl	d630c <_ZN6Stream4findEPc>
   d42bc:	2800      	cmp	r0, #0
   d42be:	d0f0      	beq.n	d42a2 <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x42>
		}
		#ifdef PRINT_HTTP
			Particle.publish(SPARK_PUBLISH_TOPIC, "Found end of status line", SPARK_PUBLISH_TTL, PRIVATE);
		#endif

		if(!client->find(const_cast<char *>("\n\r\n")))
   d42c0:	490c      	ldr	r1, [pc, #48]	; (d42f4 <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x94>)
   d42c2:	6828      	ldr	r0, [r5, #0]
   d42c4:	f002 f822 	bl	d630c <_ZN6Stream4findEPc>
   d42c8:	2800      	cmp	r0, #0
   d42ca:	d0ea      	beq.n	d42a2 <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x42>
		}
		#ifdef PRINT_HTTP
			Particle.publish(SPARK_PUBLISH_TOPIC, "Found end of header", SPARK_PUBLISH_TTL, PRIVATE);
		#endif
		// This is a workaround to a bug in the Spark implementation of String
		String tempString = client->readString();
   d42cc:	6829      	ldr	r1, [r5, #0]
   d42ce:	4668      	mov	r0, sp
   d42d0:	f002 f852 	bl	d6378 <_ZN6Stream10readStringEv>
		response = tempString;
   d42d4:	4669      	mov	r1, sp
   d42d6:	4630      	mov	r0, r6
   d42d8:	f002 f93d 	bl	d6556 <_ZN6StringaSERKS_>
		}
		#ifdef PRINT_HTTP
			Particle.publish(SPARK_PUBLISH_TOPIC, "Found end of header", SPARK_PUBLISH_TTL, PRIVATE);
		#endif
		// This is a workaround to a bug in the Spark implementation of String
		String tempString = client->readString();
   d42dc:	4668      	mov	r0, sp
   d42de:	f002 f8c3 	bl	d6468 <_ZN6StringD1Ev>
   d42e2:	4620      	mov	r0, r4
   d42e4:	e000      	b.n	d42e8 <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x88>
        {
            delay(100);
        }
        if(client->available() == 0)
        {
			return ERR_TIMEOUT; // Didn't get server response in time
   d42e6:	4804      	ldr	r0, [pc, #16]	; (d42f8 <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x98>)
		response = tempString;
		#ifdef PRINT_HTTP
			Particle.publish(SPARK_PUBLISH_TOPIC, "Response: \"" + tempString + "\"", SPARK_PUBLISH_TTL, PRIVATE);
		#endif
		return status;
	};
   d42e8:	b005      	add	sp, #20
   d42ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d42ec:	000d8340 	.word	0x000d8340
   d42f0:	000d840a 	.word	0x000d840a
   d42f4:	000d8409 	.word	0x000d8409
   d42f8:	fffffed0 	.word	0xfffffed0

000d42fc <_ZN15ThingSpeakClass8writeRawEm6StringPKc>:
	
	Notes:
	This is low level functionality that will not be required by most users.
	
	*/
	int writeRaw(unsigned long channelNumber, String postMessage, const char * writeAPIKey)
   d42fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d42fe:	4604      	mov	r4, r0
			Serial.print(THINGSPEAK_URL);
			Serial.print(":");
			Serial.print(this->port);
			Serial.print("...");
		#endif
		connectSuccess = client->connect(THINGSPEAK_URL, this->port);
   d4300:	6800      	ldr	r0, [r0, #0]
   d4302:	494c      	ldr	r1, [pc, #304]	; (d4434 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x138>)
	
	Notes:
	This is low level functionality that will not be required by most users.
	
	*/
	int writeRaw(unsigned long channelNumber, String postMessage, const char * writeAPIKey)
   d4304:	461e      	mov	r6, r3
			Serial.print(THINGSPEAK_URL);
			Serial.print(":");
			Serial.print(this->port);
			Serial.print("...");
		#endif
		connectSuccess = client->connect(THINGSPEAK_URL, this->port);
   d4306:	6803      	ldr	r3, [r0, #0]
	
	Notes:
	This is low level functionality that will not be required by most users.
	
	*/
	int writeRaw(unsigned long channelNumber, String postMessage, const char * writeAPIKey)
   d4308:	b089      	sub	sp, #36	; 0x24
   d430a:	4615      	mov	r5, r2
			Serial.print(THINGSPEAK_URL);
			Serial.print(":");
			Serial.print(this->port);
			Serial.print("...");
		#endif
		connectSuccess = client->connect(THINGSPEAK_URL, this->port);
   d430c:	6a5f      	ldr	r7, [r3, #36]	; 0x24
   d430e:	88a2      	ldrh	r2, [r4, #4]
   d4310:	2300      	movs	r3, #0
   d4312:	47b8      	blx	r7
	{
		#ifdef PRINT_DEBUG_MESSAGES
			Particle.publish(SPARK_PUBLISH_TOPIC, "ts::writeRaw   (channelNumber: " + String(channelNumber) + " writeAPIKey: " + String(writeAPIKey) + " postMessage: \"" + postMessage + "\")" , SPARK_PUBLISH_TTL, PRIVATE);
		#endif

		if(!connectThingSpeak())
   d4314:	2800      	cmp	r0, #0
   d4316:	d046      	beq.n	d43a6 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0xaa>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4318:	4629      	mov	r1, r5
   d431a:	a804      	add	r0, sp, #16
   d431c:	f002 f92a 	bl	d6574 <_ZN6StringC1ERKS_>
		{
			// Failed to connect to ThingSpeak
			return ERR_CONNECT_FAILED;
		}

		postMessage = postMessage + String("&headers=false");
   d4320:	4945      	ldr	r1, [pc, #276]	; (d4438 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x13c>)
   d4322:	4668      	mov	r0, sp
   d4324:	f002 f8e7 	bl	d64f6 <_ZN6StringC1EPK19__FlashStringHelper>
   d4328:	4669      	mov	r1, sp
   d432a:	a804      	add	r0, sp, #16
   d432c:	f002 f997 	bl	d665e <_ZplRK15StringSumHelperRK6String>
   d4330:	4601      	mov	r1, r0
   d4332:	4628      	mov	r0, r5
   d4334:	f002 f90f 	bl	d6556 <_ZN6StringaSERKS_>
   d4338:	4668      	mov	r0, sp
   d433a:	f002 f895 	bl	d6468 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d433e:	a804      	add	r0, sp, #16
   d4340:	f002 f892 	bl	d6468 <_ZN6StringD1Ev>
            Particle.publish(SPARK_PUBLISH_TOPIC, "Post " + postMessage, SPARK_PUBLISH_TTL, PRIVATE);
		#endif


		// Post data to thingspeak
		if(!this->client->print("POST /update HTTP/1.1\r\n")) return abortWriteRaw();
   d4344:	493d      	ldr	r1, [pc, #244]	; (d443c <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x140>)
   d4346:	6820      	ldr	r0, [r4, #0]
   d4348:	f001 fe02 	bl	d5f50 <_ZN5Print5printEPKc>
   d434c:	2800      	cmp	r0, #0
   d434e:	d037      	beq.n	d43c0 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0xc4>
	};

	bool writeHTTPHeader(const char * APIKey)
	{
		
		if (!this->client->print("Host: api.thingspeak.com\r\n")) return false;
   d4350:	493b      	ldr	r1, [pc, #236]	; (d4440 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x144>)
   d4352:	6820      	ldr	r0, [r4, #0]
   d4354:	f001 fdfc 	bl	d5f50 <_ZN5Print5printEPKc>
   d4358:	2800      	cmp	r0, #0
   d435a:	d031      	beq.n	d43c0 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0xc4>
		if (!this->client->print("Connection: close\r\n")) return false;
   d435c:	4939      	ldr	r1, [pc, #228]	; (d4444 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x148>)
   d435e:	6820      	ldr	r0, [r4, #0]
   d4360:	f001 fdf6 	bl	d5f50 <_ZN5Print5printEPKc>
   d4364:	b360      	cbz	r0, d43c0 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0xc4>
		if (!this->client->print("User-Agent: ")) return false;
   d4366:	4938      	ldr	r1, [pc, #224]	; (d4448 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x14c>)
   d4368:	6820      	ldr	r0, [r4, #0]
   d436a:	f001 fdf1 	bl	d5f50 <_ZN5Print5printEPKc>
   d436e:	b338      	cbz	r0, d43c0 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0xc4>
		if (!this->client->print(TS_USER_AGENT)) return false;
   d4370:	4936      	ldr	r1, [pc, #216]	; (d444c <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x150>)
   d4372:	6820      	ldr	r0, [r4, #0]
   d4374:	f001 fdec 	bl	d5f50 <_ZN5Print5printEPKc>
   d4378:	b310      	cbz	r0, d43c0 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0xc4>
		if (!this->client->print("\r\n")) return false;
   d437a:	4935      	ldr	r1, [pc, #212]	; (d4450 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x154>)
   d437c:	6820      	ldr	r0, [r4, #0]
   d437e:	f001 fde7 	bl	d5f50 <_ZN5Print5printEPKc>
   d4382:	b1e8      	cbz	r0, d43c0 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0xc4>
		if(NULL != APIKey)
   d4384:	b196      	cbz	r6, d43ac <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0xb0>
		{
			if (!this->client->print("X-THINGSPEAKAPIKEY: ")) return false;
   d4386:	4933      	ldr	r1, [pc, #204]	; (d4454 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x158>)
   d4388:	6820      	ldr	r0, [r4, #0]
   d438a:	f001 fde1 	bl	d5f50 <_ZN5Print5printEPKc>
   d438e:	b1b8      	cbz	r0, d43c0 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0xc4>
			if (!this->client->print(APIKey)) return false;
   d4390:	4631      	mov	r1, r6
   d4392:	6820      	ldr	r0, [r4, #0]
   d4394:	f001 fddc 	bl	d5f50 <_ZN5Print5printEPKc>
   d4398:	b190      	cbz	r0, d43c0 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0xc4>
			if (!this->client->print("\r\n")) return false;
   d439a:	492d      	ldr	r1, [pc, #180]	; (d4450 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x154>)
   d439c:	6820      	ldr	r0, [r4, #0]
   d439e:	f001 fdd7 	bl	d5f50 <_ZN5Print5printEPKc>
   d43a2:	b918      	cbnz	r0, d43ac <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0xb0>
   d43a4:	e00c      	b.n	d43c0 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0xc4>
		#endif

		if(!connectThingSpeak())
		{
			// Failed to connect to ThingSpeak
			return ERR_CONNECT_FAILED;
   d43a6:	f46f 7096 	mvn.w	r0, #300	; 0x12c
   d43aa:	e040      	b.n	d442e <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x132>


		// Post data to thingspeak
		if(!this->client->print("POST /update HTTP/1.1\r\n")) return abortWriteRaw();
		if(!writeHTTPHeader(writeAPIKey)) return abortWriteRaw();
		if(!this->client->print("Content-Type: application/x-www-form-urlencoded\r\n")) return abortWriteRaw();
   d43ac:	492a      	ldr	r1, [pc, #168]	; (d4458 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x15c>)
   d43ae:	6820      	ldr	r0, [r4, #0]
   d43b0:	f001 fdce 	bl	d5f50 <_ZN5Print5printEPKc>
   d43b4:	b120      	cbz	r0, d43c0 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0xc4>
		if(!this->client->print("Content-Length: ")) return abortWriteRaw();
   d43b6:	4929      	ldr	r1, [pc, #164]	; (d445c <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x160>)
   d43b8:	6820      	ldr	r0, [r4, #0]
   d43ba:	f001 fdc9 	bl	d5f50 <_ZN5Print5printEPKc>
   d43be:	b918      	cbnz	r0, d43c8 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0xcc>
		#endif


		// Post data to thingspeak
		if(!this->client->print("POST /update HTTP/1.1\r\n")) return abortWriteRaw();
		if(!writeHTTPHeader(writeAPIKey)) return abortWriteRaw();
   d43c0:	6820      	ldr	r0, [r4, #0]
   d43c2:	f7ff fe77 	bl	d40b4 <_ZN15ThingSpeakClass13abortWriteRawEv.isra.3.constprop.16>
   d43c6:	e032      	b.n	d442e <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x132>
		if(!this->client->print("Content-Type: application/x-www-form-urlencoded\r\n")) return abortWriteRaw();
		if(!this->client->print("Content-Length: ")) return abortWriteRaw();
		if(!this->client->print(postMessage.length())) return abortWriteRaw();
   d43c8:	220a      	movs	r2, #10
   d43ca:	68a9      	ldr	r1, [r5, #8]
   d43cc:	6820      	ldr	r0, [r4, #0]
   d43ce:	f001 fe15 	bl	d5ffc <_ZN5Print5printEji>
   d43d2:	2800      	cmp	r0, #0
   d43d4:	d0f4      	beq.n	d43c0 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0xc4>
		if(!this->client->print("\r\n\r\n")) return abortWriteRaw();
   d43d6:	4922      	ldr	r1, [pc, #136]	; (d4460 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x164>)
   d43d8:	6820      	ldr	r0, [r4, #0]
   d43da:	f001 fdb9 	bl	d5f50 <_ZN5Print5printEPKc>
   d43de:	2800      	cmp	r0, #0
   d43e0:	d0ee      	beq.n	d43c0 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0xc4>
		if(!this->client->print(postMessage)) return abortWriteRaw();
   d43e2:	6829      	ldr	r1, [r5, #0]
   d43e4:	6820      	ldr	r0, [r4, #0]
   d43e6:	f001 fdb3 	bl	d5f50 <_ZN5Print5printEPKc>
   d43ea:	2800      	cmp	r0, #0
   d43ec:	d0e8      	beq.n	d43c0 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0xc4>
  
		String entryIDText = String();
   d43ee:	491d      	ldr	r1, [pc, #116]	; (d4464 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x168>)
   d43f0:	a804      	add	r0, sp, #16
   d43f2:	f002 f880 	bl	d64f6 <_ZN6StringC1EPK19__FlashStringHelper>
		int status = getHTTPResponse(entryIDText);
   d43f6:	a904      	add	r1, sp, #16
   d43f8:	4620      	mov	r0, r4
   d43fa:	f7ff ff31 	bl	d4260 <_ZN15ThingSpeakClass15getHTTPResponseER6String>
		if(status != OK_SUCCESS)
   d43fe:	28c8      	cmp	r0, #200	; 0xc8
		if(!this->client->print(postMessage.length())) return abortWriteRaw();
		if(!this->client->print("\r\n\r\n")) return abortWriteRaw();
		if(!this->client->print(postMessage)) return abortWriteRaw();
  
		String entryIDText = String();
		int status = getHTTPResponse(entryIDText);
   d4400:	4605      	mov	r5, r0
		if(status != OK_SUCCESS)
   d4402:	d004      	beq.n	d440e <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x112>
		{
			client->stop();
   d4404:	6820      	ldr	r0, [r4, #0]
   d4406:	6803      	ldr	r3, [r0, #0]
   d4408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d440a:	4798      	blx	r3
   d440c:	e00b      	b.n	d4426 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x12a>
			return status;
		}
		long entryID = entryIDText.toInt();
   d440e:	a804      	add	r0, sp, #16
   d4410:	f002 f93c 	bl	d668c <_ZNK6String5toIntEv>
   d4414:	4606      	mov	r6, r0

		#ifdef PRINT_DEBUG_MESSAGES
		Particle.publish(SPARK_PUBLISH_TOPIC, "               Entry ID \"" + entryIDText + "\" (" + String(entryID) + ")" , SPARK_PUBLISH_TTL, PRIVATE);
		#endif

		client->stop();
   d4416:	6820      	ldr	r0, [r4, #0]
   d4418:	6803      	ldr	r3, [r0, #0]
   d441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d441c:	4798      	blx	r3
			Particle.publish(SPARK_PUBLISH_TOPIC, "disconnected.", SPARK_PUBLISH_TTL, PRIVATE);
		#endif
		if(entryID == 0)
		{
			// ThingSpeak did not accept the write
			status = ERR_NOT_INSERTED;
   d441e:	2e00      	cmp	r6, #0
   d4420:	bf08      	it	eq
   d4422:	f46f 75c8 	mvneq.w	r5, #400	; 0x190
		if(!this->client->print("Content-Length: ")) return abortWriteRaw();
		if(!this->client->print(postMessage.length())) return abortWriteRaw();
		if(!this->client->print("\r\n\r\n")) return abortWriteRaw();
		if(!this->client->print(postMessage)) return abortWriteRaw();
  
		String entryIDText = String();
   d4426:	a804      	add	r0, sp, #16
   d4428:	f002 f81e 	bl	d6468 <_ZN6StringD1Ev>
   d442c:	4628      	mov	r0, r5
		{
			// ThingSpeak did not accept the write
			status = ERR_NOT_INSERTED;
		}
		return status;
	};
   d442e:	b009      	add	sp, #36	; 0x24
   d4430:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4432:	bf00      	nop
   d4434:	000d8349 	.word	0x000d8349
   d4438:	000d835c 	.word	0x000d835c
   d443c:	000d836b 	.word	0x000d836b
   d4440:	000d8383 	.word	0x000d8383
   d4444:	000d839e 	.word	0x000d839e
   d4448:	000d83b2 	.word	0x000d83b2
   d444c:	000d83bf 	.word	0x000d83bf
   d4450:	000d840a 	.word	0x000d840a
   d4454:	000d83e2 	.word	0x000d83e2
   d4458:	000d840d 	.word	0x000d840d
   d445c:	000d83f7 	.word	0x000d83f7
   d4460:	000d8408 	.word	0x000d8408
   d4464:	000d840c 	.word	0x000d840c

000d4468 <_ZN15ThingSpeakClass11writeFieldsEmPKc>:
	
	Notes:
	Call setField(), setLatitude(), setLongitude(), setElevation() and/or setStatus() and then call writeFields()
	
	*/
	int writeFields(unsigned long channelNumber, const char * writeAPIKey)
   d4468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d446c:	b09d      	sub	sp, #116	; 0x74
   d446e:	4604      	mov	r4, r0
   d4470:	460f      	mov	r7, r1
	{
		String postMessage = String("");
   d4472:	4668      	mov	r0, sp
   d4474:	49bf      	ldr	r1, [pc, #764]	; (d4774 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x30c>)
   d4476:	2501      	movs	r5, #1
	
	Notes:
	Call setField(), setLatitude(), setLongitude(), setElevation() and/or setStatus() and then call writeFields()
	
	*/
	int writeFields(unsigned long channelNumber, const char * writeAPIKey)
   d4478:	4690      	mov	r8, r2
   d447a:	f104 0608 	add.w	r6, r4, #8
	{
		String postMessage = String("");
   d447e:	f002 f83a 	bl	d64f6 <_ZN6StringC1EPK19__FlashStringHelper>
		bool fFirstItem = true;
   d4482:	462b      	mov	r3, r5
		for(size_t iField = 0; iField < 8; iField++)
		{
			if(this->nextWriteField[iField].length() > 0)
   d4484:	68b2      	ldr	r2, [r6, #8]
   d4486:	2a00      	cmp	r2, #0
   d4488:	d05e      	beq.n	d4548 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0xe0>
			{
				if(!fFirstItem)
   d448a:	b9ab      	cbnz	r3, d44b8 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x50>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d448c:	4669      	mov	r1, sp
   d448e:	a818      	add	r0, sp, #96	; 0x60
   d4490:	f002 f870 	bl	d6574 <_ZN6StringC1ERKS_>
				{
					postMessage = postMessage + String("&");
   d4494:	49b8      	ldr	r1, [pc, #736]	; (d4778 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x310>)
   d4496:	a814      	add	r0, sp, #80	; 0x50
   d4498:	f002 f82d 	bl	d64f6 <_ZN6StringC1EPK19__FlashStringHelper>
   d449c:	a914      	add	r1, sp, #80	; 0x50
   d449e:	a818      	add	r0, sp, #96	; 0x60
   d44a0:	f002 f8dd 	bl	d665e <_ZplRK15StringSumHelperRK6String>
   d44a4:	4601      	mov	r1, r0
   d44a6:	4668      	mov	r0, sp
   d44a8:	f002 f855 	bl	d6556 <_ZN6StringaSERKS_>
   d44ac:	a814      	add	r0, sp, #80	; 0x50
   d44ae:	f001 ffdb 	bl	d6468 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d44b2:	a818      	add	r0, sp, #96	; 0x60
   d44b4:	f001 ffd8 	bl	d6468 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d44b8:	4669      	mov	r1, sp
   d44ba:	a808      	add	r0, sp, #32
   d44bc:	f002 f85a 	bl	d6574 <_ZN6StringC1ERKS_>
				}
				postMessage = postMessage + String("field") + String(iField + 1) + String("=") + escapeUrl(this->nextWriteField[iField]);
   d44c0:	49ae      	ldr	r1, [pc, #696]	; (d477c <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x314>)
   d44c2:	a804      	add	r0, sp, #16
   d44c4:	f002 f817 	bl	d64f6 <_ZN6StringC1EPK19__FlashStringHelper>
   d44c8:	a904      	add	r1, sp, #16
   d44ca:	a808      	add	r0, sp, #32
   d44cc:	f002 f8c7 	bl	d665e <_ZplRK15StringSumHelperRK6String>
   d44d0:	220a      	movs	r2, #10
   d44d2:	4681      	mov	r9, r0
   d44d4:	4629      	mov	r1, r5
   d44d6:	a80c      	add	r0, sp, #48	; 0x30
   d44d8:	f002 f870 	bl	d65bc <_ZN6StringC1Ejh>
   d44dc:	a90c      	add	r1, sp, #48	; 0x30
   d44de:	4648      	mov	r0, r9
   d44e0:	f002 f8bd 	bl	d665e <_ZplRK15StringSumHelperRK6String>
   d44e4:	49a6      	ldr	r1, [pc, #664]	; (d4780 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x318>)
   d44e6:	4681      	mov	r9, r0
   d44e8:	a810      	add	r0, sp, #64	; 0x40
   d44ea:	f002 f804 	bl	d64f6 <_ZN6StringC1EPK19__FlashStringHelper>
   d44ee:	a910      	add	r1, sp, #64	; 0x40
   d44f0:	4648      	mov	r0, r9
   d44f2:	f002 f8b4 	bl	d665e <_ZplRK15StringSumHelperRK6String>
   d44f6:	4631      	mov	r1, r6
   d44f8:	4681      	mov	r9, r0
   d44fa:	a814      	add	r0, sp, #80	; 0x50
   d44fc:	f002 f83a 	bl	d6574 <_ZN6StringC1ERKS_>
   d4500:	aa14      	add	r2, sp, #80	; 0x50
   d4502:	4621      	mov	r1, r4
   d4504:	a818      	add	r0, sp, #96	; 0x60
   d4506:	f7ff fe3d 	bl	d4184 <_ZN15ThingSpeakClass9escapeUrlE6String>
   d450a:	a918      	add	r1, sp, #96	; 0x60
   d450c:	4648      	mov	r0, r9
   d450e:	f002 f8a6 	bl	d665e <_ZplRK15StringSumHelperRK6String>
   d4512:	4601      	mov	r1, r0
   d4514:	4668      	mov	r0, sp
   d4516:	f002 f81e 	bl	d6556 <_ZN6StringaSERKS_>
   d451a:	a818      	add	r0, sp, #96	; 0x60
   d451c:	f001 ffa4 	bl	d6468 <_ZN6StringD1Ev>
   d4520:	a814      	add	r0, sp, #80	; 0x50
   d4522:	f001 ffa1 	bl	d6468 <_ZN6StringD1Ev>
   d4526:	a810      	add	r0, sp, #64	; 0x40
   d4528:	f001 ff9e 	bl	d6468 <_ZN6StringD1Ev>
   d452c:	a80c      	add	r0, sp, #48	; 0x30
   d452e:	f001 ff9b 	bl	d6468 <_ZN6StringD1Ev>
   d4532:	a804      	add	r0, sp, #16
   d4534:	f001 ff98 	bl	d6468 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4538:	a808      	add	r0, sp, #32
   d453a:	f001 ff95 	bl	d6468 <_ZN6StringD1Ev>
				fFirstItem = false;
				this->nextWriteField[iField] = "";
   d453e:	498d      	ldr	r1, [pc, #564]	; (d4774 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x30c>)
   d4540:	4630      	mov	r0, r6
   d4542:	f002 f82a 	bl	d659a <_ZN6StringaSEPKc>
				if(!fFirstItem)
				{
					postMessage = postMessage + String("&");
				}
				postMessage = postMessage + String("field") + String(iField + 1) + String("=") + escapeUrl(this->nextWriteField[iField]);
				fFirstItem = false;
   d4546:	2300      	movs	r3, #0
   d4548:	3501      	adds	r5, #1
	*/
	int writeFields(unsigned long channelNumber, const char * writeAPIKey)
	{
		String postMessage = String("");
		bool fFirstItem = true;
		for(size_t iField = 0; iField < 8; iField++)
   d454a:	2d09      	cmp	r5, #9
   d454c:	f106 0610 	add.w	r6, r6, #16
   d4550:	d198      	bne.n	d4484 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x1c>
				fFirstItem = false;
				this->nextWriteField[iField] = "";
			}
		}

		if(!isnan(nextWriteLatitude))
   d4552:	edd4 7a22 	vldr	s15, [r4, #136]	; 0x88
   d4556:	eef4 7a67 	vcmp.f32	s15, s15
   d455a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d455e:	d63e      	bvs.n	d45de <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x176>
		{
			if(!fFirstItem)
   d4560:	b9ab      	cbnz	r3, d458e <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x126>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4562:	4669      	mov	r1, sp
   d4564:	a818      	add	r0, sp, #96	; 0x60
   d4566:	f002 f805 	bl	d6574 <_ZN6StringC1ERKS_>
			{
				postMessage = postMessage + String("&");
   d456a:	4983      	ldr	r1, [pc, #524]	; (d4778 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x310>)
   d456c:	a814      	add	r0, sp, #80	; 0x50
   d456e:	f001 ffc2 	bl	d64f6 <_ZN6StringC1EPK19__FlashStringHelper>
   d4572:	a914      	add	r1, sp, #80	; 0x50
   d4574:	a818      	add	r0, sp, #96	; 0x60
   d4576:	f002 f872 	bl	d665e <_ZplRK15StringSumHelperRK6String>
   d457a:	4601      	mov	r1, r0
   d457c:	4668      	mov	r0, sp
   d457e:	f001 ffea 	bl	d6556 <_ZN6StringaSERKS_>
   d4582:	a814      	add	r0, sp, #80	; 0x50
   d4584:	f001 ff70 	bl	d6468 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4588:	a818      	add	r0, sp, #96	; 0x60
   d458a:	f001 ff6d 	bl	d6468 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d458e:	4669      	mov	r1, sp
   d4590:	a814      	add	r0, sp, #80	; 0x50
   d4592:	f001 ffef 	bl	d6574 <_ZN6StringC1ERKS_>
			}
			postMessage = postMessage + String("lat=") + String(this->nextWriteLatitude);
   d4596:	497b      	ldr	r1, [pc, #492]	; (d4784 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x31c>)
   d4598:	a810      	add	r0, sp, #64	; 0x40
   d459a:	f001 ffac 	bl	d64f6 <_ZN6StringC1EPK19__FlashStringHelper>
   d459e:	a910      	add	r1, sp, #64	; 0x40
   d45a0:	a814      	add	r0, sp, #80	; 0x50
   d45a2:	f002 f85c 	bl	d665e <_ZplRK15StringSumHelperRK6String>
   d45a6:	ed94 0a22 	vldr	s0, [r4, #136]	; 0x88
   d45aa:	4605      	mov	r5, r0
   d45ac:	2106      	movs	r1, #6
   d45ae:	a818      	add	r0, sp, #96	; 0x60
   d45b0:	f002 f817 	bl	d65e2 <_ZN6StringC1Efi>
   d45b4:	a918      	add	r1, sp, #96	; 0x60
   d45b6:	4628      	mov	r0, r5
   d45b8:	f002 f851 	bl	d665e <_ZplRK15StringSumHelperRK6String>
   d45bc:	4601      	mov	r1, r0
   d45be:	4668      	mov	r0, sp
   d45c0:	f001 ffc9 	bl	d6556 <_ZN6StringaSERKS_>
   d45c4:	a818      	add	r0, sp, #96	; 0x60
   d45c6:	f001 ff4f 	bl	d6468 <_ZN6StringD1Ev>
   d45ca:	a810      	add	r0, sp, #64	; 0x40
   d45cc:	f001 ff4c 	bl	d6468 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d45d0:	a814      	add	r0, sp, #80	; 0x50
   d45d2:	f001 ff49 	bl	d6468 <_ZN6StringD1Ev>
			fFirstItem = false;
			this->nextWriteLatitude = NAN;
   d45d6:	4b6c      	ldr	r3, [pc, #432]	; (d4788 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x320>)
   d45d8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
			if(!fFirstItem)
			{
				postMessage = postMessage + String("&");
			}
			postMessage = postMessage + String("lat=") + String(this->nextWriteLatitude);
			fFirstItem = false;
   d45dc:	2300      	movs	r3, #0
			this->nextWriteLatitude = NAN;
		}

		if(!isnan(this->nextWriteLongitude))
   d45de:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
   d45e2:	eef4 7a67 	vcmp.f32	s15, s15
   d45e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d45ea:	d63e      	bvs.n	d466a <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x202>
		{
			if(!fFirstItem)
   d45ec:	b9ab      	cbnz	r3, d461a <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x1b2>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d45ee:	4669      	mov	r1, sp
   d45f0:	a818      	add	r0, sp, #96	; 0x60
   d45f2:	f001 ffbf 	bl	d6574 <_ZN6StringC1ERKS_>
			{
				postMessage = postMessage + String("&");
   d45f6:	4960      	ldr	r1, [pc, #384]	; (d4778 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x310>)
   d45f8:	a814      	add	r0, sp, #80	; 0x50
   d45fa:	f001 ff7c 	bl	d64f6 <_ZN6StringC1EPK19__FlashStringHelper>
   d45fe:	a914      	add	r1, sp, #80	; 0x50
   d4600:	a818      	add	r0, sp, #96	; 0x60
   d4602:	f002 f82c 	bl	d665e <_ZplRK15StringSumHelperRK6String>
   d4606:	4601      	mov	r1, r0
   d4608:	4668      	mov	r0, sp
   d460a:	f001 ffa4 	bl	d6556 <_ZN6StringaSERKS_>
   d460e:	a814      	add	r0, sp, #80	; 0x50
   d4610:	f001 ff2a 	bl	d6468 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4614:	a818      	add	r0, sp, #96	; 0x60
   d4616:	f001 ff27 	bl	d6468 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d461a:	4669      	mov	r1, sp
   d461c:	a814      	add	r0, sp, #80	; 0x50
   d461e:	f001 ffa9 	bl	d6574 <_ZN6StringC1ERKS_>
			}
			postMessage = postMessage + String("long=") + String(this->nextWriteLongitude);
   d4622:	495a      	ldr	r1, [pc, #360]	; (d478c <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x324>)
   d4624:	a810      	add	r0, sp, #64	; 0x40
   d4626:	f001 ff66 	bl	d64f6 <_ZN6StringC1EPK19__FlashStringHelper>
   d462a:	a910      	add	r1, sp, #64	; 0x40
   d462c:	a814      	add	r0, sp, #80	; 0x50
   d462e:	f002 f816 	bl	d665e <_ZplRK15StringSumHelperRK6String>
   d4632:	ed94 0a23 	vldr	s0, [r4, #140]	; 0x8c
   d4636:	4605      	mov	r5, r0
   d4638:	2106      	movs	r1, #6
   d463a:	a818      	add	r0, sp, #96	; 0x60
   d463c:	f001 ffd1 	bl	d65e2 <_ZN6StringC1Efi>
   d4640:	a918      	add	r1, sp, #96	; 0x60
   d4642:	4628      	mov	r0, r5
   d4644:	f002 f80b 	bl	d665e <_ZplRK15StringSumHelperRK6String>
   d4648:	4601      	mov	r1, r0
   d464a:	4668      	mov	r0, sp
   d464c:	f001 ff83 	bl	d6556 <_ZN6StringaSERKS_>
   d4650:	a818      	add	r0, sp, #96	; 0x60
   d4652:	f001 ff09 	bl	d6468 <_ZN6StringD1Ev>
   d4656:	a810      	add	r0, sp, #64	; 0x40
   d4658:	f001 ff06 	bl	d6468 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d465c:	a814      	add	r0, sp, #80	; 0x50
   d465e:	f001 ff03 	bl	d6468 <_ZN6StringD1Ev>
			fFirstItem = false;
			this->nextWriteLongitude = NAN;
   d4662:	4b49      	ldr	r3, [pc, #292]	; (d4788 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x320>)
   d4664:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
			if(!fFirstItem)
			{
				postMessage = postMessage + String("&");
			}
			postMessage = postMessage + String("long=") + String(this->nextWriteLongitude);
			fFirstItem = false;
   d4668:	2300      	movs	r3, #0
			this->nextWriteLongitude = NAN;
		}


		if(!isnan(this->nextWriteElevation))
   d466a:	edd4 7a24 	vldr	s15, [r4, #144]	; 0x90
   d466e:	eef4 7a67 	vcmp.f32	s15, s15
   d4672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4676:	d63e      	bvs.n	d46f6 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x28e>
		{
			if(!fFirstItem)
   d4678:	b9ab      	cbnz	r3, d46a6 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x23e>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d467a:	4669      	mov	r1, sp
   d467c:	a818      	add	r0, sp, #96	; 0x60
   d467e:	f001 ff79 	bl	d6574 <_ZN6StringC1ERKS_>
			{
				postMessage = postMessage + String("&");
   d4682:	493d      	ldr	r1, [pc, #244]	; (d4778 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x310>)
   d4684:	a814      	add	r0, sp, #80	; 0x50
   d4686:	f001 ff36 	bl	d64f6 <_ZN6StringC1EPK19__FlashStringHelper>
   d468a:	a914      	add	r1, sp, #80	; 0x50
   d468c:	a818      	add	r0, sp, #96	; 0x60
   d468e:	f001 ffe6 	bl	d665e <_ZplRK15StringSumHelperRK6String>
   d4692:	4601      	mov	r1, r0
   d4694:	4668      	mov	r0, sp
   d4696:	f001 ff5e 	bl	d6556 <_ZN6StringaSERKS_>
   d469a:	a814      	add	r0, sp, #80	; 0x50
   d469c:	f001 fee4 	bl	d6468 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d46a0:	a818      	add	r0, sp, #96	; 0x60
   d46a2:	f001 fee1 	bl	d6468 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d46a6:	4669      	mov	r1, sp
   d46a8:	a814      	add	r0, sp, #80	; 0x50
   d46aa:	f001 ff63 	bl	d6574 <_ZN6StringC1ERKS_>
			}
			postMessage = postMessage + String("elevation=") + String(this->nextWriteElevation);
   d46ae:	4938      	ldr	r1, [pc, #224]	; (d4790 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x328>)
   d46b0:	a810      	add	r0, sp, #64	; 0x40
   d46b2:	f001 ff20 	bl	d64f6 <_ZN6StringC1EPK19__FlashStringHelper>
   d46b6:	a910      	add	r1, sp, #64	; 0x40
   d46b8:	a814      	add	r0, sp, #80	; 0x50
   d46ba:	f001 ffd0 	bl	d665e <_ZplRK15StringSumHelperRK6String>
   d46be:	ed94 0a24 	vldr	s0, [r4, #144]	; 0x90
   d46c2:	4605      	mov	r5, r0
   d46c4:	2106      	movs	r1, #6
   d46c6:	a818      	add	r0, sp, #96	; 0x60
   d46c8:	f001 ff8b 	bl	d65e2 <_ZN6StringC1Efi>
   d46cc:	a918      	add	r1, sp, #96	; 0x60
   d46ce:	4628      	mov	r0, r5
   d46d0:	f001 ffc5 	bl	d665e <_ZplRK15StringSumHelperRK6String>
   d46d4:	4601      	mov	r1, r0
   d46d6:	4668      	mov	r0, sp
   d46d8:	f001 ff3d 	bl	d6556 <_ZN6StringaSERKS_>
   d46dc:	a818      	add	r0, sp, #96	; 0x60
   d46de:	f001 fec3 	bl	d6468 <_ZN6StringD1Ev>
   d46e2:	a810      	add	r0, sp, #64	; 0x40
   d46e4:	f001 fec0 	bl	d6468 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d46e8:	a814      	add	r0, sp, #80	; 0x50
   d46ea:	f001 febd 	bl	d6468 <_ZN6StringD1Ev>
			fFirstItem = false;
			this->nextWriteElevation = NAN;
   d46ee:	4b26      	ldr	r3, [pc, #152]	; (d4788 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x320>)
   d46f0:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
			if(!fFirstItem)
			{
				postMessage = postMessage + String("&");
			}
			postMessage = postMessage + String("elevation=") + String(this->nextWriteElevation);
			fFirstItem = false;
   d46f4:	2300      	movs	r3, #0
			this->nextWriteElevation = NAN;
		}
		
		if(this->nextWriteStatus.length() > 0)
   d46f6:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   d46fa:	2a00      	cmp	r2, #0
   d46fc:	d05a      	beq.n	d47b4 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x34c>
		{
			if(!fFirstItem)
   d46fe:	b9ab      	cbnz	r3, d472c <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x2c4>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4700:	4669      	mov	r1, sp
   d4702:	a818      	add	r0, sp, #96	; 0x60
   d4704:	f001 ff36 	bl	d6574 <_ZN6StringC1ERKS_>
			{
				postMessage = postMessage + String("&");
   d4708:	491b      	ldr	r1, [pc, #108]	; (d4778 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x310>)
   d470a:	a814      	add	r0, sp, #80	; 0x50
   d470c:	f001 fef3 	bl	d64f6 <_ZN6StringC1EPK19__FlashStringHelper>
   d4710:	a914      	add	r1, sp, #80	; 0x50
   d4712:	a818      	add	r0, sp, #96	; 0x60
   d4714:	f001 ffa3 	bl	d665e <_ZplRK15StringSumHelperRK6String>
   d4718:	4601      	mov	r1, r0
   d471a:	4668      	mov	r0, sp
   d471c:	f001 ff1b 	bl	d6556 <_ZN6StringaSERKS_>
   d4720:	a814      	add	r0, sp, #80	; 0x50
   d4722:	f001 fea1 	bl	d6468 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4726:	a818      	add	r0, sp, #96	; 0x60
   d4728:	f001 fe9e 	bl	d6468 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d472c:	4669      	mov	r1, sp
   d472e:	a810      	add	r0, sp, #64	; 0x40
   d4730:	f001 ff20 	bl	d6574 <_ZN6StringC1ERKS_>
			}
			postMessage = postMessage + String("status=") + escapeUrl(this->nextWriteStatus);
   d4734:	4917      	ldr	r1, [pc, #92]	; (d4794 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x32c>)
   d4736:	a80c      	add	r0, sp, #48	; 0x30
   d4738:	f001 fedd 	bl	d64f6 <_ZN6StringC1EPK19__FlashStringHelper>
   d473c:	a90c      	add	r1, sp, #48	; 0x30
   d473e:	a810      	add	r0, sp, #64	; 0x40
   d4740:	f001 ff8d 	bl	d665e <_ZplRK15StringSumHelperRK6String>
   d4744:	f104 0598 	add.w	r5, r4, #152	; 0x98
   d4748:	4606      	mov	r6, r0
   d474a:	4629      	mov	r1, r5
   d474c:	a814      	add	r0, sp, #80	; 0x50
   d474e:	f001 ff11 	bl	d6574 <_ZN6StringC1ERKS_>
   d4752:	aa14      	add	r2, sp, #80	; 0x50
   d4754:	4621      	mov	r1, r4
   d4756:	a818      	add	r0, sp, #96	; 0x60
   d4758:	f7ff fd14 	bl	d4184 <_ZN15ThingSpeakClass9escapeUrlE6String>
   d475c:	a918      	add	r1, sp, #96	; 0x60
   d475e:	4630      	mov	r0, r6
   d4760:	f001 ff7d 	bl	d665e <_ZplRK15StringSumHelperRK6String>
   d4764:	4601      	mov	r1, r0
   d4766:	4668      	mov	r0, sp
   d4768:	f001 fef5 	bl	d6556 <_ZN6StringaSERKS_>
   d476c:	a818      	add	r0, sp, #96	; 0x60
   d476e:	f001 fe7b 	bl	d6468 <_ZN6StringD1Ev>
   d4772:	e011      	b.n	d4798 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x330>
   d4774:	000d840c 	.word	0x000d840c
   d4778:	000d843f 	.word	0x000d843f
   d477c:	000d8441 	.word	0x000d8441
   d4780:	000d8450 	.word	0x000d8450
   d4784:	000d8447 	.word	0x000d8447
   d4788:	7fc00000 	.word	0x7fc00000
   d478c:	000d844c 	.word	0x000d844c
   d4790:	000d8452 	.word	0x000d8452
   d4794:	000d845d 	.word	0x000d845d
   d4798:	a814      	add	r0, sp, #80	; 0x50
   d479a:	f001 fe65 	bl	d6468 <_ZN6StringD1Ev>
   d479e:	a80c      	add	r0, sp, #48	; 0x30
   d47a0:	f001 fe62 	bl	d6468 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d47a4:	a810      	add	r0, sp, #64	; 0x40
   d47a6:	f001 fe5f 	bl	d6468 <_ZN6StringD1Ev>
			fFirstItem = false;
			this->nextWriteStatus = "";
   d47aa:	497d      	ldr	r1, [pc, #500]	; (d49a0 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x538>)
   d47ac:	4628      	mov	r0, r5
   d47ae:	f001 fef4 	bl	d659a <_ZN6StringaSEPKc>
			if(!fFirstItem)
			{
				postMessage = postMessage + String("&");
			}
			postMessage = postMessage + String("status=") + escapeUrl(this->nextWriteStatus);
			fFirstItem = false;
   d47b2:	2300      	movs	r3, #0
			this->nextWriteStatus = "";
		}
		
		if(this->nextWriteTwitter.length() > 0)
   d47b4:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
   d47b8:	2a00      	cmp	r2, #0
   d47ba:	d047      	beq.n	d484c <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x3e4>
		{
			if(!fFirstItem)
   d47bc:	b9ab      	cbnz	r3, d47ea <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x382>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d47be:	4669      	mov	r1, sp
   d47c0:	a818      	add	r0, sp, #96	; 0x60
   d47c2:	f001 fed7 	bl	d6574 <_ZN6StringC1ERKS_>
			{
				postMessage = postMessage + String("&");
   d47c6:	4977      	ldr	r1, [pc, #476]	; (d49a4 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x53c>)
   d47c8:	a814      	add	r0, sp, #80	; 0x50
   d47ca:	f001 fe94 	bl	d64f6 <_ZN6StringC1EPK19__FlashStringHelper>
   d47ce:	a914      	add	r1, sp, #80	; 0x50
   d47d0:	a818      	add	r0, sp, #96	; 0x60
   d47d2:	f001 ff44 	bl	d665e <_ZplRK15StringSumHelperRK6String>
   d47d6:	4601      	mov	r1, r0
   d47d8:	4668      	mov	r0, sp
   d47da:	f001 febc 	bl	d6556 <_ZN6StringaSERKS_>
   d47de:	a814      	add	r0, sp, #80	; 0x50
   d47e0:	f001 fe42 	bl	d6468 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d47e4:	a818      	add	r0, sp, #96	; 0x60
   d47e6:	f001 fe3f 	bl	d6468 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d47ea:	4669      	mov	r1, sp
   d47ec:	a810      	add	r0, sp, #64	; 0x40
   d47ee:	f001 fec1 	bl	d6574 <_ZN6StringC1ERKS_>
			}
			postMessage = postMessage + String("twitter=") + escapeUrl(this->nextWriteTwitter);
   d47f2:	496d      	ldr	r1, [pc, #436]	; (d49a8 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x540>)
   d47f4:	a80c      	add	r0, sp, #48	; 0x30
   d47f6:	f001 fe7e 	bl	d64f6 <_ZN6StringC1EPK19__FlashStringHelper>
   d47fa:	a90c      	add	r1, sp, #48	; 0x30
   d47fc:	a810      	add	r0, sp, #64	; 0x40
   d47fe:	f001 ff2e 	bl	d665e <_ZplRK15StringSumHelperRK6String>
   d4802:	f104 05a8 	add.w	r5, r4, #168	; 0xa8
   d4806:	4606      	mov	r6, r0
   d4808:	4629      	mov	r1, r5
   d480a:	a814      	add	r0, sp, #80	; 0x50
   d480c:	f001 feb2 	bl	d6574 <_ZN6StringC1ERKS_>
   d4810:	aa14      	add	r2, sp, #80	; 0x50
   d4812:	4621      	mov	r1, r4
   d4814:	a818      	add	r0, sp, #96	; 0x60
   d4816:	f7ff fcb5 	bl	d4184 <_ZN15ThingSpeakClass9escapeUrlE6String>
   d481a:	a918      	add	r1, sp, #96	; 0x60
   d481c:	4630      	mov	r0, r6
   d481e:	f001 ff1e 	bl	d665e <_ZplRK15StringSumHelperRK6String>
   d4822:	4601      	mov	r1, r0
   d4824:	4668      	mov	r0, sp
   d4826:	f001 fe96 	bl	d6556 <_ZN6StringaSERKS_>
   d482a:	a818      	add	r0, sp, #96	; 0x60
   d482c:	f001 fe1c 	bl	d6468 <_ZN6StringD1Ev>
   d4830:	a814      	add	r0, sp, #80	; 0x50
   d4832:	f001 fe19 	bl	d6468 <_ZN6StringD1Ev>
   d4836:	a80c      	add	r0, sp, #48	; 0x30
   d4838:	f001 fe16 	bl	d6468 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d483c:	a810      	add	r0, sp, #64	; 0x40
   d483e:	f001 fe13 	bl	d6468 <_ZN6StringD1Ev>
			fFirstItem = false;
			this->nextWriteTwitter = "";
   d4842:	4957      	ldr	r1, [pc, #348]	; (d49a0 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x538>)
   d4844:	4628      	mov	r0, r5
   d4846:	f001 fea8 	bl	d659a <_ZN6StringaSEPKc>
			if(!fFirstItem)
			{
				postMessage = postMessage + String("&");
			}
			postMessage = postMessage + String("twitter=") + escapeUrl(this->nextWriteTwitter);
			fFirstItem = false;
   d484a:	2300      	movs	r3, #0
			this->nextWriteTwitter = "";
		}
		
		if(this->nextWriteTweet.length() > 0)
   d484c:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   d4850:	2a00      	cmp	r2, #0
   d4852:	d047      	beq.n	d48e4 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x47c>
		{
			if(!fFirstItem)
   d4854:	b9ab      	cbnz	r3, d4882 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x41a>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4856:	4669      	mov	r1, sp
   d4858:	a818      	add	r0, sp, #96	; 0x60
   d485a:	f001 fe8b 	bl	d6574 <_ZN6StringC1ERKS_>
			{
				postMessage = postMessage + String("&");
   d485e:	4951      	ldr	r1, [pc, #324]	; (d49a4 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x53c>)
   d4860:	a814      	add	r0, sp, #80	; 0x50
   d4862:	f001 fe48 	bl	d64f6 <_ZN6StringC1EPK19__FlashStringHelper>
   d4866:	a914      	add	r1, sp, #80	; 0x50
   d4868:	a818      	add	r0, sp, #96	; 0x60
   d486a:	f001 fef8 	bl	d665e <_ZplRK15StringSumHelperRK6String>
   d486e:	4601      	mov	r1, r0
   d4870:	4668      	mov	r0, sp
   d4872:	f001 fe70 	bl	d6556 <_ZN6StringaSERKS_>
   d4876:	a814      	add	r0, sp, #80	; 0x50
   d4878:	f001 fdf6 	bl	d6468 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d487c:	a818      	add	r0, sp, #96	; 0x60
   d487e:	f001 fdf3 	bl	d6468 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4882:	4669      	mov	r1, sp
   d4884:	a810      	add	r0, sp, #64	; 0x40
   d4886:	f001 fe75 	bl	d6574 <_ZN6StringC1ERKS_>
			}
			postMessage = postMessage + String("tweet=") + escapeUrl(this->nextWriteTweet);
   d488a:	4948      	ldr	r1, [pc, #288]	; (d49ac <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x544>)
   d488c:	a80c      	add	r0, sp, #48	; 0x30
   d488e:	f001 fe32 	bl	d64f6 <_ZN6StringC1EPK19__FlashStringHelper>
   d4892:	a90c      	add	r1, sp, #48	; 0x30
   d4894:	a810      	add	r0, sp, #64	; 0x40
   d4896:	f001 fee2 	bl	d665e <_ZplRK15StringSumHelperRK6String>
   d489a:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
   d489e:	4606      	mov	r6, r0
   d48a0:	4629      	mov	r1, r5
   d48a2:	a814      	add	r0, sp, #80	; 0x50
   d48a4:	f001 fe66 	bl	d6574 <_ZN6StringC1ERKS_>
   d48a8:	aa14      	add	r2, sp, #80	; 0x50
   d48aa:	4621      	mov	r1, r4
   d48ac:	a818      	add	r0, sp, #96	; 0x60
   d48ae:	f7ff fc69 	bl	d4184 <_ZN15ThingSpeakClass9escapeUrlE6String>
   d48b2:	a918      	add	r1, sp, #96	; 0x60
   d48b4:	4630      	mov	r0, r6
   d48b6:	f001 fed2 	bl	d665e <_ZplRK15StringSumHelperRK6String>
   d48ba:	4601      	mov	r1, r0
   d48bc:	4668      	mov	r0, sp
   d48be:	f001 fe4a 	bl	d6556 <_ZN6StringaSERKS_>
   d48c2:	a818      	add	r0, sp, #96	; 0x60
   d48c4:	f001 fdd0 	bl	d6468 <_ZN6StringD1Ev>
   d48c8:	a814      	add	r0, sp, #80	; 0x50
   d48ca:	f001 fdcd 	bl	d6468 <_ZN6StringD1Ev>
   d48ce:	a80c      	add	r0, sp, #48	; 0x30
   d48d0:	f001 fdca 	bl	d6468 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d48d4:	a810      	add	r0, sp, #64	; 0x40
   d48d6:	f001 fdc7 	bl	d6468 <_ZN6StringD1Ev>
			fFirstItem = false;
			this->nextWriteTweet = "";
   d48da:	4931      	ldr	r1, [pc, #196]	; (d49a0 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x538>)
   d48dc:	4628      	mov	r0, r5
   d48de:	f001 fe5c 	bl	d659a <_ZN6StringaSEPKc>
			if(!fFirstItem)
			{
				postMessage = postMessage + String("&");
			}
			postMessage = postMessage + String("tweet=") + escapeUrl(this->nextWriteTweet);
			fFirstItem = false;
   d48e2:	2300      	movs	r3, #0
			this->nextWriteTweet = "";
		}
		
		if(this->nextWriteCreatedAt.length() > 0)
   d48e4:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
   d48e8:	2a00      	cmp	r2, #0
   d48ea:	d03f      	beq.n	d496c <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x504>
		{
			if(!fFirstItem)
   d48ec:	b9ab      	cbnz	r3, d491a <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x4b2>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d48ee:	4669      	mov	r1, sp
   d48f0:	a818      	add	r0, sp, #96	; 0x60
   d48f2:	f001 fe3f 	bl	d6574 <_ZN6StringC1ERKS_>
			{
				postMessage = postMessage + String("&");
   d48f6:	492b      	ldr	r1, [pc, #172]	; (d49a4 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x53c>)
   d48f8:	a814      	add	r0, sp, #80	; 0x50
   d48fa:	f001 fdfc 	bl	d64f6 <_ZN6StringC1EPK19__FlashStringHelper>
   d48fe:	a914      	add	r1, sp, #80	; 0x50
   d4900:	a818      	add	r0, sp, #96	; 0x60
   d4902:	f001 feac 	bl	d665e <_ZplRK15StringSumHelperRK6String>
   d4906:	4601      	mov	r1, r0
   d4908:	4668      	mov	r0, sp
   d490a:	f001 fe24 	bl	d6556 <_ZN6StringaSERKS_>
   d490e:	a814      	add	r0, sp, #80	; 0x50
   d4910:	f001 fdaa 	bl	d6468 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4914:	a818      	add	r0, sp, #96	; 0x60
   d4916:	f001 fda7 	bl	d6468 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d491a:	4669      	mov	r1, sp
   d491c:	a814      	add	r0, sp, #80	; 0x50
   d491e:	f001 fe29 	bl	d6574 <_ZN6StringC1ERKS_>
			}
			postMessage = postMessage + String("created_at=") + String(this->nextWriteCreatedAt);
   d4922:	4923      	ldr	r1, [pc, #140]	; (d49b0 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x548>)
   d4924:	a810      	add	r0, sp, #64	; 0x40
   d4926:	f001 fde6 	bl	d64f6 <_ZN6StringC1EPK19__FlashStringHelper>
   d492a:	a910      	add	r1, sp, #64	; 0x40
   d492c:	a814      	add	r0, sp, #80	; 0x50
   d492e:	f001 fe96 	bl	d665e <_ZplRK15StringSumHelperRK6String>
   d4932:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   d4936:	4606      	mov	r6, r0
   d4938:	4629      	mov	r1, r5
   d493a:	a818      	add	r0, sp, #96	; 0x60
   d493c:	f001 fe1a 	bl	d6574 <_ZN6StringC1ERKS_>
   d4940:	a918      	add	r1, sp, #96	; 0x60
   d4942:	4630      	mov	r0, r6
   d4944:	f001 fe8b 	bl	d665e <_ZplRK15StringSumHelperRK6String>
   d4948:	4601      	mov	r1, r0
   d494a:	4668      	mov	r0, sp
   d494c:	f001 fe03 	bl	d6556 <_ZN6StringaSERKS_>
   d4950:	a818      	add	r0, sp, #96	; 0x60
   d4952:	f001 fd89 	bl	d6468 <_ZN6StringD1Ev>
   d4956:	a810      	add	r0, sp, #64	; 0x40
   d4958:	f001 fd86 	bl	d6468 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d495c:	a814      	add	r0, sp, #80	; 0x50
   d495e:	f001 fd83 	bl	d6468 <_ZN6StringD1Ev>
			fFirstItem = false;
			this->nextWriteCreatedAt = "";
   d4962:	490f      	ldr	r1, [pc, #60]	; (d49a0 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x538>)
   d4964:	4628      	mov	r0, r5
   d4966:	f001 fe18 	bl	d659a <_ZN6StringaSEPKc>
   d496a:	e000      	b.n	d496e <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x506>
		}
		
		
		if(fFirstItem)
   d496c:	b973      	cbnz	r3, d498c <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x524>
		{
			// setField was not called before writeFields
			return ERR_SETFIELD_NOT_CALLED;
		}

		return writeRaw(channelNumber, postMessage, writeAPIKey);
   d496e:	4669      	mov	r1, sp
   d4970:	a818      	add	r0, sp, #96	; 0x60
   d4972:	f001 fdff 	bl	d6574 <_ZN6StringC1ERKS_>
   d4976:	4643      	mov	r3, r8
   d4978:	aa18      	add	r2, sp, #96	; 0x60
   d497a:	4639      	mov	r1, r7
   d497c:	4620      	mov	r0, r4
   d497e:	f7ff fcbd 	bl	d42fc <_ZN15ThingSpeakClass8writeRawEm6StringPKc>
   d4982:	4604      	mov	r4, r0
   d4984:	a818      	add	r0, sp, #96	; 0x60
   d4986:	f001 fd6f 	bl	d6468 <_ZN6StringD1Ev>
   d498a:	e001      	b.n	d4990 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x528>
		
		
		if(fFirstItem)
		{
			// setField was not called before writeFields
			return ERR_SETFIELD_NOT_CALLED;
   d498c:	f06f 04d1 	mvn.w	r4, #209	; 0xd1
	Call setField(), setLatitude(), setLongitude(), setElevation() and/or setStatus() and then call writeFields()
	
	*/
	int writeFields(unsigned long channelNumber, const char * writeAPIKey)
	{
		String postMessage = String("");
   d4990:	4668      	mov	r0, sp
   d4992:	f001 fd69 	bl	d6468 <_ZN6StringD1Ev>
			// setField was not called before writeFields
			return ERR_SETFIELD_NOT_CALLED;
		}

		return writeRaw(channelNumber, postMessage, writeAPIKey);
	};
   d4996:	4620      	mov	r0, r4
   d4998:	b01d      	add	sp, #116	; 0x74
   d499a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d499e:	bf00      	nop
   d49a0:	000d840c 	.word	0x000d840c
   d49a4:	000d843f 	.word	0x000d843f
   d49a8:	000d8465 	.word	0x000d8465
   d49ac:	000d846e 	.word	0x000d846e
   d49b0:	000d8475 	.word	0x000d8475

000d49b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d49b4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d49b6:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d49b8:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d49ba:	b17c      	cbz	r4, d49dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d49bc:	6863      	ldr	r3, [r4, #4]
   d49be:	3b01      	subs	r3, #1
   d49c0:	6063      	str	r3, [r4, #4]
   d49c2:	b95b      	cbnz	r3, d49dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d49c4:	6823      	ldr	r3, [r4, #0]
   d49c6:	4620      	mov	r0, r4
   d49c8:	689b      	ldr	r3, [r3, #8]
   d49ca:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d49cc:	68a3      	ldr	r3, [r4, #8]
   d49ce:	3b01      	subs	r3, #1
   d49d0:	60a3      	str	r3, [r4, #8]
   d49d2:	b91b      	cbnz	r3, d49dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d49d4:	6823      	ldr	r3, [r4, #0]
   d49d6:	4620      	mov	r0, r4
   d49d8:	68db      	ldr	r3, [r3, #12]
   d49da:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d49dc:	4628      	mov	r0, r5
   d49de:	bd38      	pop	{r3, r4, r5, pc}

000d49e0 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d49e0:	b510      	push	{r4, lr}
   d49e2:	4b04      	ldr	r3, [pc, #16]	; (d49f4 <_ZN9TCPClientD1Ev+0x14>)
   d49e4:	4604      	mov	r4, r0
   d49e6:	f840 3b18 	str.w	r3, [r0], #24
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d49ea:	f7ff ffe3 	bl	d49b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d49ee:	4620      	mov	r0, r4
   d49f0:	bd10      	pop	{r4, pc}
   d49f2:	bf00      	nop
   d49f4:	000d870c 	.word	0x000d870c

000d49f8 <_ZN9TCPClientD0Ev>:
   d49f8:	b510      	push	{r4, lr}
   d49fa:	4604      	mov	r4, r0
   d49fc:	f7ff fff0 	bl	d49e0 <_ZN9TCPClientD1Ev>
   d4a00:	4620      	mov	r0, r4
   d4a02:	f7ff fb4a 	bl	d409a <_ZdlPv>
   d4a06:	4620      	mov	r0, r4
   d4a08:	bd10      	pop	{r4, pc}
	...

000d4a0c <setup>:

char buffer[100];
char buffer2[100];
char buffer3[100];

void setup() {
   d4a0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  // Put initialization like pinMode and begin functions here.
  pinMode(A5, OUTPUT);
   d4a0e:	2101      	movs	r1, #1
   d4a10:	200e      	movs	r0, #14
   d4a12:	f002 faff 	bl	d7014 <pinMode>
  pinMode(D7, OUTPUT);
   d4a16:	2101      	movs	r1, #1
   d4a18:	2007      	movs	r0, #7
   d4a1a:	f002 fafb 	bl	d7014 <pinMode>
	{
		this->port = port;
	}
	
	
	void setClient(Client * client) {this->client = client;};
   d4a1e:	4b26      	ldr	r3, [pc, #152]	; (d4ab8 <setup+0xac>)
   d4a20:	4a26      	ldr	r2, [pc, #152]	; (d4abc <setup+0xb0>)
   d4a22:	601a      	str	r2, [r3, #0]
		return String("");
    }
	
	void setPort(unsigned int port)
	{
		this->port = port;
   d4a24:	2250      	movs	r2, #80	; 0x50
   d4a26:	605a      	str	r2, [r3, #4]
   d4a28:	2600      	movs	r6, #0
   d4a2a:	461d      	mov	r5, r3

	void resetWriteFields()
	{
		for(size_t iField = 0; iField < 8; iField++)
		{
			this->nextWriteField[iField] = "";
   d4a2c:	f106 0008 	add.w	r0, r6, #8
   d4a30:	4923      	ldr	r1, [pc, #140]	; (d4ac0 <setup+0xb4>)
   d4a32:	4c21      	ldr	r4, [pc, #132]	; (d4ab8 <setup+0xac>)
   d4a34:	4428      	add	r0, r5
   d4a36:	3610      	adds	r6, #16
   d4a38:	f001 fdaf 	bl	d659a <_ZN6StringaSEPKc>
		return result;
	};

	void resetWriteFields()
	{
		for(size_t iField = 0; iField < 8; iField++)
   d4a3c:	2e80      	cmp	r6, #128	; 0x80
   d4a3e:	d1f5      	bne.n	d4a2c <setup+0x20>
		{
			this->nextWriteField[iField] = "";
		}
		this->nextWriteLatitude = NAN;
   d4a40:	4b20      	ldr	r3, [pc, #128]	; (d4ac4 <setup+0xb8>)
		this->nextWriteLongitude = NAN;
		this->nextWriteElevation = NAN;
		this->nextWriteStatus = "";
   d4a42:	491f      	ldr	r1, [pc, #124]	; (d4ac0 <setup+0xb4>)
	{
		for(size_t iField = 0; iField < 8; iField++)
		{
			this->nextWriteField[iField] = "";
		}
		this->nextWriteLatitude = NAN;
   d4a44:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
		this->nextWriteLongitude = NAN;
		this->nextWriteElevation = NAN;
		this->nextWriteStatus = "";
   d4a48:	f104 0098 	add.w	r0, r4, #152	; 0x98
		for(size_t iField = 0; iField < 8; iField++)
		{
			this->nextWriteField[iField] = "";
		}
		this->nextWriteLatitude = NAN;
		this->nextWriteLongitude = NAN;
   d4a4c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		this->nextWriteElevation = NAN;
   d4a50:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		this->nextWriteStatus = "";
   d4a54:	f001 fda1 	bl	d659a <_ZN6StringaSEPKc>
		this->nextWriteTwitter = "";
   d4a58:	4919      	ldr	r1, [pc, #100]	; (d4ac0 <setup+0xb4>)
   d4a5a:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
   d4a5e:	f001 fd9c 	bl	d659a <_ZN6StringaSEPKc>
		this->nextWriteTweet = "";
   d4a62:	4917      	ldr	r1, [pc, #92]	; (d4ac0 <setup+0xb4>)
   d4a64:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   d4a68:	f001 fd97 	bl	d659a <_ZN6StringaSEPKc>
		this->nextWriteCreatedAt = "";
   d4a6c:	4914      	ldr	r1, [pc, #80]	; (d4ac0 <setup+0xb4>)
   d4a6e:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
   d4a72:	f001 fd92 	bl	d659a <_ZN6StringaSEPKc>
			Particle.publish(SPARK_PUBLISH_TOPIC, "ts::tsBegin", SPARK_PUBLISH_TTL, PRIVATE);
		#endif
		this->setClient(&client);
		this->setPort(THINGSPEAK_PORT_NUMBER);
		resetWriteFields();
		this->lastReadStatus = OK_SUCCESS;
   d4a76:	23c8      	movs	r3, #200	; 0xc8
   d4a78:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
   d4a7c:	4b12      	ldr	r3, [pc, #72]	; (d4ac8 <setup+0xbc>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4a7e:	4a13      	ldr	r2, [pc, #76]	; (d4acc <setup+0xc0>)
   d4a80:	781b      	ldrb	r3, [r3, #0]
   d4a82:	f88d 3000 	strb.w	r3, [sp]
   d4a86:	a802      	add	r0, sp, #8
   d4a88:	233c      	movs	r3, #60	; 0x3c
   d4a8a:	4911      	ldr	r1, [pc, #68]	; (d4ad0 <setup+0xc4>)
   d4a8c:	f000 fe90 	bl	d57b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4a90:	a803      	add	r0, sp, #12
   d4a92:	f7ff ff8f 	bl	d49b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  ThingSpeak.begin(client);
  Particle.publish("PowerON", "Weather Station", 60, PRIVATE);
  
  // Serial.println("Adafruit_MPL3115A2 test!");
  
  while(! baro.begin()) {
   d4a96:	480f      	ldr	r0, [pc, #60]	; (d4ad4 <setup+0xc8>)
   d4a98:	f000 f990 	bl	d4dbc <_ZN18Adafruit_MPL3115A25beginEv>
   d4a9c:	b948      	cbnz	r0, d4ab2 <setup+0xa6>
    Serial.println("Couldnt find sensor");
   d4a9e:	f002 f989 	bl	d6db4 <_Z16_fetch_usbserialv>
   d4aa2:	490d      	ldr	r1, [pc, #52]	; (d4ad8 <setup+0xcc>)
   d4aa4:	f001 fa67 	bl	d5f76 <_ZN5Print7printlnEPKc>
    delay(1000);
   d4aa8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4aac:	f000 fd2c 	bl	d5508 <delay>
  ThingSpeak.begin(client);
  Particle.publish("PowerON", "Weather Station", 60, PRIVATE);
  
  // Serial.println("Adafruit_MPL3115A2 test!");
  
  while(! baro.begin()) {
   d4ab0:	e7f1      	b.n	d4a96 <setup+0x8a>
    Serial.println("Couldnt find sensor");
    delay(1000);
  }
}
   d4ab2:	b004      	add	sp, #16
   d4ab4:	bd70      	pop	{r4, r5, r6, pc}
   d4ab6:	bf00      	nop
   d4ab8:	2003e2f8 	.word	0x2003e2f8
   d4abc:	2003e2d4 	.word	0x2003e2d4
   d4ac0:	000d840c 	.word	0x000d840c
   d4ac4:	7fc00000 	.word	0x7fc00000
   d4ac8:	2003e26d 	.word	0x2003e26d
   d4acc:	000d8481 	.word	0x000d8481
   d4ad0:	000d8491 	.word	0x000d8491
   d4ad4:	2003e2f0 	.word	0x2003e2f0
   d4ad8:	000d8499 	.word	0x000d8499
   d4adc:	00000000 	.word	0x00000000

000d4ae0 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4ae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4ae4:	ed2d 8b02 	vpush	{d8}

  
   float pascals = baro.getPressure();
   d4ae8:	4d57      	ldr	r5, [pc, #348]	; (d4c48 <loop+0x168>)
    delay(1000);
  }
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4aea:	b085      	sub	sp, #20

  
   float pascals = baro.getPressure();
   d4aec:	4628      	mov	r0, r5
   d4aee:	f000 f986 	bl	d4dfe <_ZN18Adafruit_MPL3115A211getPressureEv>
   d4af2:	eeb0 8a40 	vmov.f32	s16, s0
  // Our weather page presents pressure in Inches (Hg)
  // Use http://www.onlineconversion.com/pressure.htm for other units
  Serial.print(pascals/3377); Serial.println(" Inches (Hg)");
   d4af6:	f002 f95d 	bl	d6db4 <_Z16_fetch_usbserialv>
   d4afa:	eddf 7a54 	vldr	s15, [pc, #336]	; d4c4c <loop+0x16c>
   d4afe:	ee88 7a27 	vdiv.f32	s14, s16, s15
   d4b02:	4604      	mov	r4, r0
   d4b04:	ee17 0a10 	vmov	r0, s14
   d4b08:	f002 fda4 	bl	d7654 <__aeabi_f2d>
   d4b0c:	ec41 0b10 	vmov	d0, r0, r1
   d4b10:	2102      	movs	r1, #2
   d4b12:	4620      	mov	r0, r4
   d4b14:	f001 fb48 	bl	d61a8 <_ZN5Print5printEdi>
   d4b18:	f002 f94c 	bl	d6db4 <_Z16_fetch_usbserialv>
   d4b1c:	494c      	ldr	r1, [pc, #304]	; (d4c50 <loop+0x170>)
  snprintf(buffer, sizeof(buffer), "%f Inches (Hg)", pascals);
   d4b1e:	4c4d      	ldr	r4, [pc, #308]	; (d4c54 <loop+0x174>)

  
   float pascals = baro.getPressure();
  // Our weather page presents pressure in Inches (Hg)
  // Use http://www.onlineconversion.com/pressure.htm for other units
  Serial.print(pascals/3377); Serial.println(" Inches (Hg)");
   d4b20:	f001 fa29 	bl	d5f76 <_ZN5Print7printlnEPKc>
  snprintf(buffer, sizeof(buffer), "%f Inches (Hg)", pascals);
   d4b24:	ee18 0a10 	vmov	r0, s16
   d4b28:	f002 fd94 	bl	d7654 <__aeabi_f2d>
   d4b2c:	4a4a      	ldr	r2, [pc, #296]	; (d4c58 <loop+0x178>)
   d4b2e:	e9cd 0100 	strd	r0, r1, [sp]
   d4b32:	2164      	movs	r1, #100	; 0x64
   d4b34:	4620      	mov	r0, r4
   d4b36:	f000 fcc7 	bl	d54c8 <snprintf>
  Particle.publish("pressure", buffer);
   d4b3a:	4948      	ldr	r1, [pc, #288]	; (d4c5c <loop+0x17c>)
   d4b3c:	a802      	add	r0, sp, #8
   d4b3e:	f7ff fac1 	bl	d40c4 <_ZN10CloudClass7publishEPKcS1_.isra.11.constprop.13>
   d4b42:	a803      	add	r0, sp, #12
   d4b44:	f7ff ff36 	bl	d49b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

  float altm = baro.getAltitude();
   d4b48:	4628      	mov	r0, r5
   d4b4a:	f000 f99a 	bl	d4e82 <_ZN18Adafruit_MPL3115A211getAltitudeEv>
  snprintf(buffer, sizeof(buffer), "%f meters", altm);
   d4b4e:	ee10 0a10 	vmov	r0, s0
   d4b52:	f002 fd7f 	bl	d7654 <__aeabi_f2d>
   d4b56:	4606      	mov	r6, r0
   d4b58:	460f      	mov	r7, r1
   d4b5a:	4a41      	ldr	r2, [pc, #260]	; (d4c60 <loop+0x180>)
   d4b5c:	e9cd 6700 	strd	r6, r7, [sp]
   d4b60:	2164      	movs	r1, #100	; 0x64
   d4b62:	4620      	mov	r0, r4
   d4b64:	f000 fcb0 	bl	d54c8 <snprintf>
  Particle.publish("altm", buffer);
   d4b68:	493e      	ldr	r1, [pc, #248]	; (d4c64 <loop+0x184>)
   d4b6a:	a802      	add	r0, sp, #8
   d4b6c:	f7ff faaa 	bl	d40c4 <_ZN10CloudClass7publishEPKcS1_.isra.11.constprop.13>
   d4b70:	a803      	add	r0, sp, #12
   d4b72:	f7ff ff1f 	bl	d49b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

  float tempC = baro.getTemperature();
   d4b76:	4628      	mov	r0, r5
   d4b78:	f000 f8cc 	bl	d4d14 <_ZN18Adafruit_MPL3115A214getTemperatureEv>
  snprintf(buffer, sizeof(buffer), "Temp is %f*C", tempC);
   d4b7c:	ee10 0a10 	vmov	r0, s0
   d4b80:	f002 fd68 	bl	d7654 <__aeabi_f2d>
   d4b84:	4680      	mov	r8, r0
   d4b86:	4689      	mov	r9, r1
   d4b88:	4a37      	ldr	r2, [pc, #220]	; (d4c68 <loop+0x188>)
   d4b8a:	e9cd 8900 	strd	r8, r9, [sp]
   d4b8e:	2164      	movs	r1, #100	; 0x64
   d4b90:	4620      	mov	r0, r4
   d4b92:	f000 fc99 	bl	d54c8 <snprintf>
  Particle.publish("temp", buffer);
   d4b96:	4935      	ldr	r1, [pc, #212]	; (d4c6c <loop+0x18c>)

  float tempToF = (tempC * 1.8000) + 32;
  float metersToFeet = altm * 3.2808;
  ThingSpeak.setField(1, tempToF);
   d4b98:	4c35      	ldr	r4, [pc, #212]	; (d4c70 <loop+0x190>)
  snprintf(buffer, sizeof(buffer), "%f meters", altm);
  Particle.publish("altm", buffer);

  float tempC = baro.getTemperature();
  snprintf(buffer, sizeof(buffer), "Temp is %f*C", tempC);
  Particle.publish("temp", buffer);
   d4b9a:	a802      	add	r0, sp, #8
   d4b9c:	f7ff fa92 	bl	d40c4 <_ZN10CloudClass7publishEPKcS1_.isra.11.constprop.13>
   d4ba0:	a803      	add	r0, sp, #12
   d4ba2:	f7ff ff07 	bl	d49b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

  float tempToF = (tempC * 1.8000) + 32;
  float metersToFeet = altm * 3.2808;
  ThingSpeak.setField(1, tempToF);
   d4ba6:	a324      	add	r3, pc, #144	; (adr r3, d4c38 <loop+0x158>)
   d4ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4bac:	4640      	mov	r0, r8
   d4bae:	4649      	mov	r1, r9
   d4bb0:	f002 fda4 	bl	d76fc <__aeabi_dmul>
   d4bb4:	2200      	movs	r2, #0
   d4bb6:	4b2f      	ldr	r3, [pc, #188]	; (d4c74 <loop+0x194>)
   d4bb8:	f002 fbee 	bl	d7398 <__adddf3>
   d4bbc:	f003 f896 	bl	d7cec <__aeabi_d2f>
   d4bc0:	2101      	movs	r1, #1
   d4bc2:	ee00 0a10 	vmov	s0, r0
   d4bc6:	4620      	mov	r0, r4
   d4bc8:	f7ff fa8e 	bl	d40e8 <_ZN15ThingSpeakClass8setFieldEjf>
  ThingSpeak.setField(2, metersToFeet);
   d4bcc:	a31c      	add	r3, pc, #112	; (adr r3, d4c40 <loop+0x160>)
   d4bce:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4bd2:	4630      	mov	r0, r6
   d4bd4:	4639      	mov	r1, r7
   d4bd6:	f002 fd91 	bl	d76fc <__aeabi_dmul>
   d4bda:	f003 f887 	bl	d7cec <__aeabi_d2f>
   d4bde:	2102      	movs	r1, #2
   d4be0:	ee00 0a10 	vmov	s0, r0
   d4be4:	4620      	mov	r0, r4
   d4be6:	f7ff fa7f 	bl	d40e8 <_ZN15ThingSpeakClass8setFieldEjf>
  ThingSpeak.setField(3, pascals );
   d4bea:	eeb0 0a48 	vmov.f32	s0, s16
   d4bee:	2103      	movs	r1, #3
   d4bf0:	4620      	mov	r0, r4
   d4bf2:	f7ff fa79 	bl	d40e8 <_ZN15ThingSpeakClass8setFieldEjf>
  ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);
   d4bf6:	4b20      	ldr	r3, [pc, #128]	; (d4c78 <loop+0x198>)
   d4bf8:	681a      	ldr	r2, [r3, #0]
   d4bfa:	4b20      	ldr	r3, [pc, #128]	; (d4c7c <loop+0x19c>)
   d4bfc:	4620      	mov	r0, r4
   d4bfe:	6819      	ldr	r1, [r3, #0]
   d4c00:	f7ff fc32 	bl	d4468 <_ZN15ThingSpeakClass11writeFieldsEmPKc>

  digitalWrite(A5, HIGH);
   d4c04:	2101      	movs	r1, #1
   d4c06:	200e      	movs	r0, #14
   d4c08:	f002 fa15 	bl	d7036 <digitalWrite>
  digitalWrite(D7, HIGH);
   d4c0c:	2101      	movs	r1, #1
   d4c0e:	2007      	movs	r0, #7
   d4c10:	f002 fa11 	bl	d7036 <digitalWrite>
  
  delay(sendDelay);
   d4c14:	4b1a      	ldr	r3, [pc, #104]	; (d4c80 <loop+0x1a0>)
   d4c16:	6818      	ldr	r0, [r3, #0]
   d4c18:	f000 fc76 	bl	d5508 <delay>
  
  digitalWrite(A5, LOW);
   d4c1c:	2100      	movs	r1, #0
   d4c1e:	200e      	movs	r0, #14
   d4c20:	f002 fa09 	bl	d7036 <digitalWrite>
  digitalWrite(D7, LOW);
   d4c24:	2100      	movs	r1, #0
   d4c26:	2007      	movs	r0, #7
   d4c28:	f002 fa05 	bl	d7036 <digitalWrite>
  
  // delay(1000);
  
  
  // delay(1000);
   d4c2c:	b005      	add	sp, #20
   d4c2e:	ecbd 8b02 	vpop	{d8}
   d4c32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4c36:	bf00      	nop
   d4c38:	cccccccd 	.word	0xcccccccd
   d4c3c:	3ffccccc 	.word	0x3ffccccc
   d4c40:	1205bc02 	.word	0x1205bc02
   d4c44:	400a3f14 	.word	0x400a3f14
   d4c48:	2003e2f0 	.word	0x2003e2f0
   d4c4c:	45531000 	.word	0x45531000
   d4c50:	000d84af 	.word	0x000d84af
   d4c54:	2003e26e 	.word	0x2003e26e
   d4c58:	000d84ad 	.word	0x000d84ad
   d4c5c:	000d84bc 	.word	0x000d84bc
   d4c60:	000d84c5 	.word	0x000d84c5
   d4c64:	000d84cf 	.word	0x000d84cf
   d4c68:	000d84d4 	.word	0x000d84d4
   d4c6c:	000d84e1 	.word	0x000d84e1
   d4c70:	2003e2f8 	.word	0x2003e2f8
   d4c74:	40400000 	.word	0x40400000
   d4c78:	2003e1f8 	.word	0x2003e1f8
   d4c7c:	2003e1f0 	.word	0x2003e1f0
   d4c80:	2003e1f4 	.word	0x2003e1f4

000d4c84 <_GLOBAL__sub_I_baro>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4c84:	4b0b      	ldr	r3, [pc, #44]	; (d4cb4 <_GLOBAL__sub_I_baro+0x30>)
   d4c86:	b510      	push	{r4, lr}
   d4c88:	2200      	movs	r2, #0
   d4c8a:	701a      	strb	r2, [r3, #0]
   d4c8c:	4b0a      	ldr	r3, [pc, #40]	; (d4cb8 <_GLOBAL__sub_I_baro+0x34>)
#include "ThingSpeak.h"

Adafruit_MPL3115A2 baro = Adafruit_MPL3115A2();

// Thing Speak config
TCPClient client;
   d4c8e:	4c0b      	ldr	r4, [pc, #44]	; (d4cbc <_GLOBAL__sub_I_baro+0x38>)
   d4c90:	2201      	movs	r2, #1
   d4c92:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4c94:	f000 fa04 	bl	d50a0 <HAL_Pin_Map>
 */

#include "Adafruit_MPL3115A2.h"
#include "ThingSpeak.h"

Adafruit_MPL3115A2 baro = Adafruit_MPL3115A2();
   d4c98:	4809      	ldr	r0, [pc, #36]	; (d4cc0 <_GLOBAL__sub_I_baro+0x3c>)
   d4c9a:	f000 f81b 	bl	d4cd4 <_ZN18Adafruit_MPL3115A2C1Ev>

// Thing Speak config
TCPClient client;
   d4c9e:	4620      	mov	r0, r4
   d4ca0:	f001 ffb0 	bl	d6c04 <_ZN9TCPClientC1Ev>
   d4ca4:	4620      	mov	r0, r4
   d4ca6:	4a07      	ldr	r2, [pc, #28]	; (d4cc4 <_GLOBAL__sub_I_baro+0x40>)
   d4ca8:	4907      	ldr	r1, [pc, #28]	; (d4cc8 <_GLOBAL__sub_I_baro+0x44>)
  
  // delay(1000);
  
  
  // delay(1000);
   d4caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "ThingSpeak.h"

Adafruit_MPL3115A2 baro = Adafruit_MPL3115A2();

// Thing Speak config
TCPClient client;
   d4cae:	f002 ba1d 	b.w	d70ec <__aeabi_atexit>
   d4cb2:	bf00      	nop
   d4cb4:	2003e26c 	.word	0x2003e26c
   d4cb8:	2003e26d 	.word	0x2003e26d
   d4cbc:	2003e2d4 	.word	0x2003e2d4
   d4cc0:	2003e2f0 	.word	0x2003e2f0
   d4cc4:	2003e268 	.word	0x2003e268
   d4cc8:	000d49e1 	.word	0x000d49e1

000d4ccc <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4ccc:	6803      	ldr	r3, [r0, #0]
   d4cce:	b2c9      	uxtb	r1, r1
   d4cd0:	689b      	ldr	r3, [r3, #8]
   d4cd2:	4718      	bx	r3

000d4cd4 <_ZN18Adafruit_MPL3115A2C1Ev>:
    @brief  Instantiates a new MPL3115A2 class
*/
/**************************************************************************/
Adafruit_MPL3115A2::Adafruit_MPL3115A2() {

}
   d4cd4:	4770      	bx	lr

000d4cd6 <_ZN18Adafruit_MPL3115A25read8Eh>:



/*********************************************************************/

uint8_t Adafruit_MPL3115A2::read8(uint8_t a) {
   d4cd6:	b510      	push	{r4, lr}
   d4cd8:	460c      	mov	r4, r1
  Wire.beginTransmission(MPL3115A2_ADDRESS); // start transmission to device 
   d4cda:	f002 f9c5 	bl	d7068 <_Z19__fetch_global_Wirev>
   d4cde:	2160      	movs	r1, #96	; 0x60
   d4ce0:	f000 ff5c 	bl	d5b9c <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(a); // sends register address to read from
   d4ce4:	f002 f9c0 	bl	d7068 <_Z19__fetch_global_Wirev>
   d4ce8:	6803      	ldr	r3, [r0, #0]
   d4cea:	4621      	mov	r1, r4
   d4cec:	689b      	ldr	r3, [r3, #8]
   d4cee:	4798      	blx	r3
  Wire.endTransmission(false); // end transmission
   d4cf0:	f002 f9ba 	bl	d7068 <_Z19__fetch_global_Wirev>
   d4cf4:	2100      	movs	r1, #0
   d4cf6:	f000 ff54 	bl	d5ba2 <_ZN7TwoWire15endTransmissionEh>
  
  Wire.requestFrom((uint8_t)MPL3115A2_ADDRESS, (uint8_t)1);// send data n-bytes read
   d4cfa:	f002 f9b5 	bl	d7068 <_Z19__fetch_global_Wirev>
   d4cfe:	2201      	movs	r2, #1
   d4d00:	2160      	movs	r1, #96	; 0x60
   d4d02:	f000 ff44 	bl	d5b8e <_ZN7TwoWire11requestFromEhh>
  return Wire.read(); // receive DATA
   d4d06:	f002 f9af 	bl	d7068 <_Z19__fetch_global_Wirev>
   d4d0a:	6803      	ldr	r3, [r0, #0]
   d4d0c:	695b      	ldr	r3, [r3, #20]
   d4d0e:	4798      	blx	r3
}
   d4d10:	b2c0      	uxtb	r0, r0
   d4d12:	bd10      	pop	{r4, pc}

000d4d14 <_ZN18Adafruit_MPL3115A214getTemperatureEv>:
/**************************************************************************/
/*!
    @brief  Gets the floating-point temperature in Centigrade
*/
/**************************************************************************/
float Adafruit_MPL3115A2::getTemperature() {
   d4d14:	b538      	push	{r3, r4, r5, lr}
   d4d16:	4605      	mov	r5, r0
  uint16_t t;

  uint8_t sta = 0;
   d4d18:	2400      	movs	r4, #0
  while (! (sta & MPL3115A2_REGISTER_STATUS_TDR)) {
   d4d1a:	f004 0402 	and.w	r4, r4, #2
   d4d1e:	f004 01ff 	and.w	r1, r4, #255	; 0xff
   d4d22:	b93c      	cbnz	r4, d4d34 <_ZN18Adafruit_MPL3115A214getTemperatureEv+0x20>
    sta = read8(MPL3115A2_REGISTER_STATUS);
   d4d24:	4628      	mov	r0, r5
   d4d26:	f7ff ffd6 	bl	d4cd6 <_ZN18Adafruit_MPL3115A25read8Eh>
   d4d2a:	4604      	mov	r4, r0
    delay(10);
   d4d2c:	200a      	movs	r0, #10
   d4d2e:	f000 fbeb 	bl	d5508 <delay>
/**************************************************************************/
float Adafruit_MPL3115A2::getTemperature() {
  uint16_t t;

  uint8_t sta = 0;
  while (! (sta & MPL3115A2_REGISTER_STATUS_TDR)) {
   d4d32:	e7f2      	b.n	d4d1a <_ZN18Adafruit_MPL3115A214getTemperatureEv+0x6>
    sta = read8(MPL3115A2_REGISTER_STATUS);
    delay(10);
  }
  Wire.beginTransmission(MPL3115A2_ADDRESS); // start transmission to device 
   d4d34:	f002 f998 	bl	d7068 <_Z19__fetch_global_Wirev>
   d4d38:	2160      	movs	r1, #96	; 0x60
   d4d3a:	f000 ff2f 	bl	d5b9c <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(MPL3115A2_REGISTER_TEMP_MSB); 
   d4d3e:	f002 f993 	bl	d7068 <_Z19__fetch_global_Wirev>
   d4d42:	2104      	movs	r1, #4
   d4d44:	f7ff ffc2 	bl	d4ccc <_ZN7TwoWire5writeEi>
  Wire.endTransmission(false); // end transmission
   d4d48:	f002 f98e 	bl	d7068 <_Z19__fetch_global_Wirev>
   d4d4c:	2100      	movs	r1, #0
   d4d4e:	f000 ff28 	bl	d5ba2 <_ZN7TwoWire15endTransmissionEh>
  
  Wire.requestFrom((uint8_t)MPL3115A2_ADDRESS, (uint8_t)2);// send data n-bytes read
   d4d52:	f002 f989 	bl	d7068 <_Z19__fetch_global_Wirev>
   d4d56:	2202      	movs	r2, #2
   d4d58:	2160      	movs	r1, #96	; 0x60
   d4d5a:	f000 ff18 	bl	d5b8e <_ZN7TwoWire11requestFromEhh>
  t = Wire.read(); // receive DATA
   d4d5e:	f002 f983 	bl	d7068 <_Z19__fetch_global_Wirev>
   d4d62:	6803      	ldr	r3, [r0, #0]
   d4d64:	695b      	ldr	r3, [r3, #20]
   d4d66:	4798      	blx	r3
   d4d68:	b284      	uxth	r4, r0
  t <<= 8;
  t |= Wire.read(); // receive DATA
   d4d6a:	f002 f97d 	bl	d7068 <_Z19__fetch_global_Wirev>
   d4d6e:	6803      	ldr	r3, [r0, #0]
   d4d70:	695b      	ldr	r3, [r3, #20]
   d4d72:	4798      	blx	r3
   d4d74:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
  t >>= 4;

  float temp = t;
   d4d78:	f3c0 130b 	ubfx	r3, r0, #4, #12
   d4d7c:	ee00 3a10 	vmov	s0, r3
  temp /= 16.0;
  return temp;
}
   d4d80:	eebb 0ace 	vcvt.f32.u32	s0, s0, #4
   d4d84:	bd38      	pop	{r3, r4, r5, pc}

000d4d86 <_ZN18Adafruit_MPL3115A26write8Ehh>:
  
  Wire.requestFrom((uint8_t)MPL3115A2_ADDRESS, (uint8_t)1);// send data n-bytes read
  return Wire.read(); // receive DATA
}

void Adafruit_MPL3115A2::write8(uint8_t a, uint8_t d) {
   d4d86:	b538      	push	{r3, r4, r5, lr}
   d4d88:	4614      	mov	r4, r2
   d4d8a:	460d      	mov	r5, r1
  //Serial.print("Writing $"); Serial.print(a, HEX); 
  //Serial.print(" = 0x"); Serial.println(d, HEX);
  Wire.beginTransmission(MPL3115A2_ADDRESS); // start transmission to device 
   d4d8c:	f002 f96c 	bl	d7068 <_Z19__fetch_global_Wirev>
   d4d90:	2160      	movs	r1, #96	; 0x60
   d4d92:	f000 ff03 	bl	d5b9c <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(a); // sends register address to write to
   d4d96:	f002 f967 	bl	d7068 <_Z19__fetch_global_Wirev>
   d4d9a:	6803      	ldr	r3, [r0, #0]
   d4d9c:	4629      	mov	r1, r5
   d4d9e:	689b      	ldr	r3, [r3, #8]
   d4da0:	4798      	blx	r3
  Wire.write(d); // sends register data
   d4da2:	f002 f961 	bl	d7068 <_Z19__fetch_global_Wirev>
   d4da6:	6803      	ldr	r3, [r0, #0]
   d4da8:	4621      	mov	r1, r4
   d4daa:	689b      	ldr	r3, [r3, #8]
   d4dac:	4798      	blx	r3
  Wire.endTransmission(false); // end transmission
   d4dae:	f002 f95b 	bl	d7068 <_Z19__fetch_global_Wirev>
   d4db2:	2100      	movs	r1, #0
}
   d4db4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  //Serial.print("Writing $"); Serial.print(a, HEX); 
  //Serial.print(" = 0x"); Serial.println(d, HEX);
  Wire.beginTransmission(MPL3115A2_ADDRESS); // start transmission to device 
  Wire.write(a); // sends register address to write to
  Wire.write(d); // sends register data
  Wire.endTransmission(false); // end transmission
   d4db8:	f000 bef3 	b.w	d5ba2 <_ZN7TwoWire15endTransmissionEh>

000d4dbc <_ZN18Adafruit_MPL3115A25beginEv>:
/**************************************************************************/
/*!
    @brief  Setups the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
boolean Adafruit_MPL3115A2::begin() {
   d4dbc:	b538      	push	{r3, r4, r5, lr}
   d4dbe:	4604      	mov	r4, r0
  Wire.begin();
   d4dc0:	f002 f952 	bl	d7068 <_Z19__fetch_global_Wirev>
   d4dc4:	f000 fed4 	bl	d5b70 <_ZN7TwoWire5beginEv>
  uint8_t whoami = read8(MPL3115A2_WHOAMI);
   d4dc8:	210c      	movs	r1, #12
   d4dca:	4620      	mov	r0, r4
   d4dcc:	f7ff ff83 	bl	d4cd6 <_ZN18Adafruit_MPL3115A25read8Eh>
   d4dd0:	4605      	mov	r5, r0
  Serial.println(whoami, HEX);
   d4dd2:	f001 ffef 	bl	d6db4 <_Z16_fetch_usbserialv>
   d4dd6:	2210      	movs	r2, #16
   d4dd8:	4629      	mov	r1, r5
   d4dda:	f001 f905 	bl	d5fe8 <_ZN5Print7printlnEhi>
  if (whoami != 0xC4) {
   d4dde:	2dc4      	cmp	r5, #196	; 0xc4
   d4de0:	d10b      	bne.n	d4dfa <_ZN18Adafruit_MPL3115A25beginEv+0x3e>
  }

  write8(MPL3115A2_CTRL_REG1, 
	 MPL3115A2_CTRL_REG1_SBYB |
	 MPL3115A2_CTRL_REG1_OS128 |
	 MPL3115A2_CTRL_REG1_ALT);
   d4de2:	4620      	mov	r0, r4
   d4de4:	22b9      	movs	r2, #185	; 0xb9
   d4de6:	2126      	movs	r1, #38	; 0x26
   d4de8:	f7ff ffcd 	bl	d4d86 <_ZN18Adafruit_MPL3115A26write8Ehh>
  write8(MPL3115A2_PT_DATA_CFG, 
	 MPL3115A2_PT_DATA_CFG_TDEFE |
	 MPL3115A2_PT_DATA_CFG_PDEFE |
	 MPL3115A2_PT_DATA_CFG_DREM);
   d4dec:	4620      	mov	r0, r4
   d4dee:	2207      	movs	r2, #7
   d4df0:	2113      	movs	r1, #19
   d4df2:	f7ff ffc8 	bl	d4d86 <_ZN18Adafruit_MPL3115A26write8Ehh>
  return true;
   d4df6:	2001      	movs	r0, #1
   d4df8:	bd38      	pop	{r3, r4, r5, pc}
boolean Adafruit_MPL3115A2::begin() {
  Wire.begin();
  uint8_t whoami = read8(MPL3115A2_WHOAMI);
  Serial.println(whoami, HEX);
  if (whoami != 0xC4) {
    return false;
   d4dfa:	2000      	movs	r0, #0
  write8(MPL3115A2_PT_DATA_CFG, 
	 MPL3115A2_PT_DATA_CFG_TDEFE |
	 MPL3115A2_PT_DATA_CFG_PDEFE |
	 MPL3115A2_PT_DATA_CFG_DREM);
  return true;
}
   d4dfc:	bd38      	pop	{r3, r4, r5, pc}

000d4dfe <_ZN18Adafruit_MPL3115A211getPressureEv>:
/**************************************************************************/
/*!
    @brief  Gets the floating-point pressure level in kPa
*/
/**************************************************************************/
float Adafruit_MPL3115A2::getPressure() {
   d4dfe:	b538      	push	{r3, r4, r5, lr}
  uint32_t pressure;

  write8(MPL3115A2_CTRL_REG1, 
	 MPL3115A2_CTRL_REG1_SBYB |
	 MPL3115A2_CTRL_REG1_OS128 |
	 MPL3115A2_CTRL_REG1_BAR);
   d4e00:	2239      	movs	r2, #57	; 0x39
   d4e02:	2126      	movs	r1, #38	; 0x26
/**************************************************************************/
/*!
    @brief  Gets the floating-point pressure level in kPa
*/
/**************************************************************************/
float Adafruit_MPL3115A2::getPressure() {
   d4e04:	4605      	mov	r5, r0
  uint32_t pressure;

  write8(MPL3115A2_CTRL_REG1, 
	 MPL3115A2_CTRL_REG1_SBYB |
	 MPL3115A2_CTRL_REG1_OS128 |
	 MPL3115A2_CTRL_REG1_BAR);
   d4e06:	f7ff ffbe 	bl	d4d86 <_ZN18Adafruit_MPL3115A26write8Ehh>

  uint8_t sta = 0;
   d4e0a:	2400      	movs	r4, #0
  while (! (sta & MPL3115A2_REGISTER_STATUS_PDR)) {
   d4e0c:	f004 0404 	and.w	r4, r4, #4
   d4e10:	f004 01ff 	and.w	r1, r4, #255	; 0xff
   d4e14:	b93c      	cbnz	r4, d4e26 <_ZN18Adafruit_MPL3115A211getPressureEv+0x28>
    sta = read8(MPL3115A2_REGISTER_STATUS);
   d4e16:	4628      	mov	r0, r5
   d4e18:	f7ff ff5d 	bl	d4cd6 <_ZN18Adafruit_MPL3115A25read8Eh>
   d4e1c:	4604      	mov	r4, r0
    delay(10);
   d4e1e:	200a      	movs	r0, #10
   d4e20:	f000 fb72 	bl	d5508 <delay>
	 MPL3115A2_CTRL_REG1_SBYB |
	 MPL3115A2_CTRL_REG1_OS128 |
	 MPL3115A2_CTRL_REG1_BAR);

  uint8_t sta = 0;
  while (! (sta & MPL3115A2_REGISTER_STATUS_PDR)) {
   d4e24:	e7f2      	b.n	d4e0c <_ZN18Adafruit_MPL3115A211getPressureEv+0xe>
    sta = read8(MPL3115A2_REGISTER_STATUS);
    delay(10);
  }
  Wire.beginTransmission(MPL3115A2_ADDRESS); // start transmission to device 
   d4e26:	f002 f91f 	bl	d7068 <_Z19__fetch_global_Wirev>
   d4e2a:	2160      	movs	r1, #96	; 0x60
   d4e2c:	f000 feb6 	bl	d5b9c <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(MPL3115A2_REGISTER_PRESSURE_MSB); 
   d4e30:	f002 f91a 	bl	d7068 <_Z19__fetch_global_Wirev>
   d4e34:	2101      	movs	r1, #1
   d4e36:	f7ff ff49 	bl	d4ccc <_ZN7TwoWire5writeEi>
  Wire.endTransmission(false); // end transmission
   d4e3a:	f002 f915 	bl	d7068 <_Z19__fetch_global_Wirev>
   d4e3e:	2100      	movs	r1, #0
   d4e40:	f000 feaf 	bl	d5ba2 <_ZN7TwoWire15endTransmissionEh>
  
  Wire.requestFrom((uint8_t)MPL3115A2_ADDRESS, (uint8_t)3);// send data n-bytes read
   d4e44:	f002 f910 	bl	d7068 <_Z19__fetch_global_Wirev>
   d4e48:	2203      	movs	r2, #3
   d4e4a:	2160      	movs	r1, #96	; 0x60
   d4e4c:	f000 fe9f 	bl	d5b8e <_ZN7TwoWire11requestFromEhh>
  pressure = Wire.read(); // receive DATA
   d4e50:	f002 f90a 	bl	d7068 <_Z19__fetch_global_Wirev>
   d4e54:	6803      	ldr	r3, [r0, #0]
   d4e56:	695b      	ldr	r3, [r3, #20]
   d4e58:	4798      	blx	r3
  pressure <<= 8;
   d4e5a:	0204      	lsls	r4, r0, #8
  pressure |= Wire.read(); // receive DATA
   d4e5c:	f002 f904 	bl	d7068 <_Z19__fetch_global_Wirev>
   d4e60:	6803      	ldr	r3, [r0, #0]
   d4e62:	695b      	ldr	r3, [r3, #20]
   d4e64:	4798      	blx	r3
   d4e66:	4320      	orrs	r0, r4
  pressure <<= 8;
   d4e68:	0204      	lsls	r4, r0, #8
  pressure |= Wire.read(); // receive DATA
   d4e6a:	f002 f8fd 	bl	d7068 <_Z19__fetch_global_Wirev>
   d4e6e:	6803      	ldr	r3, [r0, #0]
   d4e70:	695b      	ldr	r3, [r3, #20]
   d4e72:	4798      	blx	r3
   d4e74:	4320      	orrs	r0, r4
  pressure >>= 4;

  float baro = pressure;
   d4e76:	0903      	lsrs	r3, r0, #4
   d4e78:	ee00 3a10 	vmov	s0, r3
  baro /= 4.0;
  return baro;
}
   d4e7c:	eeba 0acf 	vcvt.f32.s32	s0, s0, #2
   d4e80:	bd38      	pop	{r3, r4, r5, pc}

000d4e82 <_ZN18Adafruit_MPL3115A211getAltitudeEv>:

float Adafruit_MPL3115A2::getAltitude() {
   d4e82:	b538      	push	{r3, r4, r5, lr}
  uint32_t alt;

  write8(MPL3115A2_CTRL_REG1, 
	 MPL3115A2_CTRL_REG1_SBYB |
	 MPL3115A2_CTRL_REG1_OS128 |
	 MPL3115A2_CTRL_REG1_ALT);
   d4e84:	22b9      	movs	r2, #185	; 0xb9
   d4e86:	2126      	movs	r1, #38	; 0x26
  float baro = pressure;
  baro /= 4.0;
  return baro;
}

float Adafruit_MPL3115A2::getAltitude() {
   d4e88:	4605      	mov	r5, r0
  uint32_t alt;

  write8(MPL3115A2_CTRL_REG1, 
	 MPL3115A2_CTRL_REG1_SBYB |
	 MPL3115A2_CTRL_REG1_OS128 |
	 MPL3115A2_CTRL_REG1_ALT);
   d4e8a:	f7ff ff7c 	bl	d4d86 <_ZN18Adafruit_MPL3115A26write8Ehh>

  uint8_t sta = 0;
   d4e8e:	2400      	movs	r4, #0
  while (! (sta & MPL3115A2_REGISTER_STATUS_PDR)) {
   d4e90:	f004 0404 	and.w	r4, r4, #4
   d4e94:	f004 01ff 	and.w	r1, r4, #255	; 0xff
   d4e98:	b93c      	cbnz	r4, d4eaa <_ZN18Adafruit_MPL3115A211getAltitudeEv+0x28>
    sta = read8(MPL3115A2_REGISTER_STATUS);
   d4e9a:	4628      	mov	r0, r5
   d4e9c:	f7ff ff1b 	bl	d4cd6 <_ZN18Adafruit_MPL3115A25read8Eh>
   d4ea0:	4604      	mov	r4, r0
    delay(10);
   d4ea2:	200a      	movs	r0, #10
   d4ea4:	f000 fb30 	bl	d5508 <delay>
	 MPL3115A2_CTRL_REG1_SBYB |
	 MPL3115A2_CTRL_REG1_OS128 |
	 MPL3115A2_CTRL_REG1_ALT);

  uint8_t sta = 0;
  while (! (sta & MPL3115A2_REGISTER_STATUS_PDR)) {
   d4ea8:	e7f2      	b.n	d4e90 <_ZN18Adafruit_MPL3115A211getAltitudeEv+0xe>
    sta = read8(MPL3115A2_REGISTER_STATUS);
    delay(10);
  }
  Wire.beginTransmission(MPL3115A2_ADDRESS); // start transmission to device 
   d4eaa:	f002 f8dd 	bl	d7068 <_Z19__fetch_global_Wirev>
   d4eae:	2160      	movs	r1, #96	; 0x60
   d4eb0:	f000 fe74 	bl	d5b9c <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(MPL3115A2_REGISTER_PRESSURE_MSB); 
   d4eb4:	f002 f8d8 	bl	d7068 <_Z19__fetch_global_Wirev>
   d4eb8:	2101      	movs	r1, #1
   d4eba:	f7ff ff07 	bl	d4ccc <_ZN7TwoWire5writeEi>
  Wire.endTransmission(false); // end transmission
   d4ebe:	f002 f8d3 	bl	d7068 <_Z19__fetch_global_Wirev>
   d4ec2:	2100      	movs	r1, #0
   d4ec4:	f000 fe6d 	bl	d5ba2 <_ZN7TwoWire15endTransmissionEh>
  
  Wire.requestFrom((uint8_t)MPL3115A2_ADDRESS, (uint8_t)3);// send data n-bytes read
   d4ec8:	f002 f8ce 	bl	d7068 <_Z19__fetch_global_Wirev>
   d4ecc:	2203      	movs	r2, #3
   d4ece:	2160      	movs	r1, #96	; 0x60
   d4ed0:	f000 fe5d 	bl	d5b8e <_ZN7TwoWire11requestFromEhh>
  alt = Wire.read(); // receive DATA
   d4ed4:	f002 f8c8 	bl	d7068 <_Z19__fetch_global_Wirev>
   d4ed8:	6803      	ldr	r3, [r0, #0]
   d4eda:	695b      	ldr	r3, [r3, #20]
   d4edc:	4798      	blx	r3
  alt <<= 8;
   d4ede:	0204      	lsls	r4, r0, #8
  alt |= Wire.read(); // receive DATA
   d4ee0:	f002 f8c2 	bl	d7068 <_Z19__fetch_global_Wirev>
   d4ee4:	6803      	ldr	r3, [r0, #0]
   d4ee6:	695b      	ldr	r3, [r3, #20]
   d4ee8:	4798      	blx	r3
   d4eea:	4320      	orrs	r0, r4
  alt <<= 8;
   d4eec:	0204      	lsls	r4, r0, #8
  alt |= Wire.read(); // receive DATA
   d4eee:	f002 f8bb 	bl	d7068 <_Z19__fetch_global_Wirev>
   d4ef2:	6803      	ldr	r3, [r0, #0]
   d4ef4:	695b      	ldr	r3, [r3, #20]
   d4ef6:	4798      	blx	r3
   d4ef8:	4320      	orrs	r0, r4
  alt >>= 4;

  float altitude = alt;
   d4efa:	0903      	lsrs	r3, r0, #4
   d4efc:	ee00 3a10 	vmov	s0, r3
  altitude /= 16.0;
  return altitude;
}
   d4f00:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
   d4f04:	bd38      	pop	{r3, r4, r5, pc}

000d4f06 <_GLOBAL__sub_I__ZN18Adafruit_MPL3115A2C2Ev>:
   d4f06:	f000 b8cb 	b.w	d50a0 <HAL_Pin_Map>

000d4f0a <_GLOBAL__sub_I__ZN4DS18C2Etb>:
   d4f0a:	f000 b8c9 	b.w	d50a0 <HAL_Pin_Map>
	...

000d4f10 <_GLOBAL__sub_I__ZN7OneWireC2Et>:
        cdata <<= 1;
        crc ^= cdata;
    }

    return crc;
}
   d4f10:	b508      	push	{r3, lr}
   d4f12:	f000 f8c5 	bl	d50a0 <HAL_Pin_Map>
   d4f16:	4b01      	ldr	r3, [pc, #4]	; (d4f1c <_GLOBAL__sub_I__ZN7OneWireC2Et+0xc>)
   d4f18:	6018      	str	r0, [r3, #0]
   d4f1a:	bd08      	pop	{r3, pc}
   d4f1c:	2003e2f4 	.word	0x2003e2f4

000d4f20 <_ZN15ThingSpeakClassD1Ev>:
#define ERR_TIMEOUT             -304    // Timeout waiting for server to respond
#define ERR_NOT_INSERTED        -401    // Point was not inserted (most probable cause is the rate limit of once every 15 seconds)


// Enables Particle hardware to write or read data to or from ThingSpeak, an open data platform for the Internet of Things with MATLAB analytics and visualization. 
class ThingSpeakClass
   d4f20:	b570      	push	{r4, r5, r6, lr}
   d4f22:	4604      	mov	r4, r0
   d4f24:	30c8      	adds	r0, #200	; 0xc8
   d4f26:	f001 fa9f 	bl	d6468 <_ZN6StringD1Ev>
   d4f2a:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   d4f2e:	f001 fa9b 	bl	d6468 <_ZN6StringD1Ev>
   d4f32:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
   d4f36:	f001 fa97 	bl	d6468 <_ZN6StringD1Ev>
   d4f3a:	f104 0098 	add.w	r0, r4, #152	; 0x98
   d4f3e:	f001 fa93 	bl	d6468 <_ZN6StringD1Ev>
   d4f42:	f114 0608 	adds.w	r6, r4, #8
   d4f46:	d008      	beq.n	d4f5a <_ZN15ThingSpeakClassD1Ev+0x3a>
   d4f48:	f104 0588 	add.w	r5, r4, #136	; 0x88
   d4f4c:	42b5      	cmp	r5, r6
   d4f4e:	d004      	beq.n	d4f5a <_ZN15ThingSpeakClassD1Ev+0x3a>
   d4f50:	3d10      	subs	r5, #16
   d4f52:	4628      	mov	r0, r5
   d4f54:	f001 fa88 	bl	d6468 <_ZN6StringD1Ev>
   d4f58:	e7f8      	b.n	d4f4c <_ZN15ThingSpeakClassD1Ev+0x2c>
   d4f5a:	4620      	mov	r0, r4
   d4f5c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4f60 <_ZN15ThingSpeakClassC1Ev>:
{
  public:
	ThingSpeakClass()
	{
   d4f60:	2200      	movs	r2, #0
   d4f62:	2350      	movs	r3, #80	; 0x50

// Enables Particle hardware to write or read data to or from ThingSpeak, an open data platform for the Internet of Things with MATLAB analytics and visualization. 
class ThingSpeakClass
{
  public:
	ThingSpeakClass()
   d4f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	{
   d4f68:	e880 000c 	stmia.w	r0, {r2, r3}
   d4f6c:	f100 0608 	add.w	r6, r0, #8

// Enables Particle hardware to write or read data to or from ThingSpeak, an open data platform for the Internet of Things with MATLAB analytics and visualization. 
class ThingSpeakClass
{
  public:
	ThingSpeakClass()
   d4f70:	4604      	mov	r4, r0
   d4f72:	f100 0988 	add.w	r9, r0, #136	; 0x88
   d4f76:	4635      	mov	r5, r6
	{
   d4f78:	4630      	mov	r0, r6
   d4f7a:	4921      	ldr	r1, [pc, #132]	; (d5000 <_ZN15ThingSpeakClassC1Ev+0xa0>)
   d4f7c:	3610      	adds	r6, #16
   d4f7e:	f001 faba 	bl	d64f6 <_ZN6StringC1EPK19__FlashStringHelper>
   d4f82:	454e      	cmp	r6, r9
   d4f84:	d1f8      	bne.n	d4f78 <_ZN15ThingSpeakClassC1Ev+0x18>
   d4f86:	f104 0a98 	add.w	sl, r4, #152	; 0x98
   d4f8a:	491d      	ldr	r1, [pc, #116]	; (d5000 <_ZN15ThingSpeakClassC1Ev+0xa0>)
   d4f8c:	4650      	mov	r0, sl
   d4f8e:	f104 08a8 	add.w	r8, r4, #168	; 0xa8
   d4f92:	f001 fab0 	bl	d64f6 <_ZN6StringC1EPK19__FlashStringHelper>
   d4f96:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
   d4f9a:	4919      	ldr	r1, [pc, #100]	; (d5000 <_ZN15ThingSpeakClassC1Ev+0xa0>)
   d4f9c:	4640      	mov	r0, r8
   d4f9e:	f001 faaa 	bl	d64f6 <_ZN6StringC1EPK19__FlashStringHelper>
   d4fa2:	f104 06c8 	add.w	r6, r4, #200	; 0xc8
   d4fa6:	4916      	ldr	r1, [pc, #88]	; (d5000 <_ZN15ThingSpeakClassC1Ev+0xa0>)
   d4fa8:	4638      	mov	r0, r7
   d4faa:	f001 faa4 	bl	d64f6 <_ZN6StringC1EPK19__FlashStringHelper>
   d4fae:	4914      	ldr	r1, [pc, #80]	; (d5000 <_ZN15ThingSpeakClassC1Ev+0xa0>)
   d4fb0:	4630      	mov	r0, r6
   d4fb2:	f001 faa0 	bl	d64f6 <_ZN6StringC1EPK19__FlashStringHelper>

	void resetWriteFields()
	{
		for(size_t iField = 0; iField < 8; iField++)
		{
			this->nextWriteField[iField] = "";
   d4fb6:	4628      	mov	r0, r5
   d4fb8:	4911      	ldr	r1, [pc, #68]	; (d5000 <_ZN15ThingSpeakClassC1Ev+0xa0>)
   d4fba:	3510      	adds	r5, #16
   d4fbc:	f001 faed 	bl	d659a <_ZN6StringaSEPKc>
		return result;
	};

	void resetWriteFields()
	{
		for(size_t iField = 0; iField < 8; iField++)
   d4fc0:	45a9      	cmp	r9, r5
   d4fc2:	d1f8      	bne.n	d4fb6 <_ZN15ThingSpeakClassC1Ev+0x56>
		{
			this->nextWriteField[iField] = "";
		}
		this->nextWriteLatitude = NAN;
   d4fc4:	4b0f      	ldr	r3, [pc, #60]	; (d5004 <_ZN15ThingSpeakClassC1Ev+0xa4>)
   d4fc6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
		this->nextWriteLongitude = NAN;
   d4fca:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		this->nextWriteElevation = NAN;
   d4fce:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		this->nextWriteStatus = "";
   d4fd2:	490b      	ldr	r1, [pc, #44]	; (d5000 <_ZN15ThingSpeakClassC1Ev+0xa0>)
   d4fd4:	4650      	mov	r0, sl
   d4fd6:	f001 fae0 	bl	d659a <_ZN6StringaSEPKc>
		this->nextWriteTwitter = "";
   d4fda:	4909      	ldr	r1, [pc, #36]	; (d5000 <_ZN15ThingSpeakClassC1Ev+0xa0>)
   d4fdc:	4640      	mov	r0, r8
   d4fde:	f001 fadc 	bl	d659a <_ZN6StringaSEPKc>
		this->nextWriteTweet = "";
   d4fe2:	4907      	ldr	r1, [pc, #28]	; (d5000 <_ZN15ThingSpeakClassC1Ev+0xa0>)
   d4fe4:	4638      	mov	r0, r7
   d4fe6:	f001 fad8 	bl	d659a <_ZN6StringaSEPKc>
		this->nextWriteCreatedAt = "";
   d4fea:	4905      	ldr	r1, [pc, #20]	; (d5000 <_ZN15ThingSpeakClassC1Ev+0xa0>)
   d4fec:	4630      	mov	r0, r6
   d4fee:	f001 fad4 	bl	d659a <_ZN6StringaSEPKc>
{
  public:
	ThingSpeakClass()
	{
		resetWriteFields();
	    this->lastReadStatus = OK_SUCCESS;
   d4ff2:	23c8      	movs	r3, #200	; 0xc8
   d4ff4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	};
   d4ff8:	4620      	mov	r0, r4
   d4ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4ffe:	bf00      	nop
   d5000:	000d840c 	.word	0x000d840c
   d5004:	7fc00000 	.word	0x7fc00000

000d5008 <_GLOBAL__sub_I_ThingSpeak>:
 
  See the accompaning licence file for licensing information.
*/

#include "ThingSpeak.h"
ThingSpeakClass ThingSpeak;
   d5008:	b510      	push	{r4, lr}
   d500a:	4c06      	ldr	r4, [pc, #24]	; (d5024 <_GLOBAL__sub_I_ThingSpeak+0x1c>)
   d500c:	f000 f848 	bl	d50a0 <HAL_Pin_Map>
   d5010:	4620      	mov	r0, r4
   d5012:	f7ff ffa5 	bl	d4f60 <_ZN15ThingSpeakClassC1Ev>
   d5016:	4620      	mov	r0, r4
   d5018:	4a03      	ldr	r2, [pc, #12]	; (d5028 <_GLOBAL__sub_I_ThingSpeak+0x20>)
   d501a:	4904      	ldr	r1, [pc, #16]	; (d502c <_GLOBAL__sub_I_ThingSpeak+0x24>)
   d501c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5020:	f002 b864 	b.w	d70ec <__aeabi_atexit>
   d5024:	2003e2f8 	.word	0x2003e2f8
   d5028:	2003e268 	.word	0x2003e268
   d502c:	000d4f21 	.word	0x000d4f21

000d5030 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5030:	b508      	push	{r3, lr}
   d5032:	4b02      	ldr	r3, [pc, #8]	; (d503c <os_thread_is_current+0xc>)
   d5034:	681b      	ldr	r3, [r3, #0]
   d5036:	689b      	ldr	r3, [r3, #8]
   d5038:	9301      	str	r3, [sp, #4]
   d503a:	bd08      	pop	{r3, pc}
   d503c:	00030248 	.word	0x00030248

000d5040 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5040:	b508      	push	{r3, lr}
   d5042:	4b02      	ldr	r3, [pc, #8]	; (d504c <os_thread_join+0xc>)
   d5044:	681b      	ldr	r3, [r3, #0]
   d5046:	691b      	ldr	r3, [r3, #16]
   d5048:	9301      	str	r3, [sp, #4]
   d504a:	bd08      	pop	{r3, pc}
   d504c:	00030248 	.word	0x00030248

000d5050 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5050:	b508      	push	{r3, lr}
   d5052:	4b02      	ldr	r3, [pc, #8]	; (d505c <os_thread_cleanup+0xc>)
   d5054:	681b      	ldr	r3, [r3, #0]
   d5056:	695b      	ldr	r3, [r3, #20]
   d5058:	9301      	str	r3, [sp, #4]
   d505a:	bd08      	pop	{r3, pc}
   d505c:	00030248 	.word	0x00030248

000d5060 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5060:	b508      	push	{r3, lr}
   d5062:	4b02      	ldr	r3, [pc, #8]	; (d506c <os_mutex_create+0xc>)
   d5064:	681b      	ldr	r3, [r3, #0]
   d5066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5068:	9301      	str	r3, [sp, #4]
   d506a:	bd08      	pop	{r3, pc}
   d506c:	00030248 	.word	0x00030248

000d5070 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5070:	b508      	push	{r3, lr}
   d5072:	4b02      	ldr	r3, [pc, #8]	; (d507c <os_mutex_recursive_create+0xc>)
   d5074:	681b      	ldr	r3, [r3, #0]
   d5076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5078:	9301      	str	r3, [sp, #4]
   d507a:	bd08      	pop	{r3, pc}
   d507c:	00030248 	.word	0x00030248

000d5080 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5080:	b508      	push	{r3, lr}
   d5082:	4b02      	ldr	r3, [pc, #8]	; (d508c <HAL_RNG_GetRandomNumber+0xc>)
   d5084:	681b      	ldr	r3, [r3, #0]
   d5086:	685b      	ldr	r3, [r3, #4]
   d5088:	9301      	str	r3, [sp, #4]
   d508a:	bd08      	pop	{r3, pc}
   d508c:	00030218 	.word	0x00030218

000d5090 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5090:	b508      	push	{r3, lr}
   d5092:	4b02      	ldr	r3, [pc, #8]	; (d509c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5094:	681b      	ldr	r3, [r3, #0]
   d5096:	695b      	ldr	r3, [r3, #20]
   d5098:	9301      	str	r3, [sp, #4]
   d509a:	bd08      	pop	{r3, pc}
   d509c:	00030218 	.word	0x00030218

000d50a0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d50a0:	b508      	push	{r3, lr}
   d50a2:	4b02      	ldr	r3, [pc, #8]	; (d50ac <HAL_Pin_Map+0xc>)
   d50a4:	681b      	ldr	r3, [r3, #0]
   d50a6:	681b      	ldr	r3, [r3, #0]
   d50a8:	9301      	str	r3, [sp, #4]
   d50aa:	bd08      	pop	{r3, pc}
   d50ac:	0003022c 	.word	0x0003022c

000d50b0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d50b0:	b508      	push	{r3, lr}
   d50b2:	4b02      	ldr	r3, [pc, #8]	; (d50bc <HAL_Pin_Mode+0xc>)
   d50b4:	681b      	ldr	r3, [r3, #0]
   d50b6:	689b      	ldr	r3, [r3, #8]
   d50b8:	9301      	str	r3, [sp, #4]
   d50ba:	bd08      	pop	{r3, pc}
   d50bc:	0003022c 	.word	0x0003022c

000d50c0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d50c0:	b508      	push	{r3, lr}
   d50c2:	4b02      	ldr	r3, [pc, #8]	; (d50cc <HAL_Get_Pin_Mode+0xc>)
   d50c4:	681b      	ldr	r3, [r3, #0]
   d50c6:	68db      	ldr	r3, [r3, #12]
   d50c8:	9301      	str	r3, [sp, #4]
   d50ca:	bd08      	pop	{r3, pc}
   d50cc:	0003022c 	.word	0x0003022c

000d50d0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d50d0:	b508      	push	{r3, lr}
   d50d2:	4b02      	ldr	r3, [pc, #8]	; (d50dc <HAL_GPIO_Write+0xc>)
   d50d4:	681b      	ldr	r3, [r3, #0]
   d50d6:	691b      	ldr	r3, [r3, #16]
   d50d8:	9301      	str	r3, [sp, #4]
   d50da:	bd08      	pop	{r3, pc}
   d50dc:	0003022c 	.word	0x0003022c

000d50e0 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d50e0:	b508      	push	{r3, lr}
   d50e2:	4b02      	ldr	r3, [pc, #8]	; (d50ec <HAL_I2C_Begin+0xc>)
   d50e4:	681b      	ldr	r3, [r3, #0]
   d50e6:	68db      	ldr	r3, [r3, #12]
   d50e8:	9301      	str	r3, [sp, #4]
   d50ea:	bd08      	pop	{r3, pc}
   d50ec:	00030228 	.word	0x00030228

000d50f0 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d50f0:	b508      	push	{r3, lr}
   d50f2:	4b02      	ldr	r3, [pc, #8]	; (d50fc <HAL_I2C_Request_Data+0xc>)
   d50f4:	681b      	ldr	r3, [r3, #0]
   d50f6:	695b      	ldr	r3, [r3, #20]
   d50f8:	9301      	str	r3, [sp, #4]
   d50fa:	bd08      	pop	{r3, pc}
   d50fc:	00030228 	.word	0x00030228

000d5100 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d5100:	b508      	push	{r3, lr}
   d5102:	4b02      	ldr	r3, [pc, #8]	; (d510c <HAL_I2C_Begin_Transmission+0xc>)
   d5104:	681b      	ldr	r3, [r3, #0]
   d5106:	699b      	ldr	r3, [r3, #24]
   d5108:	9301      	str	r3, [sp, #4]
   d510a:	bd08      	pop	{r3, pc}
   d510c:	00030228 	.word	0x00030228

000d5110 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5110:	b508      	push	{r3, lr}
   d5112:	4b02      	ldr	r3, [pc, #8]	; (d511c <HAL_I2C_End_Transmission+0xc>)
   d5114:	681b      	ldr	r3, [r3, #0]
   d5116:	69db      	ldr	r3, [r3, #28]
   d5118:	9301      	str	r3, [sp, #4]
   d511a:	bd08      	pop	{r3, pc}
   d511c:	00030228 	.word	0x00030228

000d5120 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5120:	b508      	push	{r3, lr}
   d5122:	4b02      	ldr	r3, [pc, #8]	; (d512c <HAL_I2C_Write_Data+0xc>)
   d5124:	681b      	ldr	r3, [r3, #0]
   d5126:	6a1b      	ldr	r3, [r3, #32]
   d5128:	9301      	str	r3, [sp, #4]
   d512a:	bd08      	pop	{r3, pc}
   d512c:	00030228 	.word	0x00030228

000d5130 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5130:	b508      	push	{r3, lr}
   d5132:	4b02      	ldr	r3, [pc, #8]	; (d513c <HAL_I2C_Available_Data+0xc>)
   d5134:	681b      	ldr	r3, [r3, #0]
   d5136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5138:	9301      	str	r3, [sp, #4]
   d513a:	bd08      	pop	{r3, pc}
   d513c:	00030228 	.word	0x00030228

000d5140 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5140:	b508      	push	{r3, lr}
   d5142:	4b02      	ldr	r3, [pc, #8]	; (d514c <HAL_I2C_Read_Data+0xc>)
   d5144:	681b      	ldr	r3, [r3, #0]
   d5146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5148:	9301      	str	r3, [sp, #4]
   d514a:	bd08      	pop	{r3, pc}
   d514c:	00030228 	.word	0x00030228

000d5150 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5150:	b508      	push	{r3, lr}
   d5152:	4b02      	ldr	r3, [pc, #8]	; (d515c <HAL_I2C_Peek_Data+0xc>)
   d5154:	681b      	ldr	r3, [r3, #0]
   d5156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5158:	9301      	str	r3, [sp, #4]
   d515a:	bd08      	pop	{r3, pc}
   d515c:	00030228 	.word	0x00030228

000d5160 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5160:	b508      	push	{r3, lr}
   d5162:	4b02      	ldr	r3, [pc, #8]	; (d516c <HAL_I2C_Flush_Data+0xc>)
   d5164:	681b      	ldr	r3, [r3, #0]
   d5166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5168:	9301      	str	r3, [sp, #4]
   d516a:	bd08      	pop	{r3, pc}
   d516c:	00030228 	.word	0x00030228

000d5170 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5170:	b508      	push	{r3, lr}
   d5172:	4b02      	ldr	r3, [pc, #8]	; (d517c <HAL_I2C_Is_Enabled+0xc>)
   d5174:	681b      	ldr	r3, [r3, #0]
   d5176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5178:	9301      	str	r3, [sp, #4]
   d517a:	bd08      	pop	{r3, pc}
   d517c:	00030228 	.word	0x00030228

000d5180 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d5180:	b508      	push	{r3, lr}
   d5182:	4b02      	ldr	r3, [pc, #8]	; (d518c <HAL_I2C_Init+0xc>)
   d5184:	681b      	ldr	r3, [r3, #0]
   d5186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5188:	9301      	str	r3, [sp, #4]
   d518a:	bd08      	pop	{r3, pc}
   d518c:	00030228 	.word	0x00030228

000d5190 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5190:	b508      	push	{r3, lr}
   d5192:	4b02      	ldr	r3, [pc, #8]	; (d519c <if_index_to_name+0xc>)
   d5194:	681b      	ldr	r3, [r3, #0]
   d5196:	695b      	ldr	r3, [r3, #20]
   d5198:	9301      	str	r3, [sp, #4]
   d519a:	bd08      	pop	{r3, pc}
   d519c:	0003026c 	.word	0x0003026c

000d51a0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d51a0:	b508      	push	{r3, lr}
   d51a2:	4b02      	ldr	r3, [pc, #8]	; (d51ac <inet_inet_ntop+0xc>)
   d51a4:	681b      	ldr	r3, [r3, #0]
   d51a6:	695b      	ldr	r3, [r3, #20]
   d51a8:	9301      	str	r3, [sp, #4]
   d51aa:	bd08      	pop	{r3, pc}
   d51ac:	00030264 	.word	0x00030264

000d51b0 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d51b0:	b508      	push	{r3, lr}
   d51b2:	4b02      	ldr	r3, [pc, #8]	; (d51bc <inet_htonl+0xc>)
   d51b4:	681b      	ldr	r3, [r3, #0]
   d51b6:	6a1b      	ldr	r3, [r3, #32]
   d51b8:	9301      	str	r3, [sp, #4]
   d51ba:	bd08      	pop	{r3, pc}
   d51bc:	00030264 	.word	0x00030264

000d51c0 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d51c0:	b508      	push	{r3, lr}
   d51c2:	4b02      	ldr	r3, [pc, #8]	; (d51cc <inet_htons+0xc>)
   d51c4:	681b      	ldr	r3, [r3, #0]
   d51c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d51c8:	9301      	str	r3, [sp, #4]
   d51ca:	bd08      	pop	{r3, pc}
   d51cc:	00030264 	.word	0x00030264

000d51d0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d51d0:	b508      	push	{r3, lr}
   d51d2:	4b02      	ldr	r3, [pc, #8]	; (d51dc <netdb_freeaddrinfo+0xc>)
   d51d4:	681b      	ldr	r3, [r3, #0]
   d51d6:	689b      	ldr	r3, [r3, #8]
   d51d8:	9301      	str	r3, [sp, #4]
   d51da:	bd08      	pop	{r3, pc}
   d51dc:	00030268 	.word	0x00030268

000d51e0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d51e0:	b508      	push	{r3, lr}
   d51e2:	4b02      	ldr	r3, [pc, #8]	; (d51ec <netdb_getaddrinfo+0xc>)
   d51e4:	681b      	ldr	r3, [r3, #0]
   d51e6:	68db      	ldr	r3, [r3, #12]
   d51e8:	9301      	str	r3, [sp, #4]
   d51ea:	bd08      	pop	{r3, pc}
   d51ec:	00030268 	.word	0x00030268

000d51f0 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d51f0:	b508      	push	{r3, lr}
   d51f2:	4b02      	ldr	r3, [pc, #8]	; (d51fc <sock_setsockopt+0xc>)
   d51f4:	681b      	ldr	r3, [r3, #0]
   d51f6:	699b      	ldr	r3, [r3, #24]
   d51f8:	9301      	str	r3, [sp, #4]
   d51fa:	bd08      	pop	{r3, pc}
   d51fc:	00030238 	.word	0x00030238

000d5200 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d5200:	b508      	push	{r3, lr}
   d5202:	4b02      	ldr	r3, [pc, #8]	; (d520c <sock_close+0xc>)
   d5204:	681b      	ldr	r3, [r3, #0]
   d5206:	69db      	ldr	r3, [r3, #28]
   d5208:	9301      	str	r3, [sp, #4]
   d520a:	bd08      	pop	{r3, pc}
   d520c:	00030238 	.word	0x00030238

000d5210 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d5210:	b508      	push	{r3, lr}
   d5212:	4b02      	ldr	r3, [pc, #8]	; (d521c <sock_connect+0xc>)
   d5214:	681b      	ldr	r3, [r3, #0]
   d5216:	6a1b      	ldr	r3, [r3, #32]
   d5218:	9301      	str	r3, [sp, #4]
   d521a:	bd08      	pop	{r3, pc}
   d521c:	00030238 	.word	0x00030238

000d5220 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d5220:	b508      	push	{r3, lr}
   d5222:	4b02      	ldr	r3, [pc, #8]	; (d522c <sock_recv+0xc>)
   d5224:	681b      	ldr	r3, [r3, #0]
   d5226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5228:	9301      	str	r3, [sp, #4]
   d522a:	bd08      	pop	{r3, pc}
   d522c:	00030238 	.word	0x00030238

000d5230 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d5230:	b508      	push	{r3, lr}
   d5232:	4b02      	ldr	r3, [pc, #8]	; (d523c <sock_send+0xc>)
   d5234:	681b      	ldr	r3, [r3, #0]
   d5236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5238:	9301      	str	r3, [sp, #4]
   d523a:	bd08      	pop	{r3, pc}
   d523c:	00030238 	.word	0x00030238

000d5240 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d5240:	b508      	push	{r3, lr}
   d5242:	4b02      	ldr	r3, [pc, #8]	; (d524c <sock_socket+0xc>)
   d5244:	681b      	ldr	r3, [r3, #0]
   d5246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5248:	9301      	str	r3, [sp, #4]
   d524a:	bd08      	pop	{r3, pc}
   d524c:	00030238 	.word	0x00030238

000d5250 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5250:	b508      	push	{r3, lr}
   d5252:	4b02      	ldr	r3, [pc, #8]	; (d525c <HAL_SPI_Init+0xc>)
   d5254:	681b      	ldr	r3, [r3, #0]
   d5256:	69db      	ldr	r3, [r3, #28]
   d5258:	9301      	str	r3, [sp, #4]
   d525a:	bd08      	pop	{r3, pc}
   d525c:	00030230 	.word	0x00030230

000d5260 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5260:	b508      	push	{r3, lr}
   d5262:	4b02      	ldr	r3, [pc, #8]	; (d526c <HAL_SPI_Is_Enabled+0xc>)
   d5264:	681b      	ldr	r3, [r3, #0]
   d5266:	6a1b      	ldr	r3, [r3, #32]
   d5268:	9301      	str	r3, [sp, #4]
   d526a:	bd08      	pop	{r3, pc}
   d526c:	00030230 	.word	0x00030230

000d5270 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5270:	b508      	push	{r3, lr}
   d5272:	4b02      	ldr	r3, [pc, #8]	; (d527c <HAL_USART_Init+0xc>)
   d5274:	681b      	ldr	r3, [r3, #0]
   d5276:	681b      	ldr	r3, [r3, #0]
   d5278:	9301      	str	r3, [sp, #4]
   d527a:	bd08      	pop	{r3, pc}
   d527c:	0003023c 	.word	0x0003023c

000d5280 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5280:	b508      	push	{r3, lr}
   d5282:	4b02      	ldr	r3, [pc, #8]	; (d528c <HAL_USART_Write_Data+0xc>)
   d5284:	681b      	ldr	r3, [r3, #0]
   d5286:	68db      	ldr	r3, [r3, #12]
   d5288:	9301      	str	r3, [sp, #4]
   d528a:	bd08      	pop	{r3, pc}
   d528c:	0003023c 	.word	0x0003023c

000d5290 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5290:	b508      	push	{r3, lr}
   d5292:	4b02      	ldr	r3, [pc, #8]	; (d529c <HAL_USART_Available_Data+0xc>)
   d5294:	681b      	ldr	r3, [r3, #0]
   d5296:	691b      	ldr	r3, [r3, #16]
   d5298:	9301      	str	r3, [sp, #4]
   d529a:	bd08      	pop	{r3, pc}
   d529c:	0003023c 	.word	0x0003023c

000d52a0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d52a0:	b508      	push	{r3, lr}
   d52a2:	4b02      	ldr	r3, [pc, #8]	; (d52ac <HAL_USART_Read_Data+0xc>)
   d52a4:	681b      	ldr	r3, [r3, #0]
   d52a6:	695b      	ldr	r3, [r3, #20]
   d52a8:	9301      	str	r3, [sp, #4]
   d52aa:	bd08      	pop	{r3, pc}
   d52ac:	0003023c 	.word	0x0003023c

000d52b0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d52b0:	b508      	push	{r3, lr}
   d52b2:	4b02      	ldr	r3, [pc, #8]	; (d52bc <HAL_USART_Peek_Data+0xc>)
   d52b4:	681b      	ldr	r3, [r3, #0]
   d52b6:	699b      	ldr	r3, [r3, #24]
   d52b8:	9301      	str	r3, [sp, #4]
   d52ba:	bd08      	pop	{r3, pc}
   d52bc:	0003023c 	.word	0x0003023c

000d52c0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d52c0:	b508      	push	{r3, lr}
   d52c2:	4b02      	ldr	r3, [pc, #8]	; (d52cc <HAL_USART_Flush_Data+0xc>)
   d52c4:	681b      	ldr	r3, [r3, #0]
   d52c6:	69db      	ldr	r3, [r3, #28]
   d52c8:	9301      	str	r3, [sp, #4]
   d52ca:	bd08      	pop	{r3, pc}
   d52cc:	0003023c 	.word	0x0003023c

000d52d0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d52d0:	b508      	push	{r3, lr}
   d52d2:	4b02      	ldr	r3, [pc, #8]	; (d52dc <HAL_USART_Is_Enabled+0xc>)
   d52d4:	681b      	ldr	r3, [r3, #0]
   d52d6:	6a1b      	ldr	r3, [r3, #32]
   d52d8:	9301      	str	r3, [sp, #4]
   d52da:	bd08      	pop	{r3, pc}
   d52dc:	0003023c 	.word	0x0003023c

000d52e0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d52e0:	b508      	push	{r3, lr}
   d52e2:	4b02      	ldr	r3, [pc, #8]	; (d52ec <HAL_USART_Available_Data_For_Write+0xc>)
   d52e4:	681b      	ldr	r3, [r3, #0]
   d52e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d52e8:	9301      	str	r3, [sp, #4]
   d52ea:	bd08      	pop	{r3, pc}
   d52ec:	0003023c 	.word	0x0003023c

000d52f0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d52f0:	b508      	push	{r3, lr}
   d52f2:	4b02      	ldr	r3, [pc, #8]	; (d52fc <HAL_USB_USART_Init+0xc>)
   d52f4:	681b      	ldr	r3, [r3, #0]
   d52f6:	681b      	ldr	r3, [r3, #0]
   d52f8:	9301      	str	r3, [sp, #4]
   d52fa:	bd08      	pop	{r3, pc}
   d52fc:	0003024c 	.word	0x0003024c

000d5300 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5300:	b508      	push	{r3, lr}
   d5302:	4b02      	ldr	r3, [pc, #8]	; (d530c <HAL_USB_USART_Available_Data+0xc>)
   d5304:	681b      	ldr	r3, [r3, #0]
   d5306:	691b      	ldr	r3, [r3, #16]
   d5308:	9301      	str	r3, [sp, #4]
   d530a:	bd08      	pop	{r3, pc}
   d530c:	0003024c 	.word	0x0003024c

000d5310 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5310:	b508      	push	{r3, lr}
   d5312:	4b02      	ldr	r3, [pc, #8]	; (d531c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5314:	681b      	ldr	r3, [r3, #0]
   d5316:	695b      	ldr	r3, [r3, #20]
   d5318:	9301      	str	r3, [sp, #4]
   d531a:	bd08      	pop	{r3, pc}
   d531c:	0003024c 	.word	0x0003024c

000d5320 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5320:	b508      	push	{r3, lr}
   d5322:	4b02      	ldr	r3, [pc, #8]	; (d532c <HAL_USB_USART_Receive_Data+0xc>)
   d5324:	681b      	ldr	r3, [r3, #0]
   d5326:	699b      	ldr	r3, [r3, #24]
   d5328:	9301      	str	r3, [sp, #4]
   d532a:	bd08      	pop	{r3, pc}
   d532c:	0003024c 	.word	0x0003024c

000d5330 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5330:	b508      	push	{r3, lr}
   d5332:	4b02      	ldr	r3, [pc, #8]	; (d533c <HAL_USB_USART_Send_Data+0xc>)
   d5334:	681b      	ldr	r3, [r3, #0]
   d5336:	69db      	ldr	r3, [r3, #28]
   d5338:	9301      	str	r3, [sp, #4]
   d533a:	bd08      	pop	{r3, pc}
   d533c:	0003024c 	.word	0x0003024c

000d5340 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5340:	b508      	push	{r3, lr}
   d5342:	4b02      	ldr	r3, [pc, #8]	; (d534c <HAL_USB_USART_Flush_Data+0xc>)
   d5344:	681b      	ldr	r3, [r3, #0]
   d5346:	6a1b      	ldr	r3, [r3, #32]
   d5348:	9301      	str	r3, [sp, #4]
   d534a:	bd08      	pop	{r3, pc}
   d534c:	0003024c 	.word	0x0003024c

000d5350 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5350:	b508      	push	{r3, lr}
   d5352:	4b02      	ldr	r3, [pc, #8]	; (d535c <log_message+0xc>)
   d5354:	681b      	ldr	r3, [r3, #0]
   d5356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5358:	9301      	str	r3, [sp, #4]
   d535a:	bd08      	pop	{r3, pc}
   d535c:	00030260 	.word	0x00030260

000d5360 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5360:	b508      	push	{r3, lr}
   d5362:	4b02      	ldr	r3, [pc, #8]	; (d536c <set_system_mode+0xc>)
   d5364:	681b      	ldr	r3, [r3, #0]
   d5366:	685b      	ldr	r3, [r3, #4]
   d5368:	9301      	str	r3, [sp, #4]
   d536a:	bd08      	pop	{r3, pc}
   d536c:	00030220 	.word	0x00030220

000d5370 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5370:	b508      	push	{r3, lr}
   d5372:	4b02      	ldr	r3, [pc, #8]	; (d537c <system_delay_ms+0xc>)
   d5374:	681b      	ldr	r3, [r3, #0]
   d5376:	695b      	ldr	r3, [r3, #20]
   d5378:	9301      	str	r3, [sp, #4]
   d537a:	bd08      	pop	{r3, pc}
   d537c:	00030220 	.word	0x00030220

000d5380 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5380:	b508      	push	{r3, lr}
   d5382:	4b02      	ldr	r3, [pc, #8]	; (d538c <application_thread_current+0xc>)
   d5384:	681b      	ldr	r3, [r3, #0]
   d5386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5388:	9301      	str	r3, [sp, #4]
   d538a:	bd08      	pop	{r3, pc}
   d538c:	00030220 	.word	0x00030220

000d5390 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5390:	b508      	push	{r3, lr}
   d5392:	4b02      	ldr	r3, [pc, #8]	; (d539c <application_thread_invoke+0xc>)
   d5394:	681b      	ldr	r3, [r3, #0]
   d5396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5398:	9301      	str	r3, [sp, #4]
   d539a:	bd08      	pop	{r3, pc}
   d539c:	00030220 	.word	0x00030220

000d53a0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d53a0:	b508      	push	{r3, lr}
   d53a2:	4b03      	ldr	r3, [pc, #12]	; (d53b0 <system_ctrl_set_app_request_handler+0x10>)
   d53a4:	681b      	ldr	r3, [r3, #0]
   d53a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d53aa:	9301      	str	r3, [sp, #4]
   d53ac:	bd08      	pop	{r3, pc}
   d53ae:	0000      	.short	0x0000
   d53b0:	00030220 	.word	0x00030220

000d53b4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d53b4:	b508      	push	{r3, lr}
   d53b6:	4b03      	ldr	r3, [pc, #12]	; (d53c4 <system_ctrl_set_result+0x10>)
   d53b8:	681b      	ldr	r3, [r3, #0]
   d53ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d53be:	9301      	str	r3, [sp, #4]
   d53c0:	bd08      	pop	{r3, pc}
   d53c2:	0000      	.short	0x0000
   d53c4:	00030220 	.word	0x00030220

000d53c8 <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d53c8:	b508      	push	{r3, lr}
   d53ca:	4b02      	ldr	r3, [pc, #8]	; (d53d4 <spark_send_event+0xc>)
   d53cc:	681b      	ldr	r3, [r3, #0]
   d53ce:	6a1b      	ldr	r3, [r3, #32]
   d53d0:	9301      	str	r3, [sp, #4]
   d53d2:	bd08      	pop	{r3, pc}
   d53d4:	00030244 	.word	0x00030244

000d53d8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d53d8:	b508      	push	{r3, lr}
   d53da:	4b02      	ldr	r3, [pc, #8]	; (d53e4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d53dc:	681b      	ldr	r3, [r3, #0]
   d53de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d53e0:	9301      	str	r3, [sp, #4]
   d53e2:	bd08      	pop	{r3, pc}
   d53e4:	00030244 	.word	0x00030244

000d53e8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d53e8:	b508      	push	{r3, lr}
   d53ea:	4b02      	ldr	r3, [pc, #8]	; (d53f4 <network_connect+0xc>)
   d53ec:	681b      	ldr	r3, [r3, #0]
   d53ee:	685b      	ldr	r3, [r3, #4]
   d53f0:	9301      	str	r3, [sp, #4]
   d53f2:	bd08      	pop	{r3, pc}
   d53f4:	00030240 	.word	0x00030240

000d53f8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d53f8:	b508      	push	{r3, lr}
   d53fa:	4b02      	ldr	r3, [pc, #8]	; (d5404 <network_connecting+0xc>)
   d53fc:	681b      	ldr	r3, [r3, #0]
   d53fe:	689b      	ldr	r3, [r3, #8]
   d5400:	9301      	str	r3, [sp, #4]
   d5402:	bd08      	pop	{r3, pc}
   d5404:	00030240 	.word	0x00030240

000d5408 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5408:	b508      	push	{r3, lr}
   d540a:	4b02      	ldr	r3, [pc, #8]	; (d5414 <network_disconnect+0xc>)
   d540c:	681b      	ldr	r3, [r3, #0]
   d540e:	68db      	ldr	r3, [r3, #12]
   d5410:	9301      	str	r3, [sp, #4]
   d5412:	bd08      	pop	{r3, pc}
   d5414:	00030240 	.word	0x00030240

000d5418 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5418:	b508      	push	{r3, lr}
   d541a:	4b02      	ldr	r3, [pc, #8]	; (d5424 <network_ready+0xc>)
   d541c:	681b      	ldr	r3, [r3, #0]
   d541e:	691b      	ldr	r3, [r3, #16]
   d5420:	9301      	str	r3, [sp, #4]
   d5422:	bd08      	pop	{r3, pc}
   d5424:	00030240 	.word	0x00030240

000d5428 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5428:	b508      	push	{r3, lr}
   d542a:	4b02      	ldr	r3, [pc, #8]	; (d5434 <network_on+0xc>)
   d542c:	681b      	ldr	r3, [r3, #0]
   d542e:	695b      	ldr	r3, [r3, #20]
   d5430:	9301      	str	r3, [sp, #4]
   d5432:	bd08      	pop	{r3, pc}
   d5434:	00030240 	.word	0x00030240

000d5438 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5438:	b508      	push	{r3, lr}
   d543a:	4b02      	ldr	r3, [pc, #8]	; (d5444 <network_off+0xc>)
   d543c:	681b      	ldr	r3, [r3, #0]
   d543e:	699b      	ldr	r3, [r3, #24]
   d5440:	9301      	str	r3, [sp, #4]
   d5442:	bd08      	pop	{r3, pc}
   d5444:	00030240 	.word	0x00030240

000d5448 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5448:	b508      	push	{r3, lr}
   d544a:	4b02      	ldr	r3, [pc, #8]	; (d5454 <network_listen+0xc>)
   d544c:	681b      	ldr	r3, [r3, #0]
   d544e:	69db      	ldr	r3, [r3, #28]
   d5450:	9301      	str	r3, [sp, #4]
   d5452:	bd08      	pop	{r3, pc}
   d5454:	00030240 	.word	0x00030240

000d5458 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5458:	b508      	push	{r3, lr}
   d545a:	4b02      	ldr	r3, [pc, #8]	; (d5464 <network_listening+0xc>)
   d545c:	681b      	ldr	r3, [r3, #0]
   d545e:	6a1b      	ldr	r3, [r3, #32]
   d5460:	9301      	str	r3, [sp, #4]
   d5462:	bd08      	pop	{r3, pc}
   d5464:	00030240 	.word	0x00030240

000d5468 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5468:	b508      	push	{r3, lr}
   d546a:	4b02      	ldr	r3, [pc, #8]	; (d5474 <network_set_listen_timeout+0xc>)
   d546c:	681b      	ldr	r3, [r3, #0]
   d546e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5470:	9301      	str	r3, [sp, #4]
   d5472:	bd08      	pop	{r3, pc}
   d5474:	00030240 	.word	0x00030240

000d5478 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5478:	b508      	push	{r3, lr}
   d547a:	4b02      	ldr	r3, [pc, #8]	; (d5484 <network_get_listen_timeout+0xc>)
   d547c:	681b      	ldr	r3, [r3, #0]
   d547e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5480:	9301      	str	r3, [sp, #4]
   d5482:	bd08      	pop	{r3, pc}
   d5484:	00030240 	.word	0x00030240

000d5488 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5488:	b508      	push	{r3, lr}
   d548a:	4b02      	ldr	r3, [pc, #8]	; (d5494 <malloc+0xc>)
   d548c:	681b      	ldr	r3, [r3, #0]
   d548e:	681b      	ldr	r3, [r3, #0]
   d5490:	9301      	str	r3, [sp, #4]
   d5492:	bd08      	pop	{r3, pc}
   d5494:	0003021c 	.word	0x0003021c

000d5498 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5498:	b508      	push	{r3, lr}
   d549a:	4b02      	ldr	r3, [pc, #8]	; (d54a4 <free+0xc>)
   d549c:	681b      	ldr	r3, [r3, #0]
   d549e:	685b      	ldr	r3, [r3, #4]
   d54a0:	9301      	str	r3, [sp, #4]
   d54a2:	bd08      	pop	{r3, pc}
   d54a4:	0003021c 	.word	0x0003021c

000d54a8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d54a8:	b508      	push	{r3, lr}
   d54aa:	4b02      	ldr	r3, [pc, #8]	; (d54b4 <realloc+0xc>)
   d54ac:	681b      	ldr	r3, [r3, #0]
   d54ae:	689b      	ldr	r3, [r3, #8]
   d54b0:	9301      	str	r3, [sp, #4]
   d54b2:	bd08      	pop	{r3, pc}
   d54b4:	0003021c 	.word	0x0003021c

000d54b8 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d54b8:	b508      	push	{r3, lr}
   d54ba:	4b02      	ldr	r3, [pc, #8]	; (d54c4 <sprintf+0xc>)
   d54bc:	681b      	ldr	r3, [r3, #0]
   d54be:	68db      	ldr	r3, [r3, #12]
   d54c0:	9301      	str	r3, [sp, #4]
   d54c2:	bd08      	pop	{r3, pc}
   d54c4:	0003021c 	.word	0x0003021c

000d54c8 <snprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d54c8:	b508      	push	{r3, lr}
   d54ca:	4b02      	ldr	r3, [pc, #8]	; (d54d4 <snprintf+0xc>)
   d54cc:	681b      	ldr	r3, [r3, #0]
   d54ce:	69db      	ldr	r3, [r3, #28]
   d54d0:	9301      	str	r3, [sp, #4]
   d54d2:	bd08      	pop	{r3, pc}
   d54d4:	0003021c 	.word	0x0003021c

000d54d8 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d54d8:	b508      	push	{r3, lr}
   d54da:	4b02      	ldr	r3, [pc, #8]	; (d54e4 <abort+0xc>)
   d54dc:	681b      	ldr	r3, [r3, #0]
   d54de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d54e0:	9301      	str	r3, [sp, #4]
   d54e2:	bd08      	pop	{r3, pc}
   d54e4:	0003021c 	.word	0x0003021c

000d54e8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d54e8:	b508      	push	{r3, lr}
   d54ea:	4b02      	ldr	r3, [pc, #8]	; (d54f4 <_malloc_r+0xc>)
   d54ec:	681b      	ldr	r3, [r3, #0]
   d54ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d54f0:	9301      	str	r3, [sp, #4]
   d54f2:	bd08      	pop	{r3, pc}
   d54f4:	0003021c 	.word	0x0003021c

000d54f8 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d54f8:	b508      	push	{r3, lr}
   d54fa:	4b02      	ldr	r3, [pc, #8]	; (d5504 <__errno+0xc>)
   d54fc:	681b      	ldr	r3, [r3, #0]
   d54fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5500:	9301      	str	r3, [sp, #4]
   d5502:	bd08      	pop	{r3, pc}
   d5504:	0003021c 	.word	0x0003021c

000d5508 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5508:	2100      	movs	r1, #0
   d550a:	f7ff bf31 	b.w	d5370 <system_delay_ms>

000d550e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d550e:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5510:	6883      	ldr	r3, [r0, #8]
   d5512:	4604      	mov	r4, r0
   d5514:	b90b      	cbnz	r3, d551a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5516:	f001 fdee 	bl	d70f6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d551a:	68c3      	ldr	r3, [r0, #12]
   d551c:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d551e:	68a3      	ldr	r3, [r4, #8]
   d5520:	b11b      	cbz	r3, d552a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5522:	2203      	movs	r2, #3
   d5524:	4621      	mov	r1, r4
   d5526:	4620      	mov	r0, r4
   d5528:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d552a:	4620      	mov	r0, r4
}
   d552c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5530:	f7fe bdb3 	b.w	d409a <_ZdlPv>

000d5534 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5534:	4770      	bx	lr

000d5536 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d5536:	2000      	movs	r0, #0
   d5538:	4770      	bx	lr

000d553a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d553a:	b510      	push	{r4, lr}
   d553c:	4604      	mov	r4, r0
   d553e:	f7fe fdac 	bl	d409a <_ZdlPv>
   d5542:	4620      	mov	r0, r4
   d5544:	bd10      	pop	{r4, pc}

000d5546 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d5546:	b508      	push	{r3, lr}
      { delete this; }
   d5548:	b108      	cbz	r0, d554e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d554a:	f7ff fff6 	bl	d553a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d554e:	bd08      	pop	{r3, pc}

000d5550 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5550:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5552:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5554:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5556:	b113      	cbz	r3, d555e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5558:	2203      	movs	r2, #3
   d555a:	4601      	mov	r1, r0
   d555c:	4798      	blx	r3
    }
   d555e:	4620      	mov	r0, r4
   d5560:	bd10      	pop	{r4, pc}

000d5562 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5562:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5564:	68c4      	ldr	r4, [r0, #12]
   d5566:	b1d4      	cbz	r4, d559e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d5568:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d556a:	2b02      	cmp	r3, #2
   d556c:	d102      	bne.n	d5574 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d556e:	68e0      	ldr	r0, [r4, #12]
   d5570:	f7ff ff92 	bl	d5498 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d5574:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d5576:	b12d      	cbz	r5, d5584 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5578:	4628      	mov	r0, r5
   d557a:	f7ff ffe9 	bl	d5550 <_ZNSt14_Function_baseD1Ev>
   d557e:	4628      	mov	r0, r5
   d5580:	f7fe fd8b 	bl	d409a <_ZdlPv>
   d5584:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5586:	b12d      	cbz	r5, d5594 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
   d5588:	4628      	mov	r0, r5
   d558a:	f7ff ffe1 	bl	d5550 <_ZNSt14_Function_baseD1Ev>
   d558e:	4628      	mov	r0, r5
   d5590:	f7fe fd83 	bl	d409a <_ZdlPv>
   d5594:	4620      	mov	r0, r4
   d5596:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d559a:	f7fe bd7e 	b.w	d409a <_ZdlPv>
   d559e:	bd38      	pop	{r3, r4, r5, pc}

000d55a0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d55a0:	b513      	push	{r0, r1, r4, lr}
   d55a2:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d55a4:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d55a8:	2300      	movs	r3, #0
   d55aa:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d55ac:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d55ae:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d55b0:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d55b2:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d55b4:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d55b6:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d55b8:	f7ff f9fc 	bl	d49b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d55bc:	4620      	mov	r0, r4
   d55be:	b002      	add	sp, #8
   d55c0:	bd10      	pop	{r4, pc}

000d55c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d55c2:	680b      	ldr	r3, [r1, #0]
   d55c4:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d55c6:	b113      	cbz	r3, d55ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d55c8:	685a      	ldr	r2, [r3, #4]
   d55ca:	3201      	adds	r2, #1
   d55cc:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d55ce:	4770      	bx	lr

000d55d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d55d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d55d2:	460c      	mov	r4, r1
   d55d4:	ad02      	add	r5, sp, #8
   d55d6:	f854 3b04 	ldr.w	r3, [r4], #4
   d55da:	f845 3d08 	str.w	r3, [r5, #-8]!
   d55de:	4606      	mov	r6, r0
   d55e0:	460f      	mov	r7, r1
   d55e2:	a801      	add	r0, sp, #4
   d55e4:	4621      	mov	r1, r4
   d55e6:	f7ff ffec 	bl	d55c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d55ea:	4629      	mov	r1, r5
   d55ec:	4630      	mov	r0, r6
   d55ee:	f7ff ffd7 	bl	d55a0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d55f2:	a801      	add	r0, sp, #4
   d55f4:	f7ff f9de 	bl	d49b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d55f8:	4620      	mov	r0, r4
   d55fa:	f7ff f9db 	bl	d49b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d55fe:	4638      	mov	r0, r7
   d5600:	f7fe fd4b 	bl	d409a <_ZdlPv>
        return p;
    }
   d5604:	4630      	mov	r0, r6
   d5606:	b003      	add	sp, #12
   d5608:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d560a <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d560a:	b513      	push	{r0, r1, r4, lr}
   d560c:	460b      	mov	r3, r1
   d560e:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5610:	c803      	ldmia	r0, {r0, r1}
   d5612:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5616:	e893 0003 	ldmia.w	r3, {r0, r1}
   d561a:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d561e:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d5622:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5626:	b002      	add	sp, #8
   d5628:	bd10      	pop	{r4, pc}

000d562a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d562a:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d562c:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d562e:	b90a      	cbnz	r2, d5634 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5630:	f001 fd61 	bl	d70f6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5634:	68c3      	ldr	r3, [r0, #12]
    }
   d5636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d563a:	4718      	bx	r3

000d563c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d563c:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d563e:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5640:	f100 0110 	add.w	r1, r0, #16
   d5644:	f7ff fff1 	bl	d562a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5648:	bd08      	pop	{r3, pc}

000d564a <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d564a:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d564c:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d564e:	b90a      	cbnz	r2, d5654 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5650:	f001 fd51 	bl	d70f6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5654:	68c3      	ldr	r3, [r0, #12]
    }
   d5656:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d565a:	4718      	bx	r3

000d565c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d565c:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d565e:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5660:	f100 0110 	add.w	r1, r0, #16
   d5664:	f7ff fff1 	bl	d564a <_ZNKSt8functionIFvRKbEEclES1_>
   d5668:	bd08      	pop	{r3, pc}

000d566a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d566a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d566c:	2300      	movs	r3, #0
   d566e:	6083      	str	r3, [r0, #8]
   d5670:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5672:	4604      	mov	r4, r0
   d5674:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5676:	b12b      	cbz	r3, d5684 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5678:	2202      	movs	r2, #2
   d567a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d567c:	68eb      	ldr	r3, [r5, #12]
   d567e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5680:	68ab      	ldr	r3, [r5, #8]
   d5682:	60a3      	str	r3, [r4, #8]
	}
    }
   d5684:	4620      	mov	r0, r4
   d5686:	bd38      	pop	{r3, r4, r5, pc}

000d5688 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d568c:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d5690:	b086      	sub	sp, #24
   d5692:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5694:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5698:	808b      	strh	r3, [r1, #4]
   d569a:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d569c:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d569e:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d56a2:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d56a4:	f04f 0002 	mov.w	r0, #2
   d56a8:	e8d4 1f4f 	ldrexb	r1, [r4]
   d56ac:	4299      	cmp	r1, r3
   d56ae:	d103      	bne.n	d56b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d56b0:	e8c4 0f45 	strexb	r5, r0, [r4]
   d56b4:	2d00      	cmp	r5, #0
   d56b6:	d1f7      	bne.n	d56a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d56b8:	d002      	beq.n	d56c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d56ba:	f88d 1000 	strb.w	r1, [sp]
   d56be:	e06a      	b.n	d5796 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d56c0:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d56c4:	bf1e      	ittt	ne
   d56c6:	60e7      	strne	r7, [r4, #12]
   d56c8:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d56ca:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d56cc:	2301      	movs	r3, #1
   d56ce:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d56d2:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d56d4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d56d6:	f104 0308 	add.w	r3, r4, #8
   d56da:	f3bf 8f5f 	dmb	sy
   d56de:	e853 6f00 	ldrex	r6, [r3]
   d56e2:	e843 0200 	strex	r2, r0, [r3]
   d56e6:	2a00      	cmp	r2, #0
   d56e8:	d1f9      	bne.n	d56de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d56ea:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d56ee:	2e00      	cmp	r6, #0
   d56f0:	d051      	beq.n	d5796 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d56f2:	f7ff fe45 	bl	d5380 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d56f6:	b120      	cbz	r0, d5702 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d56f8:	4629      	mov	r1, r5
   d56fa:	4630      	mov	r0, r6
   d56fc:	f7ff ff95 	bl	d562a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5700:	e043      	b.n	d578a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5702:	4631      	mov	r1, r6
   d5704:	4668      	mov	r0, sp
   d5706:	f7ff ffb0 	bl	d566a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d570a:	68e0      	ldr	r0, [r4, #12]
   d570c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5710:	b108      	cbz	r0, d5716 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d5712:	f002 fd51 	bl	d81b8 <strdup>
   d5716:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5718:	2010      	movs	r0, #16
   d571a:	f8ad 5014 	strh.w	r5, [sp, #20]
   d571e:	f7fe fcba 	bl	d4096 <_Znwj>
   d5722:	4605      	mov	r5, r0
   d5724:	b330      	cbz	r0, d5774 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5726:	f04f 0800 	mov.w	r8, #0
   d572a:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d572e:	2018      	movs	r0, #24
   d5730:	f7fe fcb1 	bl	d4096 <_Znwj>
   d5734:	4604      	mov	r4, r0
   d5736:	b1c0      	cbz	r0, d576a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5738:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d573c:	4601      	mov	r1, r0
   d573e:	4668      	mov	r0, sp
   d5740:	f7ff ff63 	bl	d560a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5744:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d5746:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5748:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d574a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d574c:	9202      	str	r2, [sp, #8]
   d574e:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5750:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5752:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d5756:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d5758:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d575c:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5760:	9b04      	ldr	r3, [sp, #16]
   d5762:	9203      	str	r2, [sp, #12]
   d5764:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5766:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d576a:	4b0e      	ldr	r3, [pc, #56]	; (d57a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d576c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d576e:	4b0e      	ldr	r3, [pc, #56]	; (d57a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5770:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5772:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5774:	9804      	ldr	r0, [sp, #16]
   d5776:	f7ff fe8f 	bl	d5498 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d577a:	4668      	mov	r0, sp
   d577c:	f7ff fee8 	bl	d5550 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5780:	2200      	movs	r2, #0
   d5782:	4629      	mov	r1, r5
   d5784:	4809      	ldr	r0, [pc, #36]	; (d57ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d5786:	f7ff fe03 	bl	d5390 <application_thread_invoke>
   d578a:	4630      	mov	r0, r6
   d578c:	f7ff fee0 	bl	d5550 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5790:	4630      	mov	r0, r6
   d5792:	f7fe fc82 	bl	d409a <_ZdlPv>
   d5796:	4638      	mov	r0, r7
   d5798:	f7ff fe7e 	bl	d5498 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d579c:	b006      	add	sp, #24
   d579e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d57a2:	bf00      	nop
   d57a4:	000d563d 	.word	0x000d563d
   d57a8:	000d5899 	.word	0x000d5899
   d57ac:	000d550f 	.word	0x000d550f

000d57b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d57b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d57b4:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d57b6:	ad07      	add	r5, sp, #28
   d57b8:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d57bc:	4606      	mov	r6, r0
   d57be:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d57c0:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d57c2:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d57c4:	460f      	mov	r7, r1
   d57c6:	4690      	mov	r8, r2
   d57c8:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d57cc:	f8c5 b004 	str.w	fp, [r5, #4]
   d57d0:	f8c5 b008 	str.w	fp, [r5, #8]
   d57d4:	9307      	str	r3, [sp, #28]
   d57d6:	f7fe fc5e 	bl	d4096 <_Znwj>
   d57da:	4604      	mov	r4, r0
   d57dc:	b138      	cbz	r0, d57ee <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d57de:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d57e2:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d57e6:	f8c0 b004 	str.w	fp, [r0, #4]
   d57ea:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d57ee:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d57f0:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d57f2:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d57f4:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d57f6:	f7fe fc4e 	bl	d4096 <_Znwj>
   d57fa:	b128      	cbz	r0, d5808 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d57fc:	2301      	movs	r3, #1
   d57fe:	6043      	str	r3, [r0, #4]
   d5800:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5802:	4b23      	ldr	r3, [pc, #140]	; (d5890 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d5804:	6003      	str	r3, [r0, #0]
   d5806:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5808:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d580a:	4b22      	ldr	r3, [pc, #136]	; (d5894 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d580c:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d580e:	2008      	movs	r0, #8
   d5810:	f7fe fc41 	bl	d4096 <_Znwj>
   d5814:	4604      	mov	r4, r0
   d5816:	b128      	cbz	r0, d5824 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5818:	9b03      	ldr	r3, [sp, #12]
   d581a:	f840 3b04 	str.w	r3, [r0], #4
   d581e:	a904      	add	r1, sp, #16
   d5820:	f7ff fecf 	bl	d55c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5824:	9500      	str	r5, [sp, #0]
   d5826:	fa5f f38a 	uxtb.w	r3, sl
   d582a:	464a      	mov	r2, r9
   d582c:	4641      	mov	r1, r8
   d582e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5830:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5832:	f7ff fdc9 	bl	d53c8 <spark_send_event>
   d5836:	b9b8      	cbnz	r0, d5868 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d5838:	9b03      	ldr	r3, [sp, #12]
   d583a:	785b      	ldrb	r3, [r3, #1]
   d583c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5840:	b993      	cbnz	r3, d5868 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5842:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d5846:	a905      	add	r1, sp, #20
   d5848:	a803      	add	r0, sp, #12
   d584a:	9205      	str	r2, [sp, #20]
   d584c:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5850:	f7ff ff1a 	bl	d5688 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5854:	9805      	ldr	r0, [sp, #20]
   d5856:	f7ff fe1f 	bl	d5498 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d585a:	a805      	add	r0, sp, #20
   d585c:	9909      	ldr	r1, [sp, #36]	; 0x24
   d585e:	f7ff feb7 	bl	d55d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5862:	a806      	add	r0, sp, #24
   d5864:	f7ff f8a6 	bl	d49b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5868:	9b03      	ldr	r3, [sp, #12]
   d586a:	9305      	str	r3, [sp, #20]
   d586c:	a904      	add	r1, sp, #16
   d586e:	a806      	add	r0, sp, #24
   d5870:	f7ff fea7 	bl	d55c2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5874:	a905      	add	r1, sp, #20
   d5876:	4630      	mov	r0, r6
   d5878:	f7ff fe92 	bl	d55a0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d587c:	a806      	add	r0, sp, #24
   d587e:	f7ff f899 	bl	d49b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5882:	a804      	add	r0, sp, #16
   d5884:	f7ff f896 	bl	d49b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d5888:	4630      	mov	r0, r6
   d588a:	b00b      	add	sp, #44	; 0x2c
   d588c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5890:	000d8500 	.word	0x000d8500
   d5894:	000d5a01 	.word	0x000d5a01

000d5898 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5898:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d589a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d589c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d589e:	d006      	beq.n	d58ae <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d58a0:	2a03      	cmp	r2, #3
   d58a2:	d017      	beq.n	d58d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d58a4:	2a01      	cmp	r2, #1
   d58a6:	d120      	bne.n	d58ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d58a8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d58aa:	6003      	str	r3, [r0, #0]
	      break;
   d58ac:	e01d      	b.n	d58ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d58ae:	2018      	movs	r0, #24
   d58b0:	680e      	ldr	r6, [r1, #0]
   d58b2:	f7fe fbf0 	bl	d4096 <_Znwj>
   d58b6:	4605      	mov	r5, r0
   d58b8:	b150      	cbz	r0, d58d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d58ba:	4631      	mov	r1, r6
   d58bc:	f7ff fed5 	bl	d566a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d58c0:	6930      	ldr	r0, [r6, #16]
   d58c2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d58c6:	b108      	cbz	r0, d58cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d58c8:	f002 fc76 	bl	d81b8 <strdup>
   d58cc:	6128      	str	r0, [r5, #16]
   d58ce:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d58d0:	6025      	str	r5, [r4, #0]
   d58d2:	e00a      	b.n	d58ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d58d4:	6804      	ldr	r4, [r0, #0]
   d58d6:	b144      	cbz	r4, d58ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d58d8:	6920      	ldr	r0, [r4, #16]
   d58da:	f7ff fddd 	bl	d5498 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d58de:	4620      	mov	r0, r4
   d58e0:	f7ff fe36 	bl	d5550 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d58e4:	4620      	mov	r0, r4
   d58e6:	f7fe fbd8 	bl	d409a <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d58ea:	2000      	movs	r0, #0
   d58ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d58ee <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d58ee:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d58f0:	2300      	movs	r3, #0
   d58f2:	6083      	str	r3, [r0, #8]
   d58f4:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d58f6:	4604      	mov	r4, r0
   d58f8:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d58fa:	b12b      	cbz	r3, d5908 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d58fc:	2202      	movs	r2, #2
   d58fe:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5900:	68eb      	ldr	r3, [r5, #12]
   d5902:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5904:	68ab      	ldr	r3, [r5, #8]
   d5906:	60a3      	str	r3, [r4, #8]
	}
    }
   d5908:	4620      	mov	r0, r4
   d590a:	bd38      	pop	{r3, r4, r5, pc}

000d590c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d590c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d590e:	b570      	push	{r4, r5, r6, lr}
   d5910:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5912:	d006      	beq.n	d5922 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5914:	2a03      	cmp	r2, #3
   d5916:	d011      	beq.n	d593c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d5918:	2a01      	cmp	r2, #1
   d591a:	d117      	bne.n	d594c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d591c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d591e:	6003      	str	r3, [r0, #0]
	      break;
   d5920:	e014      	b.n	d594c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5922:	2014      	movs	r0, #20
   d5924:	680e      	ldr	r6, [r1, #0]
   d5926:	f7fe fbb6 	bl	d4096 <_Znwj>
   d592a:	4605      	mov	r5, r0
   d592c:	b120      	cbz	r0, d5938 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d592e:	4631      	mov	r1, r6
   d5930:	f7ff ffdd 	bl	d58ee <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5934:	7c33      	ldrb	r3, [r6, #16]
   d5936:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5938:	6025      	str	r5, [r4, #0]
   d593a:	e007      	b.n	d594c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d593c:	6804      	ldr	r4, [r0, #0]
   d593e:	b12c      	cbz	r4, d594c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5940:	4620      	mov	r0, r4
   d5942:	f7ff fe05 	bl	d5550 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5946:	4620      	mov	r0, r4
   d5948:	f7fe fba7 	bl	d409a <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d594c:	2000      	movs	r0, #0
   d594e:	bd70      	pop	{r4, r5, r6, pc}

000d5950 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5950:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5952:	2300      	movs	r3, #0
   d5954:	b087      	sub	sp, #28
   d5956:	460c      	mov	r4, r1
   d5958:	f3bf 8f5f 	dmb	sy
   d595c:	e850 6f00 	ldrex	r6, [r0]
   d5960:	e840 3200 	strex	r2, r3, [r0]
   d5964:	2a00      	cmp	r2, #0
   d5966:	d1f9      	bne.n	d595c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5968:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d596c:	2e00      	cmp	r6, #0
   d596e:	d03e      	beq.n	d59ee <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5970:	4618      	mov	r0, r3
   d5972:	f7ff fd05 	bl	d5380 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5976:	4607      	mov	r7, r0
   d5978:	b120      	cbz	r0, d5984 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d597a:	4621      	mov	r1, r4
   d597c:	4630      	mov	r0, r6
   d597e:	f7ff fe64 	bl	d564a <_ZNKSt8functionIFvRKbEEclES1_>
   d5982:	e02e      	b.n	d59e2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5984:	4631      	mov	r1, r6
   d5986:	a801      	add	r0, sp, #4
   d5988:	f7ff ffb1 	bl	d58ee <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d598c:	7823      	ldrb	r3, [r4, #0]
   d598e:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5992:	2010      	movs	r0, #16
   d5994:	f7fe fb7f 	bl	d4096 <_Znwj>
   d5998:	4605      	mov	r5, r0
   d599a:	b1d0      	cbz	r0, d59d2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d599c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d599e:	2014      	movs	r0, #20
   d59a0:	f7fe fb79 	bl	d4096 <_Znwj>
   d59a4:	4604      	mov	r4, r0
   d59a6:	b178      	cbz	r0, d59c8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d59a8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d59aa:	4601      	mov	r1, r0
   d59ac:	a801      	add	r0, sp, #4
   d59ae:	f7ff fe2c 	bl	d560a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d59b2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d59b4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d59b6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d59b8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d59ba:	9203      	str	r2, [sp, #12]
   d59bc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d59be:	60e3      	str	r3, [r4, #12]
   d59c0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d59c4:	9204      	str	r2, [sp, #16]
   d59c6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d59c8:	4b0a      	ldr	r3, [pc, #40]	; (d59f4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d59ca:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d59cc:	4b0a      	ldr	r3, [pc, #40]	; (d59f8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d59ce:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d59d0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d59d2:	a801      	add	r0, sp, #4
   d59d4:	f7ff fdbc 	bl	d5550 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d59d8:	2200      	movs	r2, #0
   d59da:	4629      	mov	r1, r5
   d59dc:	4807      	ldr	r0, [pc, #28]	; (d59fc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d59de:	f7ff fcd7 	bl	d5390 <application_thread_invoke>
   d59e2:	4630      	mov	r0, r6
   d59e4:	f7ff fdb4 	bl	d5550 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d59e8:	4630      	mov	r0, r6
   d59ea:	f7fe fb56 	bl	d409a <_ZdlPv>
        }
    }
   d59ee:	b007      	add	sp, #28
   d59f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d59f2:	bf00      	nop
   d59f4:	000d565d 	.word	0x000d565d
   d59f8:	000d590d 	.word	0x000d590d
   d59fc:	000d550f 	.word	0x000d550f

000d5a00 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5a00:	b530      	push	{r4, r5, lr}
   d5a02:	b085      	sub	sp, #20
   d5a04:	4604      	mov	r4, r0
   d5a06:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5a08:	4668      	mov	r0, sp
   d5a0a:	4611      	mov	r1, r2
   d5a0c:	f7ff fde0 	bl	d55d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5a10:	b17c      	cbz	r4, d5a32 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5a12:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5a14:	4628      	mov	r0, r5
   d5a16:	b10d      	cbz	r5, d5a1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d5a18:	f002 fbce 	bl	d81b8 <strdup>
   d5a1c:	9002      	str	r0, [sp, #8]
   d5a1e:	a902      	add	r1, sp, #8
   d5a20:	4668      	mov	r0, sp
   d5a22:	f8ad 400c 	strh.w	r4, [sp, #12]
   d5a26:	f7ff fe2f 	bl	d5688 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5a2a:	9802      	ldr	r0, [sp, #8]
   d5a2c:	f7ff fd34 	bl	d5498 <free>
   d5a30:	e01d      	b.n	d5a6e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d5a32:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5a34:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5a38:	f04f 0201 	mov.w	r2, #1
   d5a3c:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5a40:	42a3      	cmp	r3, r4
   d5a42:	d103      	bne.n	d5a4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5a44:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5a48:	2900      	cmp	r1, #0
   d5a4a:	d1f7      	bne.n	d5a3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5a4c:	d002      	beq.n	d5a54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5a4e:	f88d 3008 	strb.w	r3, [sp, #8]
   d5a52:	e00c      	b.n	d5a6e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5a54:	f110 010c 	adds.w	r1, r0, #12
   d5a58:	f04f 0301 	mov.w	r3, #1
   d5a5c:	bf18      	it	ne
   d5a5e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5a60:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5a64:	3004      	adds	r0, #4
   d5a66:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5a6a:	f7ff ff71 	bl	d5950 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5a6e:	a801      	add	r0, sp, #4
   d5a70:	f7fe ffa0 	bl	d49b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5a74:	b005      	add	sp, #20
   d5a76:	bd30      	pop	{r4, r5, pc}

000d5a78 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5a78:	2200      	movs	r2, #0
   d5a7a:	4611      	mov	r1, r2
   d5a7c:	6840      	ldr	r0, [r0, #4]
   d5a7e:	f7ff bceb 	b.w	d5458 <network_listening>

000d5a82 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5a82:	2200      	movs	r2, #0
   d5a84:	4611      	mov	r1, r2
   d5a86:	6840      	ldr	r0, [r0, #4]
   d5a88:	f7ff bcf6 	b.w	d5478 <network_get_listen_timeout>

000d5a8c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5a8c:	2200      	movs	r2, #0
   d5a8e:	6840      	ldr	r0, [r0, #4]
   d5a90:	f7ff bcea 	b.w	d5468 <network_set_listen_timeout>

000d5a94 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5a94:	2200      	movs	r2, #0
   d5a96:	f081 0101 	eor.w	r1, r1, #1
   d5a9a:	6840      	ldr	r0, [r0, #4]
   d5a9c:	f7ff bcd4 	b.w	d5448 <network_listen>

000d5aa0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5aa0:	2300      	movs	r3, #0
   d5aa2:	461a      	mov	r2, r3
   d5aa4:	4619      	mov	r1, r3
   d5aa6:	6840      	ldr	r0, [r0, #4]
   d5aa8:	f7ff bcc6 	b.w	d5438 <network_off>

000d5aac <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5aac:	2300      	movs	r3, #0
   d5aae:	461a      	mov	r2, r3
   d5ab0:	4619      	mov	r1, r3
   d5ab2:	6840      	ldr	r0, [r0, #4]
   d5ab4:	f7ff bcb8 	b.w	d5428 <network_on>

000d5ab8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5ab8:	2200      	movs	r2, #0
   d5aba:	4611      	mov	r1, r2
   d5abc:	6840      	ldr	r0, [r0, #4]
   d5abe:	f7ff bcab 	b.w	d5418 <network_ready>

000d5ac2 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5ac2:	2200      	movs	r2, #0
   d5ac4:	4611      	mov	r1, r2
   d5ac6:	6840      	ldr	r0, [r0, #4]
   d5ac8:	f7ff bc96 	b.w	d53f8 <network_connecting>

000d5acc <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5acc:	2200      	movs	r2, #0
   d5ace:	2102      	movs	r1, #2
   d5ad0:	6840      	ldr	r0, [r0, #4]
   d5ad2:	f7ff bc99 	b.w	d5408 <network_disconnect>

000d5ad6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5ad6:	2300      	movs	r3, #0
   d5ad8:	461a      	mov	r2, r3
   d5ada:	6840      	ldr	r0, [r0, #4]
   d5adc:	f7ff bc84 	b.w	d53e8 <network_connect>

000d5ae0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5ae0:	4b02      	ldr	r3, [pc, #8]	; (d5aec <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5ae2:	2203      	movs	r2, #3
   d5ae4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5ae6:	4a02      	ldr	r2, [pc, #8]	; (d5af0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5ae8:	601a      	str	r2, [r3, #0]
   d5aea:	4770      	bx	lr
   d5aec:	2003e3d0 	.word	0x2003e3d0
   d5af0:	000d851c 	.word	0x000d851c

000d5af4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5af4:	4770      	bx	lr

000d5af6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5af6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5af8:	4606      	mov	r6, r0
   d5afa:	4615      	mov	r5, r2
   d5afc:	460c      	mov	r4, r1
   d5afe:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5b00:	42bc      	cmp	r4, r7
   d5b02:	d006      	beq.n	d5b12 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5b04:	6833      	ldr	r3, [r6, #0]
   d5b06:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5b0a:	689b      	ldr	r3, [r3, #8]
   d5b0c:	4630      	mov	r0, r6
   d5b0e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5b10:	e7f6      	b.n	d5b00 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5b12:	4628      	mov	r0, r5
   d5b14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5b16 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5b16:	2200      	movs	r2, #0
   d5b18:	7c00      	ldrb	r0, [r0, #16]
   d5b1a:	f7ff bb01 	b.w	d5120 <HAL_I2C_Write_Data>

000d5b1e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5b1e:	2100      	movs	r1, #0
   d5b20:	7c00      	ldrb	r0, [r0, #16]
   d5b22:	f7ff bb05 	b.w	d5130 <HAL_I2C_Available_Data>

000d5b26 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5b26:	2100      	movs	r1, #0
   d5b28:	7c00      	ldrb	r0, [r0, #16]
   d5b2a:	f7ff bb09 	b.w	d5140 <HAL_I2C_Read_Data>

000d5b2e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5b2e:	2100      	movs	r1, #0
   d5b30:	7c00      	ldrb	r0, [r0, #16]
   d5b32:	f7ff bb0d 	b.w	d5150 <HAL_I2C_Peek_Data>

000d5b36 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5b36:	2100      	movs	r1, #0
   d5b38:	7c00      	ldrb	r0, [r0, #16]
   d5b3a:	f7ff bb11 	b.w	d5160 <HAL_I2C_Flush_Data>

000d5b3e <_ZN7TwoWireD0Ev>:
   d5b3e:	b510      	push	{r4, lr}
   d5b40:	4604      	mov	r4, r0
   d5b42:	f7fe faaa 	bl	d409a <_ZdlPv>
   d5b46:	4620      	mov	r0, r4
   d5b48:	bd10      	pop	{r4, pc}
	...

000d5b4c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5b4c:	b510      	push	{r4, lr}
   d5b4e:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5b50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5b54:	4608      	mov	r0, r1
   d5b56:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5b58:	2100      	movs	r1, #0
   d5b5a:	4b04      	ldr	r3, [pc, #16]	; (d5b6c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5b5c:	7420      	strb	r0, [r4, #16]
   d5b5e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5b60:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d5b62:	f7ff fb0d 	bl	d5180 <HAL_I2C_Init>

}
   d5b66:	4620      	mov	r0, r4
   d5b68:	bd10      	pop	{r4, pc}
   d5b6a:	bf00      	nop
   d5b6c:	000d8550 	.word	0x000d8550

000d5b70 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5b70:	2300      	movs	r3, #0
   d5b72:	461a      	mov	r2, r3
   d5b74:	4619      	mov	r1, r3
   d5b76:	7c00      	ldrb	r0, [r0, #16]
   d5b78:	f7ff bab2 	b.w	d50e0 <HAL_I2C_Begin>

000d5b7c <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d5b7c:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d5b7e:	2400      	movs	r4, #0
   d5b80:	7c00      	ldrb	r0, [r0, #16]
   d5b82:	9400      	str	r4, [sp, #0]
   d5b84:	f7ff fab4 	bl	d50f0 <HAL_I2C_Request_Data>
  return result;
}
   d5b88:	b2c0      	uxtb	r0, r0
   d5b8a:	b002      	add	sp, #8
   d5b8c:	bd10      	pop	{r4, pc}

000d5b8e <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d5b8e:	2301      	movs	r3, #1
   d5b90:	f7ff bff4 	b.w	d5b7c <_ZN7TwoWire11requestFromEhhh>

000d5b94 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5b94:	2200      	movs	r2, #0
   d5b96:	7c00      	ldrb	r0, [r0, #16]
   d5b98:	f7ff bab2 	b.w	d5100 <HAL_I2C_Begin_Transmission>

000d5b9c <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d5b9c:	b2c9      	uxtb	r1, r1
   d5b9e:	f7ff bff9 	b.w	d5b94 <_ZN7TwoWire17beginTransmissionEh>

000d5ba2 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5ba2:	2200      	movs	r2, #0
   d5ba4:	7c00      	ldrb	r0, [r0, #16]
   d5ba6:	f7ff bab3 	b.w	d5110 <HAL_I2C_End_Transmission>

000d5baa <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5baa:	2100      	movs	r1, #0
   d5bac:	7c00      	ldrb	r0, [r0, #16]
   d5bae:	f7ff badf 	b.w	d5170 <HAL_I2C_Is_Enabled>

000d5bb2 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5bb2:	4770      	bx	lr

000d5bb4 <_ZN9IPAddressD0Ev>:
   d5bb4:	b510      	push	{r4, lr}
   d5bb6:	4604      	mov	r4, r0
   d5bb8:	f7fe fa6f 	bl	d409a <_ZdlPv>
   d5bbc:	4620      	mov	r0, r4
   d5bbe:	bd10      	pop	{r4, pc}

000d5bc0 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if HAL_IPv6
	if (address.v==6) {
   d5bc2:	7d03      	ldrb	r3, [r0, #20]
   d5bc4:	2b06      	cmp	r3, #6
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5bc6:	b08d      	sub	sp, #52	; 0x34
   d5bc8:	460e      	mov	r6, r1
   d5bca:	f100 0704 	add.w	r7, r0, #4
   d5bce:	f04f 0400 	mov.w	r4, #0
#if HAL_IPv6
	if (address.v==6) {
   d5bd2:	d002      	beq.n	d5bda <_ZNK9IPAddress7printToER5Print+0x1a>
   d5bd4:	f100 0508 	add.w	r5, r0, #8
   d5bd8:	e018      	b.n	d5c0c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5bda:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5bdc:	4639      	mov	r1, r7
size_t IPAddress::printTo(Print& p) const
{
#if HAL_IPv6
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5bde:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5be2:	232f      	movs	r3, #47	; 0x2f
   d5be4:	462a      	mov	r2, r5
   d5be6:	200a      	movs	r0, #10
   d5be8:	f7ff fada 	bl	d51a0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5bec:	4628      	mov	r0, r5
   d5bee:	f002 fafe 	bl	d81ee <strlen>
   d5bf2:	6833      	ldr	r3, [r6, #0]
   d5bf4:	4602      	mov	r2, r0
   d5bf6:	68db      	ldr	r3, [r3, #12]
   d5bf8:	4629      	mov	r1, r5
   d5bfa:	4630      	mov	r0, r6
   d5bfc:	4798      	blx	r3
   d5bfe:	e00f      	b.n	d5c20 <_ZNK9IPAddress7printToER5Print+0x60>
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5c00:	b124      	cbz	r4, d5c0c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5c02:	212e      	movs	r1, #46	; 0x2e
   d5c04:	4630      	mov	r0, r6
   d5c06:	f000 f9a7 	bl	d5f58 <_ZN5Print5printEc>
   d5c0a:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5c0c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5c10:	220a      	movs	r2, #10
   d5c12:	4630      	mov	r0, r6
   d5c14:	f000 f9e6 	bl	d5fe4 <_ZN5Print5printEhi>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5c18:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5c1a:	4404      	add	r4, r0
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5c1c:	d1f0      	bne.n	d5c00 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5c1e:	4620      	mov	r0, r4
    }
    return n;
}
   d5c20:	b00d      	add	sp, #52	; 0x34
   d5c22:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5c24 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_platform.h"
#include "string.h"

#include <arpa/inet.h>

IPAddress::IPAddress()
   d5c24:	b510      	push	{r4, lr}
   d5c26:	4b05      	ldr	r3, [pc, #20]	; (d5c3c <_ZN9IPAddressC1Ev+0x18>)
   d5c28:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5c2a:	2211      	movs	r2, #17
   d5c2c:	f840 3b04 	str.w	r3, [r0], #4
   d5c30:	2100      	movs	r1, #0
   d5c32:	f002 fa78 	bl	d8126 <memset>
{
    clear();
}
   d5c36:	4620      	mov	r0, r4
   d5c38:	bd10      	pop	{r4, pc}
   d5c3a:	bf00      	nop
   d5c3c:	000d8578 	.word	0x000d8578

000d5c40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d5c40:	4603      	mov	r3, r0
   d5c42:	4a07      	ldr	r2, [pc, #28]	; (d5c60 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5c44:	b510      	push	{r4, lr}
   d5c46:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5c4a:	f101 0210 	add.w	r2, r1, #16
   d5c4e:	f851 4b04 	ldr.w	r4, [r1], #4
   d5c52:	f843 4b04 	str.w	r4, [r3], #4
   d5c56:	4291      	cmp	r1, r2
   d5c58:	d1f9      	bne.n	d5c4e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5c5a:	780a      	ldrb	r2, [r1, #0]
   d5c5c:	701a      	strb	r2, [r3, #0]
}
   d5c5e:	bd10      	pop	{r4, pc}
   d5c60:	000d8578 	.word	0x000d8578

000d5c64 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d5c64:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d5c66:	2b04      	cmp	r3, #4
   d5c68:	d101      	bne.n	d5c6e <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d5c6a:	6840      	ldr	r0, [r0, #4]
   d5c6c:	e008      	b.n	d5c80 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d5c6e:	2b06      	cmp	r3, #6
   d5c70:	d10a      	bne.n	d5c88 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d5c72:	6843      	ldr	r3, [r0, #4]
   d5c74:	b153      	cbz	r3, d5c8c <_ZNK9IPAddresscvbEv+0x28>
   d5c76:	6883      	ldr	r3, [r0, #8]
   d5c78:	b143      	cbz	r3, d5c8c <_ZNK9IPAddresscvbEv+0x28>
   d5c7a:	68c3      	ldr	r3, [r0, #12]
   d5c7c:	b133      	cbz	r3, d5c8c <_ZNK9IPAddresscvbEv+0x28>
   d5c7e:	6900      	ldr	r0, [r0, #16]
   d5c80:	3000      	adds	r0, #0
   d5c82:	bf18      	it	ne
   d5c84:	2001      	movne	r0, #1
   d5c86:	4770      	bx	lr
   d5c88:	2000      	movs	r0, #0
   d5c8a:	4770      	bx	lr
   d5c8c:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d5c8e:	4770      	bx	lr

000d5c90 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5c90:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5c92:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5c96:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5c9a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5c9e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5ca2:	2304      	movs	r3, #4
   d5ca4:	6041      	str	r1, [r0, #4]
   d5ca6:	7503      	strb	r3, [r0, #20]
   d5ca8:	bd10      	pop	{r4, pc}

000d5caa <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5caa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5cac:	780d      	ldrb	r5, [r1, #0]
   d5cae:	788b      	ldrb	r3, [r1, #2]
   d5cb0:	784a      	ldrb	r2, [r1, #1]
   d5cb2:	78c9      	ldrb	r1, [r1, #3]
   d5cb4:	9100      	str	r1, [sp, #0]
   d5cb6:	4629      	mov	r1, r5
   d5cb8:	f7ff ffea 	bl	d5c90 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5cbc:	b003      	add	sp, #12
   d5cbe:	bd30      	pop	{r4, r5, pc}

000d5cc0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5cc0:	4b01      	ldr	r3, [pc, #4]	; (d5cc8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5cc2:	4a02      	ldr	r2, [pc, #8]	; (d5ccc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5cc4:	601a      	str	r2, [r3, #0]
   d5cc6:	4770      	bx	lr
   d5cc8:	2003e3d8 	.word	0x2003e3d8
   d5ccc:	000d8634 	.word	0x000d8634

000d5cd0 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5cd0:	2200      	movs	r2, #0
   d5cd2:	4611      	mov	r1, r2
   d5cd4:	6840      	ldr	r0, [r0, #4]
   d5cd6:	f7ff bbbf 	b.w	d5458 <network_listening>

000d5cda <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5cda:	2200      	movs	r2, #0
   d5cdc:	4611      	mov	r1, r2
   d5cde:	6840      	ldr	r0, [r0, #4]
   d5ce0:	f7ff bbca 	b.w	d5478 <network_get_listen_timeout>

000d5ce4 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5ce4:	2200      	movs	r2, #0
   d5ce6:	6840      	ldr	r0, [r0, #4]
   d5ce8:	f7ff bbbe 	b.w	d5468 <network_set_listen_timeout>

000d5cec <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5cec:	2200      	movs	r2, #0
   d5cee:	f081 0101 	eor.w	r1, r1, #1
   d5cf2:	6840      	ldr	r0, [r0, #4]
   d5cf4:	f7ff bba8 	b.w	d5448 <network_listen>

000d5cf8 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5cf8:	2300      	movs	r3, #0
   d5cfa:	461a      	mov	r2, r3
   d5cfc:	4619      	mov	r1, r3
   d5cfe:	6840      	ldr	r0, [r0, #4]
   d5d00:	f7ff bb9a 	b.w	d5438 <network_off>

000d5d04 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5d04:	2300      	movs	r3, #0
   d5d06:	461a      	mov	r2, r3
   d5d08:	4619      	mov	r1, r3
   d5d0a:	6840      	ldr	r0, [r0, #4]
   d5d0c:	f7ff bb8c 	b.w	d5428 <network_on>

000d5d10 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5d10:	2200      	movs	r2, #0
   d5d12:	4611      	mov	r1, r2
   d5d14:	6840      	ldr	r0, [r0, #4]
   d5d16:	f7ff bb7f 	b.w	d5418 <network_ready>

000d5d1a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5d1a:	2200      	movs	r2, #0
   d5d1c:	4611      	mov	r1, r2
   d5d1e:	6840      	ldr	r0, [r0, #4]
   d5d20:	f7ff bb6a 	b.w	d53f8 <network_connecting>

000d5d24 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5d24:	2200      	movs	r2, #0
   d5d26:	2102      	movs	r1, #2
   d5d28:	6840      	ldr	r0, [r0, #4]
   d5d2a:	f7ff bb6d 	b.w	d5408 <network_disconnect>

000d5d2e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5d2e:	2300      	movs	r3, #0
   d5d30:	461a      	mov	r2, r3
   d5d32:	6840      	ldr	r0, [r0, #4]
   d5d34:	f7ff bb58 	b.w	d53e8 <network_connect>

000d5d38 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5d38:	b110      	cbz	r0, d5d40 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d5d3a:	6803      	ldr	r3, [r0, #0]
   d5d3c:	685b      	ldr	r3, [r3, #4]
   d5d3e:	4718      	bx	r3
   d5d40:	4770      	bx	lr

000d5d42 <_ZN6Thread7disposeEv>:
    ~Thread()
    {
        dispose();
    }

    void dispose()
   d5d42:	b538      	push	{r3, r4, r5, lr}
   d5d44:	4604      	mov	r4, r0
   d5d46:	6800      	ldr	r0, [r0, #0]
    {
        if (!is_valid())
   d5d48:	b1d0      	cbz	r0, d5d80 <_ZN6Thread7disposeEv+0x3e>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d5d4a:	f7ff f971 	bl	d5030 <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d5d4e:	b9b8      	cbnz	r0, d5d80 <_ZN6Thread7disposeEv+0x3e>
            return;

        if (!exited_) {
   d5d50:	7c23      	ldrb	r3, [r4, #16]
   d5d52:	b91b      	cbnz	r3, d5d5c <_ZN6Thread7disposeEv+0x1a>
   d5d54:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d5d56:	b108      	cbz	r0, d5d5c <_ZN6Thread7disposeEv+0x1a>
   d5d58:	f7ff f972 	bl	d5040 <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d5d5c:	6865      	ldr	r5, [r4, #4]
   d5d5e:	b155      	cbz	r5, d5d76 <_ZN6Thread7disposeEv+0x34>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5d60:	68ab      	ldr	r3, [r5, #8]
   d5d62:	b11b      	cbz	r3, d5d6c <_ZN6Thread7disposeEv+0x2a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5d64:	2203      	movs	r2, #3
   d5d66:	4629      	mov	r1, r5
   d5d68:	4628      	mov	r0, r5
   d5d6a:	4798      	blx	r3
            delete wrapper;
   d5d6c:	4628      	mov	r0, r5
   d5d6e:	f7fe f994 	bl	d409a <_ZdlPv>
            wrapper = NULL;
   d5d72:	2300      	movs	r3, #0
   d5d74:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
   d5d76:	6820      	ldr	r0, [r4, #0]
   d5d78:	f7ff f96a 	bl	d5050 <os_thread_cleanup>
        handle = OS_THREAD_INVALID_HANDLE;
   d5d7c:	2300      	movs	r3, #0
   d5d7e:	6023      	str	r3, [r4, #0]
   d5d80:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5d84 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5d84:	b538      	push	{r3, r4, r5, lr}
   d5d86:	4b0b      	ldr	r3, [pc, #44]	; (d5db4 <_ZN5spark9MeshClassD1Ev+0x30>)
   d5d88:	6003      	str	r3, [r0, #0]
   d5d8a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5d8c:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5d90:	b108      	cbz	r0, d5d96 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5d92:	f7fe f984 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5d96:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5d9a:	b12d      	cbz	r5, d5da8 <_ZN5spark9MeshClassD1Ev+0x24>
        }
    }

    ~Thread()
    {
        dispose();
   d5d9c:	4628      	mov	r0, r5
   d5d9e:	f7ff ffd0 	bl	d5d42 <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5da2:	4628      	mov	r0, r5
   d5da4:	f7fe f979 	bl	d409a <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5da8:	68a0      	ldr	r0, [r4, #8]
   d5daa:	b108      	cbz	r0, d5db0 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d5dac:	f7ff ffc4 	bl	d5d38 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d5db0:	4620      	mov	r0, r4
   d5db2:	bd38      	pop	{r3, r4, r5, pc}
   d5db4:	000d8668 	.word	0x000d8668

000d5db8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5db8:	b538      	push	{r3, r4, r5, lr}
   d5dba:	4c0d      	ldr	r4, [pc, #52]	; (d5df0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d5dbc:	4b0d      	ldr	r3, [pc, #52]	; (d5df4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d5dbe:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5dc0:	2500      	movs	r5, #0
   d5dc2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5dc4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5dc8:	6063      	str	r3, [r4, #4]
   d5dca:	60a5      	str	r5, [r4, #8]
   d5dcc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5dd0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5dd4:	f7ff f94c 	bl	d5070 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5dd8:	4b07      	ldr	r3, [pc, #28]	; (d5df8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d5dda:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d5dde:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5de0:	4620      	mov	r0, r4
   d5de2:	4a06      	ldr	r2, [pc, #24]	; (d5dfc <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d5de4:	4906      	ldr	r1, [pc, #24]	; (d5e00 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d5de6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5dea:	f001 b97f 	b.w	d70ec <__aeabi_atexit>
   d5dee:	bf00      	nop
   d5df0:	2003e3dc 	.word	0x2003e3dc
   d5df4:	000d869c 	.word	0x000d869c
   d5df8:	000d8668 	.word	0x000d8668
   d5dfc:	2003e268 	.word	0x2003e268
   d5e00:	000d5d85 	.word	0x000d5d85

000d5e04 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5e04:	2300      	movs	r3, #0
   d5e06:	461a      	mov	r2, r3
   d5e08:	6840      	ldr	r0, [r0, #4]
   d5e0a:	f7ff baed 	b.w	d53e8 <network_connect>

000d5e0e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5e0e:	2200      	movs	r2, #0
   d5e10:	2102      	movs	r1, #2
   d5e12:	6840      	ldr	r0, [r0, #4]
   d5e14:	f7ff baf8 	b.w	d5408 <network_disconnect>

000d5e18 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5e18:	2200      	movs	r2, #0
   d5e1a:	4611      	mov	r1, r2
   d5e1c:	6840      	ldr	r0, [r0, #4]
   d5e1e:	f7ff baeb 	b.w	d53f8 <network_connecting>

000d5e22 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5e22:	2200      	movs	r2, #0
   d5e24:	4611      	mov	r1, r2
   d5e26:	6840      	ldr	r0, [r0, #4]
   d5e28:	f7ff baf6 	b.w	d5418 <network_ready>

000d5e2c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5e2c:	2300      	movs	r3, #0
   d5e2e:	461a      	mov	r2, r3
   d5e30:	4619      	mov	r1, r3
   d5e32:	6840      	ldr	r0, [r0, #4]
   d5e34:	f7ff baf8 	b.w	d5428 <network_on>

000d5e38 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5e38:	2300      	movs	r3, #0
   d5e3a:	461a      	mov	r2, r3
   d5e3c:	4619      	mov	r1, r3
   d5e3e:	6840      	ldr	r0, [r0, #4]
   d5e40:	f7ff bafa 	b.w	d5438 <network_off>

000d5e44 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5e44:	2200      	movs	r2, #0
   d5e46:	f081 0101 	eor.w	r1, r1, #1
   d5e4a:	6840      	ldr	r0, [r0, #4]
   d5e4c:	f7ff bafc 	b.w	d5448 <network_listen>

000d5e50 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5e50:	2200      	movs	r2, #0
   d5e52:	6840      	ldr	r0, [r0, #4]
   d5e54:	f7ff bb08 	b.w	d5468 <network_set_listen_timeout>

000d5e58 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5e58:	2200      	movs	r2, #0
   d5e5a:	4611      	mov	r1, r2
   d5e5c:	6840      	ldr	r0, [r0, #4]
   d5e5e:	f7ff bb0b 	b.w	d5478 <network_get_listen_timeout>

000d5e62 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5e62:	2200      	movs	r2, #0
   d5e64:	4611      	mov	r1, r2
   d5e66:	6840      	ldr	r0, [r0, #4]
   d5e68:	f7ff baf6 	b.w	d5458 <network_listening>

000d5e6c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5e6c:	b570      	push	{r4, r5, r6, lr}
   d5e6e:	b08c      	sub	sp, #48	; 0x30
   d5e70:	4614      	mov	r4, r2
   d5e72:	4606      	mov	r6, r0
    IPAddress addr;
   d5e74:	f7ff fed6 	bl	d5c24 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5e78:	ab0c      	add	r3, sp, #48	; 0x30
   d5e7a:	2200      	movs	r2, #0
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d5e7c:	4611      	mov	r1, r2
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5e7e:	f843 2d30 	str.w	r2, [r3, #-48]!
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d5e82:	4620      	mov	r0, r4
   d5e84:	f7ff f9ac 	bl	d51e0 <netdb_getaddrinfo>
    if (!r && ai) {
   d5e88:	4601      	mov	r1, r0
   d5e8a:	bb58      	cbnz	r0, d5ee4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
   d5e8c:	9b00      	ldr	r3, [sp, #0]
   d5e8e:	b34b      	cbz	r3, d5ee4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
   d5e90:	685a      	ldr	r2, [r3, #4]
   d5e92:	2a02      	cmp	r2, #2
   d5e94:	d00e      	beq.n	d5eb4 <_ZN5spark12NetworkClass7resolveEPKc+0x48>
   d5e96:	2a0a      	cmp	r2, #10
   d5e98:	d124      	bne.n	d5ee4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
                break;
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
   d5e9a:	695c      	ldr	r4, [r3, #20]
                HAL_IPAddress a = {};
   d5e9c:	2211      	movs	r2, #17
   d5e9e:	a801      	add	r0, sp, #4
   d5ea0:	f002 f941 	bl	d8126 <memset>
                a.v = 6;
   d5ea4:	2306      	movs	r3, #6
   d5ea6:	f88d 3014 	strb.w	r3, [sp, #20]
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5eaa:	ad01      	add	r5, sp, #4
   d5eac:	f104 0308 	add.w	r3, r4, #8
   d5eb0:	3418      	adds	r4, #24
   d5eb2:	e005      	b.n	d5ec0 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
            case AF_INET: {
                // NOTE: HAL_IPAddress is little-endian
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5eb4:	6959      	ldr	r1, [r3, #20]
   d5eb6:	4630      	mov	r0, r6
   d5eb8:	3104      	adds	r1, #4
   d5eba:	f7ff fef6 	bl	d5caa <_ZN9IPAddressaSEPKh>
                break;
   d5ebe:	e011      	b.n	d5ee4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
                HAL_IPAddress a = {};
                a.v = 6;
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5ec0:	6818      	ldr	r0, [r3, #0]
   d5ec2:	6859      	ldr	r1, [r3, #4]
   d5ec4:	462a      	mov	r2, r5
   d5ec6:	c203      	stmia	r2!, {r0, r1}
   d5ec8:	3308      	adds	r3, #8
   d5eca:	42a3      	cmp	r3, r4
   d5ecc:	4615      	mov	r5, r2
   d5ece:	d1f7      	bne.n	d5ec0 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
                addr = IPAddress(a);
   d5ed0:	a901      	add	r1, sp, #4
   d5ed2:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5ed4:	ad07      	add	r5, sp, #28
   d5ed6:	f7ff feb3 	bl	d5c40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5eda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5edc:	1d34      	adds	r4, r6, #4
   d5ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5ee0:	682b      	ldr	r3, [r5, #0]
   d5ee2:	7023      	strb	r3, [r4, #0]
                break;
            }
        }
    }
    freeaddrinfo(ai);
   d5ee4:	9800      	ldr	r0, [sp, #0]
   d5ee6:	f7ff f973 	bl	d51d0 <netdb_freeaddrinfo>
#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5eea:	4630      	mov	r0, r6
   d5eec:	b00c      	add	sp, #48	; 0x30
   d5eee:	bd70      	pop	{r4, r5, r6, pc}

000d5ef0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5ef0:	4b02      	ldr	r3, [pc, #8]	; (d5efc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5ef2:	4a03      	ldr	r2, [pc, #12]	; (d5f00 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5ef4:	601a      	str	r2, [r3, #0]
   d5ef6:	2200      	movs	r2, #0
   d5ef8:	605a      	str	r2, [r3, #4]
   d5efa:	4770      	bx	lr
   d5efc:	2003e5ac 	.word	0x2003e5ac
   d5f00:	000d869c 	.word	0x000d869c

000d5f04 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5f06:	4606      	mov	r6, r0
   d5f08:	460d      	mov	r5, r1
   d5f0a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5f0c:	2400      	movs	r4, #0
  while (size--) {
   d5f0e:	42bd      	cmp	r5, r7
   d5f10:	d00c      	beq.n	d5f2c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5f12:	6833      	ldr	r3, [r6, #0]
   d5f14:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5f18:	689b      	ldr	r3, [r3, #8]
   d5f1a:	4630      	mov	r0, r6
   d5f1c:	4798      	blx	r3
     if (chunk>=0)
   d5f1e:	2800      	cmp	r0, #0
   d5f20:	db01      	blt.n	d5f26 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5f22:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5f24:	e7f3      	b.n	d5f0e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5f26:	2c00      	cmp	r4, #0
   d5f28:	bf08      	it	eq
   d5f2a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5f2c:	4620      	mov	r0, r4
   d5f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5f30 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5f30:	b570      	push	{r4, r5, r6, lr}
   d5f32:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5f34:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5f36:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5f38:	b149      	cbz	r1, d5f4e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5f3a:	f002 f958 	bl	d81ee <strlen>
   d5f3e:	682b      	ldr	r3, [r5, #0]
   d5f40:	4602      	mov	r2, r0
   d5f42:	4621      	mov	r1, r4
   d5f44:	4628      	mov	r0, r5
   d5f46:	68db      	ldr	r3, [r3, #12]
    }
   d5f48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5f4c:	4718      	bx	r3
    }
   d5f4e:	bd70      	pop	{r4, r5, r6, pc}

000d5f50 <_ZN5Print5printEPKc>:
   d5f50:	b508      	push	{r3, lr}
   d5f52:	f7ff ffed 	bl	d5f30 <_ZN5Print5writeEPKc>
   d5f56:	bd08      	pop	{r3, pc}

000d5f58 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5f58:	6803      	ldr	r3, [r0, #0]
   d5f5a:	689b      	ldr	r3, [r3, #8]
   d5f5c:	4718      	bx	r3

000d5f5e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5f5e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5f60:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5f62:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5f64:	f7ff fff8 	bl	d5f58 <_ZN5Print5printEc>
  n += print('\n');
   d5f68:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5f6a:	4604      	mov	r4, r0
  n += print('\n');
   d5f6c:	4628      	mov	r0, r5
   d5f6e:	f7ff fff3 	bl	d5f58 <_ZN5Print5printEc>
  return n;
}
   d5f72:	4420      	add	r0, r4
   d5f74:	bd38      	pop	{r3, r4, r5, pc}

000d5f76 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5f76:	b538      	push	{r3, r4, r5, lr}
   d5f78:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5f7a:	f7ff ffd9 	bl	d5f30 <_ZN5Print5writeEPKc>
   d5f7e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5f80:	4628      	mov	r0, r5
   d5f82:	f7ff ffec 	bl	d5f5e <_ZN5Print7printlnEv>
  return n;
}
   d5f86:	4420      	add	r0, r4
   d5f88:	bd38      	pop	{r3, r4, r5, pc}

000d5f8a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5f8a:	b530      	push	{r4, r5, lr}
   d5f8c:	b08b      	sub	sp, #44	; 0x2c
   d5f8e:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5f90:	2100      	movs	r1, #0
   d5f92:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5f96:	2a01      	cmp	r2, #1
   d5f98:	bf98      	it	ls
   d5f9a:	220a      	movls	r2, #10
   d5f9c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5fa0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5fa4:	fb05 3312 	mls	r3, r5, r2, r3
   d5fa8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5fac:	2b09      	cmp	r3, #9
   d5fae:	bf94      	ite	ls
   d5fb0:	3330      	addls	r3, #48	; 0x30
   d5fb2:	3337      	addhi	r3, #55	; 0x37
   d5fb4:	b2db      	uxtb	r3, r3
   d5fb6:	4621      	mov	r1, r4
   d5fb8:	f804 3901 	strb.w	r3, [r4], #-1
   d5fbc:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5fbe:	2d00      	cmp	r5, #0
   d5fc0:	d1ee      	bne.n	d5fa0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5fc2:	f7ff ffb5 	bl	d5f30 <_ZN5Print5writeEPKc>
}
   d5fc6:	b00b      	add	sp, #44	; 0x2c
   d5fc8:	bd30      	pop	{r4, r5, pc}

000d5fca <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5fca:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5fcc:	b92a      	cbnz	r2, d5fda <_ZN5Print5printEmi+0x10>
   d5fce:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5fd0:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5fd4:	689b      	ldr	r3, [r3, #8]
   d5fd6:	b2c9      	uxtb	r1, r1
   d5fd8:	4718      	bx	r3
  else return printNumber(n, base);
   d5fda:	b2d2      	uxtb	r2, r2
}
   d5fdc:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5fe0:	f7ff bfd3 	b.w	d5f8a <_ZN5Print11printNumberEmh>

000d5fe4 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5fe4:	f7ff bff1 	b.w	d5fca <_ZN5Print5printEmi>

000d5fe8 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
   d5fe8:	b538      	push	{r3, r4, r5, lr}
   d5fea:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5fec:	f7ff ffed 	bl	d5fca <_ZN5Print5printEmi>
   d5ff0:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
   d5ff2:	4628      	mov	r0, r5
   d5ff4:	f7ff ffb3 	bl	d5f5e <_ZN5Print7printlnEv>
  return n;
}
   d5ff8:	4420      	add	r0, r4
   d5ffa:	bd38      	pop	{r3, r4, r5, pc}

000d5ffc <_ZN5Print5printEji>:
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
   d5ffc:	f7ff bfe5 	b.w	d5fca <_ZN5Print5printEmi>

000d6000 <_ZN5Print5printEli>:
}

size_t Print::print(long n, int base)
{
   d6000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6004:	4607      	mov	r7, r0
   d6006:	460e      	mov	r6, r1
  if (base == 0) {
   d6008:	4615      	mov	r5, r2
   d600a:	b92a      	cbnz	r2, d6018 <_ZN5Print5printEli+0x18>
    return write(n);
   d600c:	6803      	ldr	r3, [r0, #0]
   d600e:	b2c9      	uxtb	r1, r1
   d6010:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d6012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d6016:	4718      	bx	r3
  } else if (base == 10) {
   d6018:	2a0a      	cmp	r2, #10
   d601a:	d102      	bne.n	d6022 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d601c:	2900      	cmp	r1, #0
   d601e:	da01      	bge.n	d6024 <_ZN5Print5printEli+0x24>
   d6020:	e004      	b.n	d602c <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d6022:	b2d2      	uxtb	r2, r2
  }
}
   d6024:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d6028:	f7ff bfaf 	b.w	d5f8a <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d602c:	212d      	movs	r1, #45	; 0x2d
   d602e:	f7ff ff93 	bl	d5f58 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d6032:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d6034:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d6036:	4271      	negs	r1, r6
   d6038:	4638      	mov	r0, r7
   d603a:	f7ff ffa6 	bl	d5f8a <_ZN5Print11printNumberEmh>
   d603e:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d6040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6044 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d6044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6048:	ec57 6b10 	vmov	r6, r7, d0
   d604c:	4682      	mov	sl, r0
   d604e:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d6050:	ee10 2a10 	vmov	r2, s0
   d6054:	463b      	mov	r3, r7
   d6056:	ee10 0a10 	vmov	r0, s0
   d605a:	4639      	mov	r1, r7
   d605c:	f001 fde8 	bl	d7c30 <__aeabi_dcmpun>
   d6060:	b108      	cbz	r0, d6066 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6062:	4948      	ldr	r1, [pc, #288]	; (d6184 <_ZN5Print10printFloatEdh+0x140>)
   d6064:	e012      	b.n	d608c <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d6066:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d606a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d606e:	4b46      	ldr	r3, [pc, #280]	; (d6188 <_ZN5Print10printFloatEdh+0x144>)
   d6070:	4630      	mov	r0, r6
   d6072:	4649      	mov	r1, r9
   d6074:	f001 fddc 	bl	d7c30 <__aeabi_dcmpun>
   d6078:	b968      	cbnz	r0, d6096 <_ZN5Print10printFloatEdh+0x52>
   d607a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d607e:	4b42      	ldr	r3, [pc, #264]	; (d6188 <_ZN5Print10printFloatEdh+0x144>)
   d6080:	4630      	mov	r0, r6
   d6082:	4649      	mov	r1, r9
   d6084:	f001 fdb6 	bl	d7bf4 <__aeabi_dcmple>
   d6088:	b928      	cbnz	r0, d6096 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d608a:	4940      	ldr	r1, [pc, #256]	; (d618c <_ZN5Print10printFloatEdh+0x148>)
   d608c:	4650      	mov	r0, sl
   d608e:	f7ff ff4f 	bl	d5f30 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d6092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d6096:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d609a:	4b3d      	ldr	r3, [pc, #244]	; (d6190 <_ZN5Print10printFloatEdh+0x14c>)
   d609c:	4630      	mov	r0, r6
   d609e:	4639      	mov	r1, r7
   d60a0:	f001 fdbc 	bl	d7c1c <__aeabi_dcmpgt>
   d60a4:	b108      	cbz	r0, d60aa <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d60a6:	493b      	ldr	r1, [pc, #236]	; (d6194 <_ZN5Print10printFloatEdh+0x150>)
   d60a8:	e7f0      	b.n	d608c <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d60aa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d60ae:	4b3a      	ldr	r3, [pc, #232]	; (d6198 <_ZN5Print10printFloatEdh+0x154>)
   d60b0:	4630      	mov	r0, r6
   d60b2:	4639      	mov	r1, r7
   d60b4:	f001 fd94 	bl	d7be0 <__aeabi_dcmplt>
   d60b8:	2800      	cmp	r0, #0
   d60ba:	d1f4      	bne.n	d60a6 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d60bc:	2200      	movs	r2, #0
   d60be:	2300      	movs	r3, #0
   d60c0:	4630      	mov	r0, r6
   d60c2:	4639      	mov	r1, r7
   d60c4:	f001 fd8c 	bl	d7be0 <__aeabi_dcmplt>
   d60c8:	b140      	cbz	r0, d60dc <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d60ca:	212d      	movs	r1, #45	; 0x2d
   d60cc:	4650      	mov	r0, sl
   d60ce:	f7ff ff43 	bl	d5f58 <_ZN5Print5printEc>
     number = -number;
   d60d2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d60d6:	4604      	mov	r4, r0
     number = -number;
   d60d8:	461f      	mov	r7, r3
   d60da:	e000      	b.n	d60de <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d60dc:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d60de:	492f      	ldr	r1, [pc, #188]	; (d619c <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d60e0:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d60e4:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d60e6:	fa5f f388 	uxtb.w	r3, r8
   d60ea:	429d      	cmp	r5, r3
   d60ec:	d906      	bls.n	d60fc <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d60ee:	2200      	movs	r2, #0
   d60f0:	4b2b      	ldr	r3, [pc, #172]	; (d61a0 <_ZN5Print10printFloatEdh+0x15c>)
   d60f2:	f001 fc2d 	bl	d7950 <__aeabi_ddiv>
   d60f6:	f108 0801 	add.w	r8, r8, #1
   d60fa:	e7f4      	b.n	d60e6 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d60fc:	4632      	mov	r2, r6
   d60fe:	463b      	mov	r3, r7
   d6100:	f001 f94a 	bl	d7398 <__adddf3>
   d6104:	460f      	mov	r7, r1
   d6106:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d6108:	f001 fdd0 	bl	d7cac <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d610c:	220a      	movs	r2, #10
   d610e:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d6110:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6112:	4650      	mov	r0, sl
   d6114:	f7ff ff39 	bl	d5f8a <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d6118:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d611a:	b37d      	cbz	r5, d617c <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d611c:	4640      	mov	r0, r8
   d611e:	f001 fa77 	bl	d7610 <__aeabi_ui2d>
   d6122:	4602      	mov	r2, r0
   d6124:	460b      	mov	r3, r1
   d6126:	4630      	mov	r0, r6
   d6128:	4639      	mov	r1, r7
   d612a:	f001 f933 	bl	d7394 <__aeabi_dsub>
   d612e:	4606      	mov	r6, r0
   d6130:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6132:	4650      	mov	r0, sl
   d6134:	491b      	ldr	r1, [pc, #108]	; (d61a4 <_ZN5Print10printFloatEdh+0x160>)
   d6136:	f7ff fefb 	bl	d5f30 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d613a:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d613c:	4b18      	ldr	r3, [pc, #96]	; (d61a0 <_ZN5Print10printFloatEdh+0x15c>)
   d613e:	2200      	movs	r2, #0
   d6140:	4630      	mov	r0, r6
   d6142:	4639      	mov	r1, r7
   d6144:	f001 fada 	bl	d76fc <__aeabi_dmul>
   d6148:	460f      	mov	r7, r1
   d614a:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d614c:	f001 fd86 	bl	d7c5c <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d6150:	220a      	movs	r2, #10
   d6152:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d6154:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d6156:	4650      	mov	r0, sl
   d6158:	f7ff ff52 	bl	d6000 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d615c:	4404      	add	r4, r0
    remainder -= toPrint;
   d615e:	4640      	mov	r0, r8
   d6160:	f001 fa66 	bl	d7630 <__aeabi_i2d>
   d6164:	4602      	mov	r2, r0
   d6166:	460b      	mov	r3, r1
   d6168:	4630      	mov	r0, r6
   d616a:	4639      	mov	r1, r7
   d616c:	f001 f912 	bl	d7394 <__aeabi_dsub>
   d6170:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d6172:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d6176:	4606      	mov	r6, r0
   d6178:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d617a:	d1df      	bne.n	d613c <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d617c:	4620      	mov	r0, r4
   d617e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6182:	bf00      	nop
   d6184:	000d86c8 	.word	0x000d86c8
   d6188:	7fefffff 	.word	0x7fefffff
   d618c:	000d86d2 	.word	0x000d86d2
   d6190:	41efffff 	.word	0x41efffff
   d6194:	000d86cc 	.word	0x000d86cc
   d6198:	c1efffff 	.word	0xc1efffff
   d619c:	3fe00000 	.word	0x3fe00000
   d61a0:	40240000 	.word	0x40240000
   d61a4:	000d86d0 	.word	0x000d86d0

000d61a8 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d61a8:	b2c9      	uxtb	r1, r1
   d61aa:	f7ff bf4b 	b.w	d6044 <_ZN5Print10printFloatEdh>

000d61ae <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d61ae:	b510      	push	{r4, lr}
   d61b0:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d61b2:	f7ff f9cd 	bl	d5550 <_ZNSt14_Function_baseD1Ev>
   d61b6:	4620      	mov	r0, r4
   d61b8:	bd10      	pop	{r4, pc}
	...

000d61bc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d61bc:	4803      	ldr	r0, [pc, #12]	; (d61cc <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d61be:	4a04      	ldr	r2, [pc, #16]	; (d61d0 <_GLOBAL__sub_I_RGB+0x14>)
   d61c0:	4904      	ldr	r1, [pc, #16]	; (d61d4 <_GLOBAL__sub_I_RGB+0x18>)
   d61c2:	2300      	movs	r3, #0
   d61c4:	6083      	str	r3, [r0, #8]
   d61c6:	f000 bf91 	b.w	d70ec <__aeabi_atexit>
   d61ca:	bf00      	nop
   d61cc:	2003e5b4 	.word	0x2003e5b4
   d61d0:	2003e268 	.word	0x2003e268
   d61d4:	000d61af 	.word	0x000d61af

000d61d8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d61d8:	4770      	bx	lr

000d61da <_ZN8SPIClassD0Ev>:
   d61da:	b510      	push	{r4, lr}
   d61dc:	4604      	mov	r4, r0
   d61de:	f7fd ff5c 	bl	d409a <_ZdlPv>
   d61e2:	4620      	mov	r0, r4
   d61e4:	bd10      	pop	{r4, pc}
	...

000d61e8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d61e8:	b570      	push	{r4, r5, r6, lr}
   d61ea:	4b08      	ldr	r3, [pc, #32]	; (d620c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d61ec:	6003      	str	r3, [r0, #0]
   d61ee:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d61f0:	2500      	movs	r5, #0
   d61f2:	460e      	mov	r6, r1
   d61f4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d61f8:	f7fe ff32 	bl	d5060 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d61fc:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d61fe:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d6200:	f7ff f826 	bl	d5250 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d6204:	60a5      	str	r5, [r4, #8]
}
   d6206:	4620      	mov	r0, r4
   d6208:	bd70      	pop	{r4, r5, r6, pc}
   d620a:	bf00      	nop
   d620c:	000d86e0 	.word	0x000d86e0

000d6210 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d6210:	7900      	ldrb	r0, [r0, #4]
   d6212:	f7ff b825 	b.w	d5260 <HAL_SPI_Is_Enabled>

000d6216 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d6216:	b510      	push	{r4, lr}
   d6218:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d621a:	f7fe ff39 	bl	d5090 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d621e:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d6220:	6823      	ldr	r3, [r4, #0]
   d6222:	4620      	mov	r0, r4
   d6224:	695b      	ldr	r3, [r3, #20]
   d6226:	4798      	blx	r3
    if (c >= 0) return c;
   d6228:	2800      	cmp	r0, #0
   d622a:	da08      	bge.n	d623e <_ZN6Stream9timedReadEv+0x28>
   d622c:	f7fe ff30 	bl	d5090 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
   d6230:	68e3      	ldr	r3, [r4, #12]
   d6232:	1ac0      	subs	r0, r0, r3
   d6234:	68a3      	ldr	r3, [r4, #8]
   d6236:	4298      	cmp	r0, r3
   d6238:	d3f2      	bcc.n	d6220 <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
   d623a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d623e:	bd10      	pop	{r4, pc}

000d6240 <_ZN6Stream9timedPeekEv>:

// private method to peek stream with timeout
int Stream::timedPeek()
{
   d6240:	b510      	push	{r4, lr}
   d6242:	4604      	mov	r4, r0
   d6244:	f7fe ff24 	bl	d5090 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d6248:	60e0      	str	r0, [r4, #12]
  do {
    c = peek();
   d624a:	6823      	ldr	r3, [r4, #0]
   d624c:	4620      	mov	r0, r4
   d624e:	699b      	ldr	r3, [r3, #24]
   d6250:	4798      	blx	r3
    if (c >= 0) return c;
   d6252:	2800      	cmp	r0, #0
   d6254:	da08      	bge.n	d6268 <_ZN6Stream9timedPeekEv+0x28>
   d6256:	f7fe ff1b 	bl	d5090 <HAL_Timer_Get_Milli_Seconds>
// private method to peek stream with timeout
int Stream::timedPeek()
{
  int c;
  _startMillis = millis();
  do {
   d625a:	68e3      	ldr	r3, [r4, #12]
   d625c:	1ac0      	subs	r0, r0, r3
   d625e:	68a3      	ldr	r3, [r4, #8]
   d6260:	4298      	cmp	r0, r3
   d6262:	d3f2      	bcc.n	d624a <_ZN6Stream9timedPeekEv+0xa>
    c = peek();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
   d6264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d6268:	bd10      	pop	{r4, pc}

000d626a <_ZN6Stream13peekNextDigitEv>:

// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
{
   d626a:	b510      	push	{r4, lr}
   d626c:	4604      	mov	r4, r0
  int c = -1;
  while (1) {
    c = timedPeek();
   d626e:	4620      	mov	r0, r4
   d6270:	f7ff ffe6 	bl	d6240 <_ZN6Stream9timedPeekEv>
    // timeout
    if ((c < 0) || (c == '-') || (c >= '0' && c <= '9'))
   d6274:	2800      	cmp	r0, #0
   d6276:	db0a      	blt.n	d628e <_ZN6Stream13peekNextDigitEv+0x24>
   d6278:	282d      	cmp	r0, #45	; 0x2d
   d627a:	d008      	beq.n	d628e <_ZN6Stream13peekNextDigitEv+0x24>
   d627c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d6280:	2b09      	cmp	r3, #9
   d6282:	d904      	bls.n	d628e <_ZN6Stream13peekNextDigitEv+0x24>
    {
        break;
    }
    read();  // discard non-numeric
   d6284:	6823      	ldr	r3, [r4, #0]
   d6286:	4620      	mov	r0, r4
   d6288:	695b      	ldr	r3, [r3, #20]
   d628a:	4798      	blx	r3
// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
{
  int c = -1;
  while (1) {
   d628c:	e7ef      	b.n	d626e <_ZN6Stream13peekNextDigitEv+0x4>
        break;
    }
    read();  // discard non-numeric
  }
  return c;
}
   d628e:	bd10      	pop	{r4, pc}

000d6290 <_ZN6Stream9findUntilEPcjS0_j>:

// reads data from the stream until the target string of the given length is found
// search terminated if the terminator string is found
// returns true if target string is found, false if terminated or timed out
bool Stream::findUntil(char *target, size_t targetLen, char *terminator, size_t termLen)
{
   d6290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6294:	469a      	mov	sl, r3
  size_t index = 0;  // maximum target string length is 64k bytes!
  size_t termIndex = 0;
  int c;

  if( *target == 0)
   d6296:	780b      	ldrb	r3, [r1, #0]

// reads data from the stream until the target string of the given length is found
// search terminated if the terminator string is found
// returns true if target string is found, false if terminated or timed out
bool Stream::findUntil(char *target, size_t targetLen, char *terminator, size_t termLen)
{
   d6298:	9e08      	ldr	r6, [sp, #32]
   d629a:	4680      	mov	r8, r0
   d629c:	460f      	mov	r7, r1
   d629e:	4691      	mov	r9, r2
  size_t index = 0;  // maximum target string length is 64k bytes!
  size_t termIndex = 0;
  int c;

  if( *target == 0)
   d62a0:	b19b      	cbz	r3, d62ca <_ZN6Stream9findUntilEPcjS0_j+0x3a>
   d62a2:	2400      	movs	r4, #0
   d62a4:	4625      	mov	r5, r4
   d62a6:	e001      	b.n	d62ac <_ZN6Stream9findUntilEPcjS0_j+0x1c>
      if(++index >= targetLen){ // return true if all chars in the target match
        return true;
      }
    }

    if(termLen > 0 && c == terminator[termIndex]){
   d62a8:	b996      	cbnz	r6, d62d0 <_ZN6Stream9findUntilEPcjS0_j+0x40>
      if(++termIndex >= termLen)
        return false;       // return false if terminate string found before target string
    }
    else
      termIndex = 0;
   d62aa:	2400      	movs	r4, #0
  size_t termIndex = 0;
  int c;

  if( *target == 0)
    return true;   // return true if target is a null string
  while( (c = timedRead()) > 0){
   d62ac:	4640      	mov	r0, r8
   d62ae:	f7ff ffb2 	bl	d6216 <_ZN6Stream9timedReadEv>
   d62b2:	2800      	cmp	r0, #0
   d62b4:	dd13      	ble.n	d62de <_ZN6Stream9findUntilEPcjS0_j+0x4e>

    if(c != target[index])
   d62b6:	5d7b      	ldrb	r3, [r7, r5]
      index = 0; // reset index if any char does not match
   d62b8:	4298      	cmp	r0, r3
   d62ba:	bf18      	it	ne
   d62bc:	2500      	movne	r5, #0

    if( c == target[index]){
   d62be:	5d7b      	ldrb	r3, [r7, r5]
   d62c0:	4298      	cmp	r0, r3
   d62c2:	d1f1      	bne.n	d62a8 <_ZN6Stream9findUntilEPcjS0_j+0x18>
      //////Serial.print("found "); Serial.write(c); Serial.print("index now"); Serial.println(index+1);
      if(++index >= targetLen){ // return true if all chars in the target match
   d62c4:	3501      	adds	r5, #1
   d62c6:	45a9      	cmp	r9, r5
   d62c8:	d8ee      	bhi.n	d62a8 <_ZN6Stream9findUntilEPcjS0_j+0x18>
  size_t index = 0;  // maximum target string length is 64k bytes!
  size_t termIndex = 0;
  int c;

  if( *target == 0)
    return true;   // return true if target is a null string
   d62ca:	2001      	movs	r0, #1
   d62cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(++index >= targetLen){ // return true if all chars in the target match
        return true;
      }
    }

    if(termLen > 0 && c == terminator[termIndex]){
   d62d0:	f81a 3004 	ldrb.w	r3, [sl, r4]
   d62d4:	4298      	cmp	r0, r3
   d62d6:	d1e8      	bne.n	d62aa <_ZN6Stream9findUntilEPcjS0_j+0x1a>
      if(++termIndex >= termLen)
   d62d8:	3401      	adds	r4, #1
   d62da:	42a6      	cmp	r6, r4
   d62dc:	d8e6      	bhi.n	d62ac <_ZN6Stream9findUntilEPcjS0_j+0x1c>
        return false;       // return false if terminate string found before target string
    }
    else
      termIndex = 0;
  }
  return false;
   d62de:	2000      	movs	r0, #0
}
   d62e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d62e4 <_ZN6Stream9findUntilEPcS0_>:
  return findUntil(target, length, NULL, 0);
}

// as find but search ends if the terminator string is found
bool  Stream::findUntil(char *target, char *terminator)
{
   d62e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d62e6:	4606      	mov	r6, r0
  return findUntil(target, strlen(target), terminator, strlen(terminator));
   d62e8:	4608      	mov	r0, r1
  return findUntil(target, length, NULL, 0);
}

// as find but search ends if the terminator string is found
bool  Stream::findUntil(char *target, char *terminator)
{
   d62ea:	4615      	mov	r5, r2
   d62ec:	460c      	mov	r4, r1
  return findUntil(target, strlen(target), terminator, strlen(terminator));
   d62ee:	f001 ff7e 	bl	d81ee <strlen>
   d62f2:	4607      	mov	r7, r0
   d62f4:	4628      	mov	r0, r5
   d62f6:	f001 ff7a 	bl	d81ee <strlen>
   d62fa:	462b      	mov	r3, r5
   d62fc:	9000      	str	r0, [sp, #0]
   d62fe:	463a      	mov	r2, r7
   d6300:	4621      	mov	r1, r4
   d6302:	4630      	mov	r0, r6
   d6304:	f7ff ffc4 	bl	d6290 <_ZN6Stream9findUntilEPcjS0_j>
}
   d6308:	b003      	add	sp, #12
   d630a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d630c <_ZN6Stream4findEPc>:
}

 // find returns true if the target string is found
bool  Stream::find(char *target)
{
  return findUntil(target, NULL);
   d630c:	2200      	movs	r2, #0
   d630e:	f7ff bfe9 	b.w	d62e4 <_ZN6Stream9findUntilEPcS0_>

000d6312 <_ZN6Stream8parseIntEc>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
   d6312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6316:	4605      	mov	r5, r0
   d6318:	460f      	mov	r7, r1
  bool isNegative = false;
  long value = 0;
  int c;

  c = peekNextDigit();
   d631a:	f7ff ffa6 	bl	d626a <_ZN6Stream13peekNextDigitEv>
  // ignore non numeric leading characters
  if(c < 0)
   d631e:	2800      	cmp	r0, #0
   d6320:	db21      	blt.n	d6366 <_ZN6Stream8parseIntEc+0x54>
   d6322:	2400      	movs	r4, #0
   d6324:	4626      	mov	r6, r4
    if(c == skipChar) {
      // ignore this charactor
    } else if(c == '-') {
      isNegative = true;
    } else if(c >= '0' && c <= '9') {        // is c a digit?
      value = value * 10 + c - '0';
   d6326:	f04f 080a 	mov.w	r8, #10
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
    if(c == skipChar) {
   d632a:	42b8      	cmp	r0, r7
   d632c:	d00a      	beq.n	d6344 <_ZN6Stream8parseIntEc+0x32>
      // ignore this charactor
    } else if(c == '-') {
   d632e:	282d      	cmp	r0, #45	; 0x2d
   d6330:	d007      	beq.n	d6342 <_ZN6Stream8parseIntEc+0x30>
      isNegative = true;
    } else if(c >= '0' && c <= '9') {        // is c a digit?
   d6332:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d6336:	2b09      	cmp	r3, #9
   d6338:	d804      	bhi.n	d6344 <_ZN6Stream8parseIntEc+0x32>
      value = value * 10 + c - '0';
   d633a:	fb08 0404 	mla	r4, r8, r4, r0
   d633e:	3c30      	subs	r4, #48	; 0x30
   d6340:	e000      	b.n	d6344 <_ZN6Stream8parseIntEc+0x32>

  do{
    if(c == skipChar) {
      // ignore this charactor
    } else if(c == '-') {
      isNegative = true;
   d6342:	2601      	movs	r6, #1
    } else if(c >= '0' && c <= '9') {        // is c a digit?
      value = value * 10 + c - '0';
    }
    read();  // consume the character we got with peek
   d6344:	682b      	ldr	r3, [r5, #0]
   d6346:	4628      	mov	r0, r5
   d6348:	695b      	ldr	r3, [r3, #20]
   d634a:	4798      	blx	r3
    c = timedPeek();
   d634c:	4628      	mov	r0, r5
   d634e:	f7ff ff77 	bl	d6240 <_ZN6Stream9timedPeekEv>
  }
  while( (c >= '0' && c <= '9') || c == skipChar );
   d6352:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d6356:	2b09      	cmp	r3, #9
   d6358:	d9e7      	bls.n	d632a <_ZN6Stream8parseIntEc+0x18>
   d635a:	4287      	cmp	r7, r0
   d635c:	d0e5      	beq.n	d632a <_ZN6Stream8parseIntEc+0x18>

  if(isNegative)
   d635e:	b12e      	cbz	r6, d636c <_ZN6Stream8parseIntEc+0x5a>
    value = -value;
   d6360:	4260      	negs	r0, r4
   d6362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  int c;

  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout
   d6366:	2000      	movs	r0, #0
   d6368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d636c:	4620      	mov	r0, r4
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    value = -value;
  return value;
}
   d636e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6372 <_ZN6Stream8parseIntEv>:
// returns the first valid (long) integer value from the current position.
// initial characters that are not digits (or the minus sign) are skipped
// function is terminated by the first character that is not a digit.
long Stream::parseInt()
{
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
   d6372:	2101      	movs	r1, #1
   d6374:	f7ff bfcd 	b.w	d6312 <_ZN6Stream8parseIntEc>

000d6378 <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
   d6378:	b538      	push	{r3, r4, r5, lr}
   d637a:	460d      	mov	r5, r1
  String ret;
   d637c:	4907      	ldr	r1, [pc, #28]	; (d639c <_ZN6Stream10readStringEv+0x24>)
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
   d637e:	4604      	mov	r4, r0
  String ret;
   d6380:	f000 f8b9 	bl	d64f6 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   d6384:	4628      	mov	r0, r5
   d6386:	f7ff ff46 	bl	d6216 <_ZN6Stream9timedReadEv>
  while (c >= 0)
   d638a:	2800      	cmp	r0, #0
   d638c:	db04      	blt.n	d6398 <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   d638e:	b2c1      	uxtb	r1, r0
   d6390:	4620      	mov	r0, r4
   d6392:	f000 f957 	bl	d6644 <_ZN6String6concatEc>
   d6396:	e7f5      	b.n	d6384 <_ZN6Stream10readStringEv+0xc>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
   d6398:	4620      	mov	r0, r4
   d639a:	bd38      	pop	{r3, r4, r5, pc}
   d639c:	000d840c 	.word	0x000d840c

000d63a0 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d63a0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d63a4:	ec59 8b10 	vmov	r8, r9, d0
   d63a8:	4607      	mov	r7, r0
   d63aa:	460e      	mov	r6, r1
    bool negative = val<0;
    if (negative) {
   d63ac:	2200      	movs	r2, #0
   d63ae:	2300      	movs	r3, #0
   d63b0:	ee10 0a10 	vmov	r0, s0
   d63b4:	4649      	mov	r1, r9
   d63b6:	f001 fc13 	bl	d7be0 <__aeabi_dcmplt>
   d63ba:	b128      	cbz	r0, d63c8 <_Z4dtoadhPc+0x28>
        val = -val;
   d63bc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d63c0:	4699      	mov	r9, r3
        *sout++ = '-';
   d63c2:	232d      	movs	r3, #45	; 0x2d
   d63c4:	7033      	strb	r3, [r6, #0]
   d63c6:	3601      	adds	r6, #1
   d63c8:	2300      	movs	r3, #0
    }
    long scale = 1;
   d63ca:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d63cc:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d63ce:	b2d9      	uxtb	r1, r3
   d63d0:	428f      	cmp	r7, r1
   d63d2:	d902      	bls.n	d63da <_Z4dtoadhPc+0x3a>
        scale *= 10;
   d63d4:	4354      	muls	r4, r2
   d63d6:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
   d63d8:	e7f9      	b.n	d63ce <_Z4dtoadhPc+0x2e>
        scale *= 10;
    val *= scale;   // capture all the significant digits
   d63da:	4620      	mov	r0, r4
   d63dc:	f001 f928 	bl	d7630 <__aeabi_i2d>
   d63e0:	4642      	mov	r2, r8
   d63e2:	464b      	mov	r3, r9
   d63e4:	f001 f98a 	bl	d76fc <__aeabi_dmul>
   d63e8:	4682      	mov	sl, r0
   d63ea:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
   d63ec:	f001 fce6 	bl	d7dbc <__aeabi_d2ulz>
   d63f0:	4680      	mov	r8, r0
   d63f2:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
   d63f4:	f001 f94c 	bl	d7690 <__aeabi_ul2d>
   d63f8:	4602      	mov	r2, r0
   d63fa:	460b      	mov	r3, r1
   d63fc:	4650      	mov	r0, sl
   d63fe:	4659      	mov	r1, fp
   d6400:	f000 ffc8 	bl	d7394 <__aeabi_dsub>
   d6404:	2200      	movs	r2, #0
   d6406:	4b17      	ldr	r3, [pc, #92]	; (d6464 <_Z4dtoadhPc+0xc4>)
   d6408:	f001 fbfe 	bl	d7c08 <__aeabi_dcmpge>
   d640c:	b118      	cbz	r0, d6416 <_Z4dtoadhPc+0x76>
        fixed++;
   d640e:	f118 0801 	adds.w	r8, r8, #1
   d6412:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d6416:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d6418:	4622      	mov	r2, r4
   d641a:	462b      	mov	r3, r5
   d641c:	4640      	mov	r0, r8
   d641e:	4649      	mov	r1, r9
   d6420:	f001 fcb4 	bl	d7d8c <__aeabi_uldivmod>
   d6424:	2301      	movs	r3, #1
   d6426:	220a      	movs	r2, #10
   d6428:	4631      	mov	r1, r6
   d642a:	f000 fd38 	bl	d6e9e <ultoa>
    if (prec) {
   d642e:	b1af      	cbz	r7, d645c <_Z4dtoadhPc+0xbc>
        sout += strlen(sout);
   d6430:	4630      	mov	r0, r6
   d6432:	f001 fedc 	bl	d81ee <strlen>
        *sout++ = '.';
   d6436:	232e      	movs	r3, #46	; 0x2e
   d6438:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
   d643a:	3001      	adds	r0, #1
   d643c:	4406      	add	r6, r0
   d643e:	4622      	mov	r2, r4
   d6440:	462b      	mov	r3, r5
   d6442:	4640      	mov	r0, r8
   d6444:	4649      	mov	r1, r9
   d6446:	f001 fca1 	bl	d7d8c <__aeabi_uldivmod>
   d644a:	463b      	mov	r3, r7
   d644c:	4610      	mov	r0, r2
   d644e:	4631      	mov	r1, r6
   d6450:	220a      	movs	r2, #10
    }
}
   d6452:	b001      	add	sp, #4
   d6454:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
   d6458:	f000 bd21 	b.w	d6e9e <ultoa>
    }
}
   d645c:	b001      	add	sp, #4
   d645e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6462:	bf00      	nop
   d6464:	3fe00000 	.word	0x3fe00000

000d6468 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6468:	b510      	push	{r4, lr}
   d646a:	4604      	mov	r4, r0
{
	free(buffer);
   d646c:	6800      	ldr	r0, [r0, #0]
   d646e:	f7ff f813 	bl	d5498 <free>
}
   d6472:	4620      	mov	r0, r4
   d6474:	bd10      	pop	{r4, pc}

000d6476 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6476:	b510      	push	{r4, lr}
   d6478:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d647a:	6800      	ldr	r0, [r0, #0]
   d647c:	b108      	cbz	r0, d6482 <_ZN6String10invalidateEv+0xc>
   d647e:	f7ff f80b 	bl	d5498 <free>
	buffer = NULL;
   d6482:	2300      	movs	r3, #0
   d6484:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d6486:	60a3      	str	r3, [r4, #8]
   d6488:	6063      	str	r3, [r4, #4]
   d648a:	bd10      	pop	{r4, pc}

000d648c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d648c:	b538      	push	{r3, r4, r5, lr}
   d648e:	4604      	mov	r4, r0
   d6490:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6492:	6800      	ldr	r0, [r0, #0]
   d6494:	3101      	adds	r1, #1
   d6496:	f7ff f807 	bl	d54a8 <realloc>
	if (newbuffer) {
   d649a:	b110      	cbz	r0, d64a2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d649c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d64a0:	2001      	movs	r0, #1
	}
	return 0;
}
   d64a2:	bd38      	pop	{r3, r4, r5, pc}

000d64a4 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d64a4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d64a6:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d64a8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d64aa:	b113      	cbz	r3, d64b2 <_ZN6String7reserveEj+0xe>
   d64ac:	6843      	ldr	r3, [r0, #4]
   d64ae:	428b      	cmp	r3, r1
   d64b0:	d207      	bcs.n	d64c2 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d64b2:	4620      	mov	r0, r4
   d64b4:	f7ff ffea 	bl	d648c <_ZN6String12changeBufferEj>
   d64b8:	b120      	cbz	r0, d64c4 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d64ba:	68a3      	ldr	r3, [r4, #8]
   d64bc:	b90b      	cbnz	r3, d64c2 <_ZN6String7reserveEj+0x1e>
   d64be:	6822      	ldr	r2, [r4, #0]
   d64c0:	7013      	strb	r3, [r2, #0]
   d64c2:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d64c4:	bd10      	pop	{r4, pc}

000d64c6 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d64c6:	b570      	push	{r4, r5, r6, lr}
   d64c8:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d64ca:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d64cc:	4604      	mov	r4, r0
   d64ce:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d64d0:	f7ff ffe8 	bl	d64a4 <_ZN6String7reserveEj>
   d64d4:	b918      	cbnz	r0, d64de <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d64d6:	4620      	mov	r0, r4
   d64d8:	f7ff ffcd 	bl	d6476 <_ZN6String10invalidateEv>
		return *this;
   d64dc:	e009      	b.n	d64f2 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d64de:	462a      	mov	r2, r5
   d64e0:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d64e2:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d64e4:	6820      	ldr	r0, [r4, #0]
   d64e6:	f001 fe13 	bl	d8110 <memcpy>
	buffer[len] = 0;
   d64ea:	6822      	ldr	r2, [r4, #0]
   d64ec:	68a3      	ldr	r3, [r4, #8]
   d64ee:	2100      	movs	r1, #0
   d64f0:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d64f2:	4620      	mov	r0, r4
   d64f4:	bd70      	pop	{r4, r5, r6, pc}

000d64f6 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d64f6:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d64f8:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d64fa:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d64fc:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d64fe:	6043      	str	r3, [r0, #4]
	len = 0;
   d6500:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6502:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d6504:	460d      	mov	r5, r1
   d6506:	b139      	cbz	r1, d6518 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d6508:	4608      	mov	r0, r1
   d650a:	f001 fe70 	bl	d81ee <strlen>
   d650e:	4629      	mov	r1, r5
   d6510:	4602      	mov	r2, r0
   d6512:	4620      	mov	r0, r4
   d6514:	f7ff ffd7 	bl	d64c6 <_ZN6String4copyEPKcj>
}
   d6518:	4620      	mov	r0, r4
   d651a:	bd38      	pop	{r3, r4, r5, pc}

000d651c <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d651c:	b538      	push	{r3, r4, r5, lr}
   d651e:	4605      	mov	r5, r0
	if (buffer) {
   d6520:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d6522:	460c      	mov	r4, r1
	if (buffer) {
   d6524:	b160      	cbz	r0, d6540 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d6526:	686a      	ldr	r2, [r5, #4]
   d6528:	688b      	ldr	r3, [r1, #8]
   d652a:	429a      	cmp	r2, r3
   d652c:	d306      	bcc.n	d653c <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d652e:	6809      	ldr	r1, [r1, #0]
   d6530:	f001 fe39 	bl	d81a6 <strcpy>
			len = rhs.len;
   d6534:	68a3      	ldr	r3, [r4, #8]
   d6536:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d6538:	2300      	movs	r3, #0
   d653a:	e00a      	b.n	d6552 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d653c:	f7fe ffac 	bl	d5498 <free>
		}
	}
	buffer = rhs.buffer;
   d6540:	6823      	ldr	r3, [r4, #0]
   d6542:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d6544:	6863      	ldr	r3, [r4, #4]
   d6546:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d6548:	68a3      	ldr	r3, [r4, #8]
   d654a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d654c:	2300      	movs	r3, #0
   d654e:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d6550:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d6552:	60a3      	str	r3, [r4, #8]
   d6554:	bd38      	pop	{r3, r4, r5, pc}

000d6556 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d6556:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d6558:	b510      	push	{r4, lr}
   d655a:	460b      	mov	r3, r1
   d655c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d655e:	d007      	beq.n	d6570 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6560:	6809      	ldr	r1, [r1, #0]
   d6562:	b119      	cbz	r1, d656c <_ZN6StringaSERKS_+0x16>
   d6564:	689a      	ldr	r2, [r3, #8]
   d6566:	f7ff ffae 	bl	d64c6 <_ZN6String4copyEPKcj>
   d656a:	e001      	b.n	d6570 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d656c:	f7ff ff83 	bl	d6476 <_ZN6String10invalidateEv>

	return *this;
}
   d6570:	4620      	mov	r0, r4
   d6572:	bd10      	pop	{r4, pc}

000d6574 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6574:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6576:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6578:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d657a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d657c:	6043      	str	r3, [r0, #4]
	len = 0;
   d657e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6580:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d6582:	f7ff ffe8 	bl	d6556 <_ZN6StringaSERKS_>
}
   d6586:	4620      	mov	r0, r4
   d6588:	bd10      	pop	{r4, pc}

000d658a <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d658a:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d658c:	b510      	push	{r4, lr}
   d658e:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d6590:	d001      	beq.n	d6596 <_ZN6StringaSEOS_+0xc>
   d6592:	f7ff ffc3 	bl	d651c <_ZN6String4moveERS_>
	return *this;
}
   d6596:	4620      	mov	r0, r4
   d6598:	bd10      	pop	{r4, pc}

000d659a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d659a:	b538      	push	{r3, r4, r5, lr}
   d659c:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d659e:	460c      	mov	r4, r1
   d65a0:	b141      	cbz	r1, d65b4 <_ZN6StringaSEPKc+0x1a>
   d65a2:	4608      	mov	r0, r1
   d65a4:	f001 fe23 	bl	d81ee <strlen>
   d65a8:	4621      	mov	r1, r4
   d65aa:	4602      	mov	r2, r0
   d65ac:	4628      	mov	r0, r5
   d65ae:	f7ff ff8a 	bl	d64c6 <_ZN6String4copyEPKcj>
   d65b2:	e001      	b.n	d65b8 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d65b4:	f7ff ff5f 	bl	d6476 <_ZN6String10invalidateEv>

	return *this;
}
   d65b8:	4628      	mov	r0, r5
   d65ba:	bd38      	pop	{r3, r4, r5, pc}

000d65bc <_ZN6StringC1Ejh>:
	char buf[34];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
   d65bc:	b510      	push	{r4, lr}
   d65be:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d65c0:	2300      	movs	r3, #0
	char buf[34];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
   d65c2:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d65c4:	6023      	str	r3, [r4, #0]
	capacity = 0;
   d65c6:	6063      	str	r3, [r4, #4]
	len = 0;
   d65c8:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d65ca:	7323      	strb	r3, [r4, #12]
	char buf[34];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
   d65cc:	4608      	mov	r0, r1
{
	init();
	char buf[33];
	utoa(value, buf, base);
   d65ce:	a901      	add	r1, sp, #4
   d65d0:	f000 fc8d 	bl	d6eee <utoa>
	*this = buf;
   d65d4:	a901      	add	r1, sp, #4
   d65d6:	4620      	mov	r0, r4
   d65d8:	f7ff ffdf 	bl	d659a <_ZN6StringaSEPKc>
}
   d65dc:	4620      	mov	r0, r4
   d65de:	b00a      	add	sp, #40	; 0x28
   d65e0:	bd10      	pop	{r4, pc}

000d65e2 <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d65e2:	b530      	push	{r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d65e4:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d65e6:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d65e8:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d65ea:	6043      	str	r3, [r0, #4]
	len = 0;
   d65ec:	6083      	str	r3, [r0, #8]
	flags = 0;
   d65ee:	7303      	strb	r3, [r0, #12]
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
   d65f0:	4604      	mov	r4, r0
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
   d65f2:	ee10 0a10 	vmov	r0, s0
   d65f6:	b2cd      	uxtb	r5, r1
   d65f8:	f001 f82c 	bl	d7654 <__aeabi_f2d>
   d65fc:	ec41 0b10 	vmov	d0, r0, r1
   d6600:	a901      	add	r1, sp, #4
   d6602:	4628      	mov	r0, r5
   d6604:	f7ff fecc 	bl	d63a0 <_Z4dtoadhPc>
        *this = buf;
   d6608:	a901      	add	r1, sp, #4
   d660a:	4620      	mov	r0, r4
   d660c:	f7ff ffc5 	bl	d659a <_ZN6StringaSEPKc>
}
   d6610:	4620      	mov	r0, r4
   d6612:	b00b      	add	sp, #44	; 0x2c
   d6614:	bd30      	pop	{r4, r5, pc}

000d6616 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d6616:	b570      	push	{r4, r5, r6, lr}
   d6618:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d661a:	460e      	mov	r6, r1
   d661c:	b909      	cbnz	r1, d6622 <_ZN6String6concatEPKcj+0xc>
   d661e:	2000      	movs	r0, #0
   d6620:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d6622:	b16a      	cbz	r2, d6640 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d6624:	6883      	ldr	r3, [r0, #8]
   d6626:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d6628:	4629      	mov	r1, r5
   d662a:	f7ff ff3b 	bl	d64a4 <_ZN6String7reserveEj>
   d662e:	2800      	cmp	r0, #0
   d6630:	d0f5      	beq.n	d661e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d6632:	6820      	ldr	r0, [r4, #0]
   d6634:	68a3      	ldr	r3, [r4, #8]
   d6636:	4631      	mov	r1, r6
   d6638:	4418      	add	r0, r3
   d663a:	f001 fdb4 	bl	d81a6 <strcpy>
	len = newlen;
   d663e:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d6640:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d6642:	bd70      	pop	{r4, r5, r6, pc}

000d6644 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d6644:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d6646:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d6648:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d664c:	2201      	movs	r2, #1
   d664e:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d6650:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d6654:	f7ff ffdf 	bl	d6616 <_ZN6String6concatEPKcj>
}
   d6658:	b003      	add	sp, #12
   d665a:	f85d fb04 	ldr.w	pc, [sp], #4

000d665e <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d665e:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d6660:	688a      	ldr	r2, [r1, #8]
   d6662:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d6664:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d6666:	f7ff ffd6 	bl	d6616 <_ZN6String6concatEPKcj>
   d666a:	b910      	cbnz	r0, d6672 <_ZplRK15StringSumHelperRK6String+0x14>
   d666c:	4620      	mov	r0, r4
   d666e:	f7ff ff02 	bl	d6476 <_ZN6String10invalidateEv>
	return a;
}
   d6672:	4620      	mov	r0, r4
   d6674:	bd10      	pop	{r4, pc}

000d6676 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d6676:	6883      	ldr	r3, [r0, #8]
   d6678:	428b      	cmp	r3, r1
   d667a:	d903      	bls.n	d6684 <_ZNK6StringixEj+0xe>
   d667c:	6800      	ldr	r0, [r0, #0]
   d667e:	b110      	cbz	r0, d6686 <_ZNK6StringixEj+0x10>
	return buffer[index];
   d6680:	5c40      	ldrb	r0, [r0, r1]
   d6682:	4770      	bx	lr
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d6684:	2000      	movs	r0, #0
	return buffer[index];
}
   d6686:	4770      	bx	lr

000d6688 <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
   d6688:	f7ff bff5 	b.w	d6676 <_ZNK6StringixEj>

000d668c <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d668c:	6800      	ldr	r0, [r0, #0]
   d668e:	b108      	cbz	r0, d6694 <_ZNK6String5toIntEv+0x8>
   d6690:	f001 bd2c 	b.w	d80ec <atol>
	return 0;
}
   d6694:	4770      	bx	lr
	...

000d6698 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d6698:	4b04      	ldr	r3, [pc, #16]	; (d66ac <_GLOBAL__sub_I_System+0x14>)
   d669a:	2000      	movs	r0, #0
   d669c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d66a0:	7018      	strb	r0, [r3, #0]
   d66a2:	8058      	strh	r0, [r3, #2]
   d66a4:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d66a6:	f7fe be5b 	b.w	d5360 <set_system_mode>
   d66aa:	bf00      	nop
   d66ac:	2003e5c4 	.word	0x2003e5c4

000d66b0 <_ZN9TCPClient5writeEh>:
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d66b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d66b2:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d66b4:	6803      	ldr	r3, [r0, #0]
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d66b6:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d66ba:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d66bc:	2201      	movs	r2, #1
   d66be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d66c2:	4621      	mov	r1, r4
   d66c4:	47a8      	blx	r5
}
   d66c6:	b003      	add	sp, #12
   d66c8:	bd30      	pop	{r4, r5, pc}

000d66ca <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d66ca:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d66cc:	6803      	ldr	r3, [r0, #0]
   d66ce:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d66d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d66d4:	46a4      	mov	ip, r4
}
   d66d6:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d66da:	4760      	bx	ip

000d66dc <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d66dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d66de:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d66e0:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d66e2:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d66e6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d66e8:	4621      	mov	r1, r4
   d66ea:	4613      	mov	r3, r2
   d66ec:	2201      	movs	r2, #1
   d66ee:	47a8      	blx	r5
}
   d66f0:	b003      	add	sp, #12
   d66f2:	bd30      	pop	{r4, r5, pc}

000d66f4 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d66f4:	4770      	bx	lr

000d66f6 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d66f6:	b538      	push	{r3, r4, r5, lr}
   d66f8:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d66fa:	681a      	ldr	r2, [r3, #0]
   d66fc:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d66fe:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d6700:	da05      	bge.n	d670e <_ZN9TCPClient9connectedEv+0x18>
   d6702:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6706:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d670a:	429a      	cmp	r2, r3
   d670c:	d001      	beq.n	d6712 <_ZN9TCPClient9connectedEv+0x1c>
   d670e:	2501      	movs	r5, #1
   d6710:	e00b      	b.n	d672a <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d6712:	6803      	ldr	r3, [r0, #0]
   d6714:	691b      	ldr	r3, [r3, #16]
   d6716:	4798      	blx	r3
   d6718:	2800      	cmp	r0, #0
   d671a:	bf14      	ite	ne
   d671c:	2501      	movne	r5, #1
   d671e:	2500      	moveq	r5, #0
        if (!rv) {
   d6720:	d103      	bne.n	d672a <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d6722:	6823      	ldr	r3, [r4, #0]
   d6724:	4620      	mov	r0, r4
   d6726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6728:	4798      	blx	r3
        }
    }
    return rv;
}
   d672a:	4628      	mov	r0, r5
   d672c:	bd38      	pop	{r3, r4, r5, pc}

000d672e <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d672e:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d6730:	6818      	ldr	r0, [r3, #0]
}
   d6732:	43c0      	mvns	r0, r0
   d6734:	0fc0      	lsrs	r0, r0, #31
   d6736:	4770      	bx	lr

000d6738 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6738:	4770      	bx	lr

000d673a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d673a:	2000      	movs	r0, #0
   d673c:	4770      	bx	lr

000d673e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d673e:	b510      	push	{r4, lr}
   d6740:	4604      	mov	r4, r0
   d6742:	f7fd fcaa 	bl	d409a <_ZdlPv>
   d6746:	4620      	mov	r0, r4
   d6748:	bd10      	pop	{r4, pc}

000d674a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d674a:	f7fd bca6 	b.w	d409a <_ZdlPv>
	...

000d6750 <_ZN9TCPClient7connectEPKctm>:
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6754:	4698      	mov	r8, r3
    stop();
   d6756:	6803      	ldr	r3, [r0, #0]
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6758:	b093      	sub	sp, #76	; 0x4c
    stop();
   d675a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d675c:	460c      	mov	r4, r1
   d675e:	4606      	mov	r6, r0
   d6760:	4617      	mov	r7, r2
    stop();
   d6762:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d6764:	ab12      	add	r3, sp, #72	; 0x48
   d6766:	2500      	movs	r5, #0
   d6768:	f843 5d48 	str.w	r5, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d676c:	462a      	mov	r2, r5
   d676e:	4629      	mov	r1, r5
   d6770:	4620      	mov	r0, r4
   d6772:	f7fe fd35 	bl	d51e0 <netdb_getaddrinfo>
   d6776:	2800      	cmp	r0, #0
   d6778:	db3a      	blt.n	d67f0 <_ZN9TCPClient7connectEPKctm+0xa0>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d677a:	9b00      	ldr	r3, [sp, #0]
   d677c:	2b00      	cmp	r3, #0
   d677e:	d039      	beq.n	d67f4 <_ZN9TCPClient7connectEPKctm+0xa4>
   d6780:	695b      	ldr	r3, [r3, #20]
   d6782:	2b00      	cmp	r3, #0
   d6784:	d036      	beq.n	d67f4 <_ZN9TCPClient7connectEPKctm+0xa4>
        IPAddress addr;
   d6786:	a806      	add	r0, sp, #24
   d6788:	f7ff fa4c 	bl	d5c24 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d678c:	9b00      	ldr	r3, [sp, #0]
   d678e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d6790:	7863      	ldrb	r3, [r4, #1]
   d6792:	2b02      	cmp	r3, #2
   d6794:	d101      	bne.n	d679a <_ZN9TCPClient7connectEPKctm+0x4a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d6796:	1d21      	adds	r1, r4, #4
   d6798:	e013      	b.n	d67c2 <_ZN9TCPClient7connectEPKctm+0x72>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d679a:	2b0a      	cmp	r3, #10
   d679c:	d114      	bne.n	d67c8 <_ZN9TCPClient7connectEPKctm+0x78>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d679e:	2211      	movs	r2, #17
   d67a0:	4629      	mov	r1, r5
   d67a2:	a801      	add	r0, sp, #4
   d67a4:	f001 fcbf 	bl	d8126 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d67a8:	68a3      	ldr	r3, [r4, #8]
   d67aa:	bb33      	cbnz	r3, d67fa <_ZN9TCPClient7connectEPKctm+0xaa>
   d67ac:	68e3      	ldr	r3, [r4, #12]
   d67ae:	bb23      	cbnz	r3, d67fa <_ZN9TCPClient7connectEPKctm+0xaa>
   d67b0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d67b4:	6925      	ldr	r5, [r4, #16]
   d67b6:	f7fe fcfb 	bl	d51b0 <inet_htonl>
   d67ba:	4285      	cmp	r5, r0
   d67bc:	d11d      	bne.n	d67fa <_ZN9TCPClient7connectEPKctm+0xaa>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d67be:	f104 0114 	add.w	r1, r4, #20
   d67c2:	a806      	add	r0, sp, #24
   d67c4:	f7ff fa71 	bl	d5caa <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d67c8:	a806      	add	r0, sp, #24
   d67ca:	f7ff fa4b 	bl	d5c64 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d67ce:	b188      	cbz	r0, d67f4 <_ZN9TCPClient7connectEPKctm+0xa4>
            return connect(addr, port, nif);
   d67d0:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d67d2:	ad07      	add	r5, sp, #28
   d67d4:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d67d8:	4b18      	ldr	r3, [pc, #96]	; (d683c <_ZN9TCPClient7connectEPKctm+0xec>)
   d67da:	930c      	str	r3, [sp, #48]	; 0x30
   d67dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d67de:	ac0d      	add	r4, sp, #52	; 0x34
   d67e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d67e2:	682b      	ldr	r3, [r5, #0]
   d67e4:	7023      	strb	r3, [r4, #0]
   d67e6:	463a      	mov	r2, r7
   d67e8:	4643      	mov	r3, r8
   d67ea:	a90c      	add	r1, sp, #48	; 0x30
   d67ec:	4630      	mov	r0, r6
   d67ee:	47c8      	blx	r9
   d67f0:	4604      	mov	r4, r0
   d67f2:	e01c      	b.n	d682e <_ZN9TCPClient7connectEPKctm+0xde>
        }
    }

    return -1;
   d67f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d67f8:	e019      	b.n	d682e <_ZN9TCPClient7connectEPKctm+0xde>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d67fa:	f104 0308 	add.w	r3, r4, #8
   d67fe:	ad01      	add	r5, sp, #4
   d6800:	3418      	adds	r4, #24
   d6802:	6818      	ldr	r0, [r3, #0]
   d6804:	6859      	ldr	r1, [r3, #4]
   d6806:	462a      	mov	r2, r5
   d6808:	c203      	stmia	r2!, {r0, r1}
   d680a:	3308      	adds	r3, #8
   d680c:	42a3      	cmp	r3, r4
   d680e:	4615      	mov	r5, r2
   d6810:	d1f7      	bne.n	d6802 <_ZN9TCPClient7connectEPKctm+0xb2>
            a.v = 6;
   d6812:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d6814:	a901      	add	r1, sp, #4
   d6816:	a80c      	add	r0, sp, #48	; 0x30
   d6818:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d681a:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d681e:	f7ff fa0f 	bl	d5c40 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6822:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6824:	ac07      	add	r4, sp, #28
   d6826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6828:	682b      	ldr	r3, [r5, #0]
   d682a:	7023      	strb	r3, [r4, #0]
   d682c:	e7cc      	b.n	d67c8 <_ZN9TCPClient7connectEPKctm+0x78>

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d682e:	9800      	ldr	r0, [sp, #0]
   d6830:	f7fe fcce 	bl	d51d0 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return -1;
}
   d6834:	4620      	mov	r0, r4
   d6836:	b013      	add	sp, #76	; 0x4c
   d6838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d683c:	000d8578 	.word	0x000d8578

000d6840 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d6840:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6842:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d6844:	2200      	movs	r2, #0
   d6846:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d6848:	9202      	str	r2, [sp, #8]
   d684a:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d684c:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d684e:	4604      	mov	r4, r0
   d6850:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d6852:	d008      	beq.n	d6866 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d6854:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6858:	fbb3 f1f2 	udiv	r1, r3, r2
   d685c:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d685e:	fb02 3111 	mls	r1, r2, r1, r3
   d6862:	434a      	muls	r2, r1
   d6864:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d6866:	6960      	ldr	r0, [r4, #20]
   d6868:	2308      	movs	r3, #8
   d686a:	9300      	str	r3, [sp, #0]
   d686c:	f241 0205 	movw	r2, #4101	; 0x1005
   d6870:	446b      	add	r3, sp
   d6872:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6876:	6800      	ldr	r0, [r0, #0]
   d6878:	f7fe fcba 	bl	d51f0 <sock_setsockopt>
    if (ret < 0) {
   d687c:	2800      	cmp	r0, #0
   d687e:	db08      	blt.n	d6892 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d6880:	6960      	ldr	r0, [r4, #20]
   d6882:	2300      	movs	r3, #0
   d6884:	4632      	mov	r2, r6
   d6886:	4629      	mov	r1, r5
   d6888:	6800      	ldr	r0, [r0, #0]
   d688a:	f7fe fcd1 	bl	d5230 <sock_send>
    if (ret < 0) {
   d688e:	2800      	cmp	r0, #0
   d6890:	da04      	bge.n	d689c <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d6892:	f7fe fe31 	bl	d54f8 <__errno>
   d6896:	6803      	ldr	r3, [r0, #0]
   d6898:	6063      	str	r3, [r4, #4]
   d689a:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d689c:	b004      	add	sp, #16
   d689e:	bd70      	pop	{r4, r5, r6, pc}

000d68a0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d68a0:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d68a2:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d68a4:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d68a6:	689b      	ldr	r3, [r3, #8]
   d68a8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d68aa:	68a3      	ldr	r3, [r4, #8]
   d68ac:	3b01      	subs	r3, #1
   d68ae:	60a3      	str	r3, [r4, #8]
   d68b0:	b92b      	cbnz	r3, d68be <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d68b2:	6823      	ldr	r3, [r4, #0]
   d68b4:	4620      	mov	r0, r4
   d68b6:	68db      	ldr	r3, [r3, #12]
        }
    }
   d68b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d68bc:	4718      	bx	r3
   d68be:	bd10      	pop	{r4, pc}

000d68c0 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d68c0:	b570      	push	{r4, r5, r6, lr}
   d68c2:	4604      	mov	r4, r0
   d68c4:	694d      	ldr	r5, [r1, #20]
   d68c6:	4b05      	ldr	r3, [pc, #20]	; (d68dc <_ZN9TCPClient8remoteIPEv+0x1c>)
   d68c8:	f844 3b04 	str.w	r3, [r4], #4
   d68cc:	358c      	adds	r5, #140	; 0x8c
   d68ce:	4606      	mov	r6, r0
   d68d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d68d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d68d4:	682b      	ldr	r3, [r5, #0]
   d68d6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d68d8:	4630      	mov	r0, r6
   d68da:	bd70      	pop	{r4, r5, r6, pc}
   d68dc:	000d8578 	.word	0x000d8578

000d68e0 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d68e0:	b510      	push	{r4, lr}
   d68e2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d68e4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d68e8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d68ec:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d68ee:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d68f0:	d005      	beq.n	d68fe <_ZN9TCPClient4peekEv+0x1e>
   d68f2:	6962      	ldr	r2, [r4, #20]
   d68f4:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d68f8:	4413      	add	r3, r2
   d68fa:	7918      	ldrb	r0, [r3, #4]
   d68fc:	bd10      	pop	{r4, pc}
   d68fe:	6803      	ldr	r3, [r0, #0]
   d6900:	691b      	ldr	r3, [r3, #16]
   d6902:	4798      	blx	r3
   d6904:	2800      	cmp	r0, #0
   d6906:	d1f4      	bne.n	d68f2 <_ZN9TCPClient4peekEv+0x12>
   d6908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d690c:	bd10      	pop	{r4, pc}

000d690e <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d690e:	b510      	push	{r4, lr}
   d6910:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d6912:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6916:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d691a:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d691c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d691e:	d008      	beq.n	d6932 <_ZN9TCPClient4readEv+0x24>
   d6920:	6962      	ldr	r2, [r4, #20]
   d6922:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6926:	1c59      	adds	r1, r3, #1
   d6928:	4413      	add	r3, r2
   d692a:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d692e:	7918      	ldrb	r0, [r3, #4]
   d6930:	bd10      	pop	{r4, pc}
   d6932:	6803      	ldr	r3, [r0, #0]
   d6934:	691b      	ldr	r3, [r3, #16]
   d6936:	4798      	blx	r3
   d6938:	2800      	cmp	r0, #0
   d693a:	d1f1      	bne.n	d6920 <_ZN9TCPClient4readEv+0x12>
   d693c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d6940:	bd10      	pop	{r4, pc}

000d6942 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d6942:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6944:	6943      	ldr	r3, [r0, #20]
   d6946:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d6948:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d694c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6950:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d6952:	4605      	mov	r5, r0
   d6954:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d6956:	d106      	bne.n	d6966 <_ZN9TCPClient4readEPhj+0x24>
   d6958:	6803      	ldr	r3, [r0, #0]
   d695a:	691b      	ldr	r3, [r3, #16]
   d695c:	4798      	blx	r3
   d695e:	b910      	cbnz	r0, d6966 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d6960:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d6964:	e014      	b.n	d6990 <_ZN9TCPClient4readEPhj+0x4e>
   d6966:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d6968:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d696c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d6970:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d6972:	42bc      	cmp	r4, r7
   d6974:	bf28      	it	cs
   d6976:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d6978:	4419      	add	r1, r3
   d697a:	4622      	mov	r2, r4
   d697c:	3104      	adds	r1, #4
   d697e:	4630      	mov	r0, r6
   d6980:	f001 fbc6 	bl	d8110 <memcpy>
   d6984:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d6986:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d698a:	4423      	add	r3, r4
   d698c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d6990:	4620      	mov	r0, r4
   d6992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6994 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d6994:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d6996:	2300      	movs	r3, #0
   d6998:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d699c:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d699e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d69a2:	4770      	bx	lr

000d69a4 <_ZN9TCPClient7connectE9IPAddresstm>:
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d69a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d69a8:	4698      	mov	r8, r3
    stop();
   d69aa:	6803      	ldr	r3, [r0, #0]
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d69ac:	460d      	mov	r5, r1
   d69ae:	b08a      	sub	sp, #40	; 0x28
    stop();
   d69b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d69b2:	4606      	mov	r6, r0
   d69b4:	4617      	mov	r7, r2
    stop();
   d69b6:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d69b8:	7d2b      	ldrb	r3, [r5, #20]
   d69ba:	6974      	ldr	r4, [r6, #20]
   d69bc:	2b04      	cmp	r3, #4
   d69be:	bf0c      	ite	eq
   d69c0:	2002      	moveq	r0, #2
   d69c2:	200a      	movne	r0, #10
   d69c4:	2206      	movs	r2, #6
   d69c6:	2101      	movs	r1, #1
   d69c8:	f7fe fc3a 	bl	d5240 <sock_socket>
   d69cc:	6020      	str	r0, [r4, #0]
    CHECK(d_->sock);
   d69ce:	6973      	ldr	r3, [r6, #20]
   d69d0:	681c      	ldr	r4, [r3, #0]
   d69d2:	2c00      	cmp	r4, #0
   d69d4:	db5b      	blt.n	d6a8e <_ZN9TCPClient7connectE9IPAddresstm+0xea>

    flush_buffer();
   d69d6:	4630      	mov	r0, r6
   d69d8:	f7ff ffdc 	bl	d6994 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d69dc:	f1b8 0f00 	cmp.w	r8, #0
   d69e0:	d017      	beq.n	d6a12 <_ZN9TCPClient7connectE9IPAddresstm+0x6e>
        struct ifreq ifr = {};
   d69e2:	2300      	movs	r3, #0
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d69e4:	a903      	add	r1, sp, #12
   d69e6:	fa5f f088 	uxtb.w	r0, r8
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d69ea:	9303      	str	r3, [sp, #12]
   d69ec:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d69f0:	f7fe fbce 	bl	d5190 <if_index_to_name>
   d69f4:	2800      	cmp	r0, #0
   d69f6:	db49      	blt.n	d6a8c <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
   d69f8:	6970      	ldr	r0, [r6, #20]
   d69fa:	2306      	movs	r3, #6
   d69fc:	9300      	str	r3, [sp, #0]
   d69fe:	f241 020b 	movw	r2, #4107	; 0x100b
   d6a02:	ab03      	add	r3, sp, #12
   d6a04:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6a08:	6800      	ldr	r0, [r0, #0]
   d6a0a:	f7fe fbf1 	bl	d51f0 <sock_setsockopt>
   d6a0e:	2800      	cmp	r0, #0
   d6a10:	db3c      	blt.n	d6a8c <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d6a12:	241c      	movs	r4, #28
   d6a14:	4622      	mov	r2, r4
   d6a16:	2100      	movs	r1, #0
   d6a18:	a803      	add	r0, sp, #12
   d6a1a:	f001 fb84 	bl	d8126 <memset>
    if (ip.version() == 4) {
   d6a1e:	7d2b      	ldrb	r3, [r5, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d6a20:	f88d 400c 	strb.w	r4, [sp, #12]
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d6a24:	2b04      	cmp	r3, #4
   d6a26:	d10c      	bne.n	d6a42 <_ZN9TCPClient7connectE9IPAddresstm+0x9e>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d6a28:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d6a2a:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d6a2c:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d6a30:	f7fe fbc6 	bl	d51c0 <inet_htons>
   d6a34:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d6a38:	6868      	ldr	r0, [r5, #4]
   d6a3a:	f7fe fbb9 	bl	d51b0 <inet_htonl>
   d6a3e:	9004      	str	r0, [sp, #16]
   d6a40:	e013      	b.n	d6a6a <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d6a42:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d6a44:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d6a46:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d6a4a:	f7fe fbb9 	bl	d51c0 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d6a4e:	ac05      	add	r4, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d6a50:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d6a54:	1d2b      	adds	r3, r5, #4
   d6a56:	f105 0714 	add.w	r7, r5, #20
   d6a5a:	6818      	ldr	r0, [r3, #0]
   d6a5c:	6859      	ldr	r1, [r3, #4]
   d6a5e:	4622      	mov	r2, r4
   d6a60:	c203      	stmia	r2!, {r0, r1}
   d6a62:	3308      	adds	r3, #8
   d6a64:	42bb      	cmp	r3, r7
   d6a66:	4614      	mov	r4, r2
   d6a68:	d1f7      	bne.n	d6a5a <_ZN9TCPClient7connectE9IPAddresstm+0xb6>
    }

    // FIXME: timeout?
    CHECK(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)));
   d6a6a:	6973      	ldr	r3, [r6, #20]
   d6a6c:	221c      	movs	r2, #28
   d6a6e:	a903      	add	r1, sp, #12
   d6a70:	6818      	ldr	r0, [r3, #0]
   d6a72:	f7fe fbcd 	bl	d5210 <sock_connect>
   d6a76:	2800      	cmp	r0, #0
   d6a78:	db08      	blt.n	d6a8c <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
   d6a7a:	1d2c      	adds	r4, r5, #4
   d6a7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6a7e:	6976      	ldr	r6, [r6, #20]
   d6a80:	368c      	adds	r6, #140	; 0x8c
   d6a82:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d6a84:	6823      	ldr	r3, [r4, #0]
   d6a86:	7033      	strb	r3, [r6, #0]

    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
   d6a88:	2401      	movs	r4, #1
   d6a8a:	e004      	b.n	d6a96 <_ZN9TCPClient7connectE9IPAddresstm+0xf2>
   d6a8c:	4604      	mov	r4, r0
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d6a8e:	6833      	ldr	r3, [r6, #0]
   d6a90:	4630      	mov	r0, r6
   d6a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6a94:	4798      	blx	r3
    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
}
   d6a96:	4620      	mov	r0, r4
   d6a98:	b00a      	add	sp, #40	; 0x28
   d6a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6a9e <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d6a9e:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d6aa0:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d6aa2:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d6aa4:	6818      	ldr	r0, [r3, #0]
   d6aa6:	2800      	cmp	r0, #0
   d6aa8:	db01      	blt.n	d6aae <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d6aaa:	f7fe fba9 	bl	d5200 <sock_close>
   d6aae:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d6ab0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d6ab4:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6ab6:	6960      	ldr	r0, [r4, #20]
   d6ab8:	2211      	movs	r2, #17
   d6aba:	2100      	movs	r1, #0
   d6abc:	308c      	adds	r0, #140	; 0x8c
   d6abe:	f001 fb32 	bl	d8126 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d6ac2:	4620      	mov	r0, r4
}
   d6ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d6ac8:	f7ff bf64 	b.w	d6994 <_ZN9TCPClient12flush_bufferEv>

000d6acc <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d6acc:	b530      	push	{r4, r5, lr}
   d6ace:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d6ad0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d6ad4:	b08b      	sub	sp, #44	; 0x2c
   d6ad6:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d6ad8:	b11b      	cbz	r3, d6ae2 <_ZN9TCPClient9availableEv+0x16>
   d6ada:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d6ade:	429a      	cmp	r2, r3
   d6ae0:	d040      	beq.n	d6b64 <_ZN9TCPClient9availableEv+0x98>
   d6ae2:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d6ae4:	6818      	ldr	r0, [r3, #0]
   d6ae6:	2800      	cmp	r0, #0
   d6ae8:	db3f      	blt.n	d6b6a <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d6aea:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d6aee:	2d7f      	cmp	r5, #127	; 0x7f
   d6af0:	d83b      	bhi.n	d6b6a <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d6af2:	1d19      	adds	r1, r3, #4
   d6af4:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d6af8:	2308      	movs	r3, #8
   d6afa:	4429      	add	r1, r5
   d6afc:	f7fe fb90 	bl	d5220 <sock_recv>
            if (ret > 0) {
   d6b00:	2800      	cmp	r0, #0
   d6b02:	dd0c      	ble.n	d6b1e <_ZN9TCPClient9availableEv+0x52>
   d6b04:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d6b06:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6b0a:	b90a      	cbnz	r2, d6b10 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d6b0c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d6b10:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d6b12:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d6b16:	4418      	add	r0, r3
   d6b18:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d6b1c:	e025      	b.n	d6b6a <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d6b1e:	f7fe fceb 	bl	d54f8 <__errno>
   d6b22:	6803      	ldr	r3, [r0, #0]
   d6b24:	2b0b      	cmp	r3, #11
   d6b26:	d020      	beq.n	d6b6a <_ZN9TCPClient9availableEv+0x9e>
   d6b28:	f7fe fce6 	bl	d54f8 <__errno>
   d6b2c:	6803      	ldr	r3, [r0, #0]
   d6b2e:	2b0b      	cmp	r3, #11
   d6b30:	d01b      	beq.n	d6b6a <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d6b32:	2320      	movs	r3, #32
   d6b34:	2500      	movs	r5, #0
   d6b36:	9302      	str	r3, [sp, #8]
   d6b38:	9503      	str	r5, [sp, #12]
   d6b3a:	f7fe fcdd 	bl	d54f8 <__errno>
   d6b3e:	6803      	ldr	r3, [r0, #0]
   d6b40:	9301      	str	r3, [sp, #4]
   d6b42:	4b0e      	ldr	r3, [pc, #56]	; (d6b7c <_ZN9TCPClient9availableEv+0xb0>)
   d6b44:	9300      	str	r3, [sp, #0]
   d6b46:	aa02      	add	r2, sp, #8
   d6b48:	462b      	mov	r3, r5
   d6b4a:	490d      	ldr	r1, [pc, #52]	; (d6b80 <_ZN9TCPClient9availableEv+0xb4>)
   d6b4c:	2032      	movs	r0, #50	; 0x32
   d6b4e:	f7fe fbff 	bl	d5350 <log_message>
                    sock_close(d_->sock);
   d6b52:	6963      	ldr	r3, [r4, #20]
   d6b54:	6818      	ldr	r0, [r3, #0]
   d6b56:	f7fe fb53 	bl	d5200 <sock_close>
   d6b5a:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d6b5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d6b60:	601a      	str	r2, [r3, #0]
   d6b62:	e002      	b.n	d6b6a <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d6b64:	f7ff ff16 	bl	d6994 <_ZN9TCPClient12flush_bufferEv>
   d6b68:	e7bb      	b.n	d6ae2 <_ZN9TCPClient9availableEv+0x16>
   d6b6a:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d6b6c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d6b70:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d6b74:	1a18      	subs	r0, r3, r0
}
   d6b76:	b00b      	add	sp, #44	; 0x2c
   d6b78:	bd30      	pop	{r4, r5, pc}
   d6b7a:	bf00      	nop
   d6b7c:	000d8757 	.word	0x000d8757
   d6b80:	000d8750 	.word	0x000d8750

000d6b84 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d6b84:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d6b86:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d6b88:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d6b8a:	6001      	str	r1, [r0, #0]
   d6b8c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d6b90:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d6b94:	3088      	adds	r0, #136	; 0x88
   d6b96:	f7ff f845 	bl	d5c24 <_ZN9IPAddressC1Ev>
}
   d6b9a:	4620      	mov	r0, r4
   d6b9c:	bd10      	pop	{r4, pc}
	...

000d6ba0 <_ZN9TCPClientC1Ei>:
   d6ba0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d6ba4:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6ba6:	2300      	movs	r3, #0
   d6ba8:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d6baa:	4a14      	ldr	r2, [pc, #80]	; (d6bfc <_ZN9TCPClientC1Ei+0x5c>)
   d6bac:	6043      	str	r3, [r0, #4]
   d6bae:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6bb0:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6bb2:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d6bb4:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6bb6:	20a0      	movs	r0, #160	; 0xa0
   d6bb8:	460e      	mov	r6, r1
   d6bba:	f7fd fa6c 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6bbe:	4605      	mov	r5, r0
   d6bc0:	b110      	cbz	r0, d6bc8 <_ZN9TCPClientC1Ei+0x28>
   d6bc2:	4631      	mov	r1, r6
   d6bc4:	f7ff ffde 	bl	d6b84 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6bc8:	2014      	movs	r0, #20
   d6bca:	f7fd fa64 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6bce:	4603      	mov	r3, r0
   d6bd0:	b128      	cbz	r0, d6bde <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6bd2:	2201      	movs	r2, #1
   d6bd4:	6042      	str	r2, [r0, #4]
   d6bd6:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6bd8:	4a09      	ldr	r2, [pc, #36]	; (d6c00 <_ZN9TCPClientC1Ei+0x60>)
   d6bda:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6bdc:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6bde:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6be0:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6be2:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d6be4:	b128      	cbz	r0, d6bf2 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d6be6:	6843      	ldr	r3, [r0, #4]
   d6be8:	3b01      	subs	r3, #1
   d6bea:	6043      	str	r3, [r0, #4]
   d6bec:	b90b      	cbnz	r3, d6bf2 <_ZN9TCPClientC1Ei+0x52>
   d6bee:	f7ff fe57 	bl	d68a0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d6bf2:	4620      	mov	r0, r4
   d6bf4:	f7ff fece 	bl	d6994 <_ZN9TCPClient12flush_bufferEv>
}
   d6bf8:	4620      	mov	r0, r4
   d6bfa:	bd70      	pop	{r4, r5, r6, pc}
   d6bfc:	000d870c 	.word	0x000d870c
   d6c00:	000d86f0 	.word	0x000d86f0

000d6c04 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d6c04:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d6c06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d6c0a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d6c0c:	f7ff ffc8 	bl	d6ba0 <_ZN9TCPClientC1Ei>
}
   d6c10:	4620      	mov	r0, r4
   d6c12:	bd10      	pop	{r4, pc}

000d6c14 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d6c14:	b510      	push	{r4, lr}
   d6c16:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d6c18:	6800      	ldr	r0, [r0, #0]
   d6c1a:	2800      	cmp	r0, #0
   d6c1c:	db01      	blt.n	d6c22 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d6c1e:	f7fe faef 	bl	d5200 <sock_close>
    }
}
   d6c22:	4620      	mov	r0, r4
   d6c24:	bd10      	pop	{r4, pc}

000d6c26 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6c26:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6c28:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d6c2a:	4620      	mov	r0, r4
   d6c2c:	f7ff fff2 	bl	d6c14 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d6c30:	b124      	cbz	r4, d6c3c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6c32:	4620      	mov	r0, r4
   d6c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6c38:	f7fd ba2f 	b.w	d409a <_ZdlPv>
   d6c3c:	bd10      	pop	{r4, pc}
	...

000d6c40 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6c40:	4b02      	ldr	r3, [pc, #8]	; (d6c4c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6c42:	681a      	ldr	r2, [r3, #0]
   d6c44:	4b02      	ldr	r3, [pc, #8]	; (d6c50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6c46:	601a      	str	r2, [r3, #0]
   d6c48:	4770      	bx	lr
   d6c4a:	bf00      	nop
   d6c4c:	2003e1fc 	.word	0x2003e1fc
   d6c50:	2003e5cc 	.word	0x2003e5cc

000d6c54 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6c54:	4770      	bx	lr

000d6c56 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6c56:	7441      	strb	r1, [r0, #17]
   d6c58:	4770      	bx	lr

000d6c5a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d6c5a:	7c00      	ldrb	r0, [r0, #16]
   d6c5c:	f7fe bb40 	b.w	d52e0 <HAL_USART_Available_Data_For_Write>

000d6c60 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d6c60:	7c00      	ldrb	r0, [r0, #16]
   d6c62:	f7fe bb15 	b.w	d5290 <HAL_USART_Available_Data>

000d6c66 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d6c66:	7c00      	ldrb	r0, [r0, #16]
   d6c68:	f7fe bb22 	b.w	d52b0 <HAL_USART_Peek_Data>

000d6c6c <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d6c6c:	7c00      	ldrb	r0, [r0, #16]
   d6c6e:	f7fe bb17 	b.w	d52a0 <HAL_USART_Read_Data>

000d6c72 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6c72:	7c00      	ldrb	r0, [r0, #16]
   d6c74:	f7fe bb24 	b.w	d52c0 <HAL_USART_Flush_Data>

000d6c78 <_ZN11USARTSerialD0Ev>:
   d6c78:	b510      	push	{r4, lr}
   d6c7a:	4604      	mov	r4, r0
   d6c7c:	f7fd fa0d 	bl	d409a <_ZdlPv>
   d6c80:	4620      	mov	r0, r4
   d6c82:	bd10      	pop	{r4, pc}

000d6c84 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6c84:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6c86:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6c88:	4604      	mov	r4, r0
   d6c8a:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6c8c:	b925      	cbnz	r5, d6c98 <_ZN11USARTSerial5writeEh+0x14>
   d6c8e:	7c00      	ldrb	r0, [r0, #16]
   d6c90:	f7fe fb26 	bl	d52e0 <HAL_USART_Available_Data_For_Write>
   d6c94:	2800      	cmp	r0, #0
   d6c96:	dd05      	ble.n	d6ca4 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6c98:	4631      	mov	r1, r6
   d6c9a:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6c9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6ca0:	f7fe baee 	b.w	d5280 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6ca4:	4628      	mov	r0, r5
   d6ca6:	bd70      	pop	{r4, r5, r6, pc}

000d6ca8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6ca8:	b510      	push	{r4, lr}
   d6caa:	4604      	mov	r4, r0
   d6cac:	4608      	mov	r0, r1
   d6cae:	4611      	mov	r1, r2
   d6cb0:	2200      	movs	r2, #0
   d6cb2:	6062      	str	r2, [r4, #4]
   d6cb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6cb8:	60a2      	str	r2, [r4, #8]
   d6cba:	4a05      	ldr	r2, [pc, #20]	; (d6cd0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6cbc:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6cbe:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6cc0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6cc2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6cc4:	461a      	mov	r2, r3
   d6cc6:	f7fe fad3 	bl	d5270 <HAL_USART_Init>
}
   d6cca:	4620      	mov	r0, r4
   d6ccc:	bd10      	pop	{r4, pc}
   d6cce:	bf00      	nop
   d6cd0:	000d8798 	.word	0x000d8798

000d6cd4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6cd4:	7c00      	ldrb	r0, [r0, #16]
   d6cd6:	f7fe bafb 	b.w	d52d0 <HAL_USART_Is_Enabled>
	...

000d6cdc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6cdc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6cde:	4d0c      	ldr	r5, [pc, #48]	; (d6d10 <_Z22__fetch_global_Serial1v+0x34>)
   d6ce0:	6829      	ldr	r1, [r5, #0]
   d6ce2:	f011 0401 	ands.w	r4, r1, #1
   d6ce6:	d111      	bne.n	d6d0c <_Z22__fetch_global_Serial1v+0x30>
   d6ce8:	4628      	mov	r0, r5
   d6cea:	f7fd f9da 	bl	d40a2 <__cxa_guard_acquire>
   d6cee:	b168      	cbz	r0, d6d0c <_Z22__fetch_global_Serial1v+0x30>
   d6cf0:	4a08      	ldr	r2, [pc, #32]	; (d6d14 <_Z22__fetch_global_Serial1v+0x38>)
   d6cf2:	4b09      	ldr	r3, [pc, #36]	; (d6d18 <_Z22__fetch_global_Serial1v+0x3c>)
   d6cf4:	4809      	ldr	r0, [pc, #36]	; (d6d1c <_Z22__fetch_global_Serial1v+0x40>)
   d6cf6:	4621      	mov	r1, r4
   d6cf8:	f7ff ffd6 	bl	d6ca8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6cfc:	4628      	mov	r0, r5
   d6cfe:	f7fd f9d5 	bl	d40ac <__cxa_guard_release>
   d6d02:	4a07      	ldr	r2, [pc, #28]	; (d6d20 <_Z22__fetch_global_Serial1v+0x44>)
   d6d04:	4907      	ldr	r1, [pc, #28]	; (d6d24 <_Z22__fetch_global_Serial1v+0x48>)
   d6d06:	4805      	ldr	r0, [pc, #20]	; (d6d1c <_Z22__fetch_global_Serial1v+0x40>)
   d6d08:	f000 f9f0 	bl	d70ec <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6d0c:	4803      	ldr	r0, [pc, #12]	; (d6d1c <_Z22__fetch_global_Serial1v+0x40>)
   d6d0e:	bd38      	pop	{r3, r4, r5, pc}
   d6d10:	2003e668 	.word	0x2003e668
   d6d14:	2003e66c 	.word	0x2003e66c
   d6d18:	2003e5e4 	.word	0x2003e5e4
   d6d1c:	2003e5d0 	.word	0x2003e5d0
   d6d20:	2003e268 	.word	0x2003e268
   d6d24:	000d6c55 	.word	0x000d6c55

000d6d28 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6d28:	7441      	strb	r1, [r0, #17]
   d6d2a:	4770      	bx	lr

000d6d2c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6d2c:	4770      	bx	lr

000d6d2e <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d6d2e:	2100      	movs	r1, #0
   d6d30:	7c00      	ldrb	r0, [r0, #16]
   d6d32:	f7fe baf5 	b.w	d5320 <HAL_USB_USART_Receive_Data>

000d6d36 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d6d36:	2101      	movs	r1, #1
   d6d38:	7c00      	ldrb	r0, [r0, #16]
   d6d3a:	f7fe baf1 	b.w	d5320 <HAL_USB_USART_Receive_Data>

000d6d3e <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d6d3e:	7c00      	ldrb	r0, [r0, #16]
   d6d40:	f7fe bae6 	b.w	d5310 <HAL_USB_USART_Available_Data_For_Write>

000d6d44 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d6d44:	7c00      	ldrb	r0, [r0, #16]
   d6d46:	f7fe badb 	b.w	d5300 <HAL_USB_USART_Available_Data>

000d6d4a <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d6d4a:	b538      	push	{r3, r4, r5, lr}
   d6d4c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6d4e:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d6d50:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6d52:	f7fe fadd 	bl	d5310 <HAL_USB_USART_Available_Data_For_Write>
   d6d56:	2800      	cmp	r0, #0
   d6d58:	dc01      	bgt.n	d6d5e <_ZN9USBSerial5writeEh+0x14>
   d6d5a:	7c60      	ldrb	r0, [r4, #17]
   d6d5c:	b120      	cbz	r0, d6d68 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d6d5e:	4629      	mov	r1, r5
   d6d60:	7c20      	ldrb	r0, [r4, #16]
   d6d62:	f7fe fae5 	bl	d5330 <HAL_USB_USART_Send_Data>
    return 1;
   d6d66:	2001      	movs	r0, #1
  }
  return 0;
}
   d6d68:	bd38      	pop	{r3, r4, r5, pc}

000d6d6a <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6d6a:	7c00      	ldrb	r0, [r0, #16]
   d6d6c:	f7fe bae8 	b.w	d5340 <HAL_USB_USART_Flush_Data>

000d6d70 <_ZN9USBSerialD0Ev>:
   d6d70:	b510      	push	{r4, lr}
   d6d72:	4604      	mov	r4, r0
   d6d74:	f7fd f991 	bl	d409a <_ZdlPv>
   d6d78:	4620      	mov	r0, r4
   d6d7a:	bd10      	pop	{r4, pc}

000d6d7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6d7c:	b510      	push	{r4, lr}
   d6d7e:	4604      	mov	r4, r0
   d6d80:	2300      	movs	r3, #0
   d6d82:	6063      	str	r3, [r4, #4]
   d6d84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6d88:	60a3      	str	r3, [r4, #8]
   d6d8a:	4b05      	ldr	r3, [pc, #20]	; (d6da0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6d8c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6d8e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6d90:	4608      	mov	r0, r1
{
  _serial = serial;
   d6d92:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6d94:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6d96:	4611      	mov	r1, r2
   d6d98:	f7fe faaa 	bl	d52f0 <HAL_USB_USART_Init>
}
   d6d9c:	4620      	mov	r0, r4
   d6d9e:	bd10      	pop	{r4, pc}
   d6da0:	000d87c8 	.word	0x000d87c8

000d6da4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6da4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6da6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6da8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6daa:	2100      	movs	r1, #0
   d6dac:	f001 f9bb 	bl	d8126 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6db0:	4620      	mov	r0, r4
   d6db2:	bd10      	pop	{r4, pc}

000d6db4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6db4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6db6:	4d0e      	ldr	r5, [pc, #56]	; (d6df0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6db8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6dba:	a801      	add	r0, sp, #4
   d6dbc:	f7ff fff2 	bl	d6da4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6dc0:	6829      	ldr	r1, [r5, #0]
   d6dc2:	f011 0401 	ands.w	r4, r1, #1
   d6dc6:	d110      	bne.n	d6dea <_Z16_fetch_usbserialv+0x36>
   d6dc8:	4628      	mov	r0, r5
   d6dca:	f7fd f96a 	bl	d40a2 <__cxa_guard_acquire>
   d6dce:	b160      	cbz	r0, d6dea <_Z16_fetch_usbserialv+0x36>
   d6dd0:	aa01      	add	r2, sp, #4
   d6dd2:	4621      	mov	r1, r4
   d6dd4:	4807      	ldr	r0, [pc, #28]	; (d6df4 <_Z16_fetch_usbserialv+0x40>)
   d6dd6:	f7ff ffd1 	bl	d6d7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6dda:	4628      	mov	r0, r5
   d6ddc:	f7fd f966 	bl	d40ac <__cxa_guard_release>
   d6de0:	4a05      	ldr	r2, [pc, #20]	; (d6df8 <_Z16_fetch_usbserialv+0x44>)
   d6de2:	4906      	ldr	r1, [pc, #24]	; (d6dfc <_Z16_fetch_usbserialv+0x48>)
   d6de4:	4803      	ldr	r0, [pc, #12]	; (d6df4 <_Z16_fetch_usbserialv+0x40>)
   d6de6:	f000 f981 	bl	d70ec <__aeabi_atexit>
	return _usbserial;
}
   d6dea:	4802      	ldr	r0, [pc, #8]	; (d6df4 <_Z16_fetch_usbserialv+0x40>)
   d6dec:	b007      	add	sp, #28
   d6dee:	bd30      	pop	{r4, r5, pc}
   d6df0:	2003e6f0 	.word	0x2003e6f0
   d6df4:	2003e6f4 	.word	0x2003e6f4
   d6df8:	2003e268 	.word	0x2003e268
   d6dfc:	000d6d2d 	.word	0x000d6d2d

000d6e00 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6e00:	2200      	movs	r2, #0
   d6e02:	4611      	mov	r1, r2
   d6e04:	6840      	ldr	r0, [r0, #4]
   d6e06:	f7fe bb07 	b.w	d5418 <network_ready>

000d6e0a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6e0a:	2200      	movs	r2, #0
   d6e0c:	4611      	mov	r1, r2
   d6e0e:	6840      	ldr	r0, [r0, #4]
   d6e10:	f7fe bb22 	b.w	d5458 <network_listening>

000d6e14 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6e14:	2200      	movs	r2, #0
   d6e16:	4611      	mov	r1, r2
   d6e18:	6840      	ldr	r0, [r0, #4]
   d6e1a:	f7fe bb2d 	b.w	d5478 <network_get_listen_timeout>

000d6e1e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6e1e:	2200      	movs	r2, #0
   d6e20:	6840      	ldr	r0, [r0, #4]
   d6e22:	f7fe bb21 	b.w	d5468 <network_set_listen_timeout>

000d6e26 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6e26:	2200      	movs	r2, #0
   d6e28:	f081 0101 	eor.w	r1, r1, #1
   d6e2c:	6840      	ldr	r0, [r0, #4]
   d6e2e:	f7fe bb0b 	b.w	d5448 <network_listen>

000d6e32 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d6e32:	2300      	movs	r3, #0
   d6e34:	461a      	mov	r2, r3
   d6e36:	4619      	mov	r1, r3
   d6e38:	6840      	ldr	r0, [r0, #4]
   d6e3a:	f7fe bafd 	b.w	d5438 <network_off>

000d6e3e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6e3e:	2300      	movs	r3, #0
   d6e40:	461a      	mov	r2, r3
   d6e42:	4619      	mov	r1, r3
   d6e44:	6840      	ldr	r0, [r0, #4]
   d6e46:	f7fe baef 	b.w	d5428 <network_on>

000d6e4a <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6e4a:	2200      	movs	r2, #0
   d6e4c:	4611      	mov	r1, r2
   d6e4e:	6840      	ldr	r0, [r0, #4]
   d6e50:	f7fe bad2 	b.w	d53f8 <network_connecting>

000d6e54 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6e54:	2200      	movs	r2, #0
   d6e56:	2102      	movs	r1, #2
   d6e58:	6840      	ldr	r0, [r0, #4]
   d6e5a:	f7fe bad5 	b.w	d5408 <network_disconnect>

000d6e5e <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6e5e:	2300      	movs	r3, #0
   d6e60:	461a      	mov	r2, r3
   d6e62:	6840      	ldr	r0, [r0, #4]
   d6e64:	f7fe bac0 	b.w	d53e8 <network_connect>

000d6e68 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6e68:	4b02      	ldr	r3, [pc, #8]	; (d6e74 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6e6a:	2204      	movs	r2, #4
   d6e6c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6e6e:	4a02      	ldr	r2, [pc, #8]	; (d6e78 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6e70:	601a      	str	r2, [r3, #0]
   d6e72:	4770      	bx	lr
   d6e74:	2003e708 	.word	0x2003e708
   d6e78:	000d87f8 	.word	0x000d87f8

000d6e7c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d6e7c:	b510      	push	{r4, lr}
   d6e7e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d6e80:	f001 f9b5 	bl	d81ee <strlen>
   d6e84:	3801      	subs	r0, #1
   d6e86:	1823      	adds	r3, r4, r0
   d6e88:	4620      	mov	r0, r4
	while(i<j){
   d6e8a:	4298      	cmp	r0, r3
   d6e8c:	d206      	bcs.n	d6e9c <_Z11str_reversePc+0x20>
		c = *i;
   d6e8e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d6e90:	7819      	ldrb	r1, [r3, #0]
   d6e92:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d6e96:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d6e9a:	e7f6      	b.n	d6e8a <_Z11str_reversePc+0xe>
   d6e9c:	bd10      	pop	{r4, pc}

000d6e9e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d6e9e:	b570      	push	{r4, r5, r6, lr}
   d6ea0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d6ea2:	1e91      	subs	r1, r2, #2
   d6ea4:	2922      	cmp	r1, #34	; 0x22
   d6ea6:	d820      	bhi.n	d6eea <ultoa+0x4c>
   d6ea8:	4625      	mov	r5, r4
   d6eaa:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d6eac:	b910      	cbnz	r0, d6eb4 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d6eae:	4423      	add	r3, r4
            *ptr++ = '0';
   d6eb0:	2230      	movs	r2, #48	; 0x30
   d6eb2:	e00e      	b.n	d6ed2 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d6eb4:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d6eb8:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d6ebc:	b2c1      	uxtb	r1, r0
   d6ebe:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d6ec2:	2809      	cmp	r0, #9
                *ptr += '0';
   d6ec4:	bf94      	ite	ls
   d6ec6:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d6ec8:	3157      	addhi	r1, #87	; 0x57
   d6eca:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d6ece:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d6ed0:	e7eb      	b.n	d6eaa <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d6ed2:	4299      	cmp	r1, r3
   d6ed4:	d202      	bcs.n	d6edc <ultoa+0x3e>
            *ptr++ = '0';
   d6ed6:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d6eda:	e7fa      	b.n	d6ed2 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d6edc:	2300      	movs	r3, #0
	str_reverse(buffer);
   d6ede:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d6ee0:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d6ee2:	f7ff ffcb 	bl	d6e7c <_Z11str_reversePc>
	return buffer;
   d6ee6:	4620      	mov	r0, r4
   d6ee8:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d6eea:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d6eec:	bd70      	pop	{r4, r5, r6, pc}

000d6eee <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   d6eee:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   d6ef0:	2301      	movs	r3, #1
   d6ef2:	f7ff ffd4 	bl	d6e9e <ultoa>
}
   d6ef6:	bd08      	pop	{r3, pc}

000d6ef8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6ef8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6efa:	4b0c      	ldr	r3, [pc, #48]	; (d6f2c <serialEventRun+0x34>)
   d6efc:	b133      	cbz	r3, d6f0c <serialEventRun+0x14>
   d6efe:	f7ff ff59 	bl	d6db4 <_Z16_fetch_usbserialv>
   d6f02:	6803      	ldr	r3, [r0, #0]
   d6f04:	691b      	ldr	r3, [r3, #16]
   d6f06:	4798      	blx	r3
   d6f08:	2800      	cmp	r0, #0
   d6f0a:	dc09      	bgt.n	d6f20 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6f0c:	4b08      	ldr	r3, [pc, #32]	; (d6f30 <serialEventRun+0x38>)
   d6f0e:	b163      	cbz	r3, d6f2a <serialEventRun+0x32>
   d6f10:	f7ff fee4 	bl	d6cdc <_Z22__fetch_global_Serial1v>
   d6f14:	6803      	ldr	r3, [r0, #0]
   d6f16:	691b      	ldr	r3, [r3, #16]
   d6f18:	4798      	blx	r3
   d6f1a:	2800      	cmp	r0, #0
   d6f1c:	dc03      	bgt.n	d6f26 <serialEventRun+0x2e>
   d6f1e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6f20:	f3af 8000 	nop.w
   d6f24:	e7f2      	b.n	d6f0c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6f26:	f3af 8000 	nop.w
   d6f2a:	bd08      	pop	{r3, pc}
	...

000d6f34 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6f34:	b508      	push	{r3, lr}
	serialEventRun();
   d6f36:	f7ff ffdf 	bl	d6ef8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6f3a:	f7fe f8a9 	bl	d5090 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6f3e:	4b01      	ldr	r3, [pc, #4]	; (d6f44 <_post_loop+0x10>)
   d6f40:	6018      	str	r0, [r3, #0]
   d6f42:	bd08      	pop	{r3, pc}
   d6f44:	2003e714 	.word	0x2003e714

000d6f48 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6f48:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6f4a:	2300      	movs	r3, #0
   d6f4c:	9300      	str	r3, [sp, #0]
   d6f4e:	461a      	mov	r2, r3
   d6f50:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6f54:	f7fe fa2e 	bl	d53b4 <system_ctrl_set_result>
}
   d6f58:	b003      	add	sp, #12
   d6f5a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6f60 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6f60:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6f62:	8843      	ldrh	r3, [r0, #2]
   d6f64:	2b0a      	cmp	r3, #10
   d6f66:	d008      	beq.n	d6f7a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6f68:	2b50      	cmp	r3, #80	; 0x50
   d6f6a:	d109      	bne.n	d6f80 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6f6c:	4b09      	ldr	r3, [pc, #36]	; (d6f94 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6f6e:	681b      	ldr	r3, [r3, #0]
   d6f70:	b13b      	cbz	r3, d6f82 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6f72:	b003      	add	sp, #12
   d6f74:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6f78:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6f7a:	f7ff ffe5 	bl	d6f48 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6f7e:	e006      	b.n	d6f8e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6f80:	2300      	movs	r3, #0
   d6f82:	9300      	str	r3, [sp, #0]
   d6f84:	461a      	mov	r2, r3
   d6f86:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6f8a:	f7fe fa13 	bl	d53b4 <system_ctrl_set_result>
        break;
    }
}
   d6f8e:	b003      	add	sp, #12
   d6f90:	f85d fb04 	ldr.w	pc, [sp], #4
   d6f94:	2003e710 	.word	0x2003e710

000d6f98 <module_user_init_hook>:

void module_user_init_hook()
{
   d6f98:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6f9a:	f7fe f871 	bl	d5080 <HAL_RNG_GetRandomNumber>
   d6f9e:	4604      	mov	r4, r0
    srand(seed);
   d6fa0:	f001 f8ca 	bl	d8138 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6fa4:	4b07      	ldr	r3, [pc, #28]	; (d6fc4 <module_user_init_hook+0x2c>)
   d6fa6:	b113      	cbz	r3, d6fae <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d6fa8:	4620      	mov	r0, r4
   d6faa:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6fae:	2100      	movs	r1, #0
   d6fb0:	4804      	ldr	r0, [pc, #16]	; (d6fc4 <module_user_init_hook+0x2c>)
   d6fb2:	f7fe fa11 	bl	d53d8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6fb6:	2100      	movs	r1, #0
   d6fb8:	4803      	ldr	r0, [pc, #12]	; (d6fc8 <module_user_init_hook+0x30>)
}
   d6fba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6fbe:	f7fe b9ef 	b.w	d53a0 <system_ctrl_set_app_request_handler>
   d6fc2:	bf00      	nop
   d6fc4:	00000000 	.word	0x00000000
   d6fc8:	000d6f61 	.word	0x000d6f61

000d6fcc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6fcc:	b510      	push	{r4, lr}
   d6fce:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6fd0:	480f      	ldr	r0, [pc, #60]	; (d7010 <pinAvailable+0x44>)
   d6fd2:	f7ff f91d 	bl	d6210 <_ZN8SPIClass9isEnabledEv>
   d6fd6:	b128      	cbz	r0, d6fe4 <pinAvailable+0x18>
   d6fd8:	f1a4 030b 	sub.w	r3, r4, #11
   d6fdc:	2b02      	cmp	r3, #2
   d6fde:	d801      	bhi.n	d6fe4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d6fe0:	2000      	movs	r0, #0
   d6fe2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6fe4:	f000 f840 	bl	d7068 <_Z19__fetch_global_Wirev>
   d6fe8:	f7fe fddf 	bl	d5baa <_ZN7TwoWire9isEnabledEv>
   d6fec:	b108      	cbz	r0, d6ff2 <pinAvailable+0x26>
   d6fee:	2c01      	cmp	r4, #1
   d6ff0:	d9f6      	bls.n	d6fe0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6ff2:	f7ff fe73 	bl	d6cdc <_Z22__fetch_global_Serial1v>
   d6ff6:	f7ff fe6d 	bl	d6cd4 <_ZN11USARTSerial9isEnabledEv>
   d6ffa:	b118      	cbz	r0, d7004 <pinAvailable+0x38>
   d6ffc:	f1a4 0309 	sub.w	r3, r4, #9
   d7000:	2b01      	cmp	r3, #1
   d7002:	d9ed      	bls.n	d6fe0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d7004:	2c23      	cmp	r4, #35	; 0x23
   d7006:	bf8c      	ite	hi
   d7008:	2000      	movhi	r0, #0
   d700a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d700c:	bd10      	pop	{r4, pc}
   d700e:	bf00      	nop
   d7010:	2003e730 	.word	0x2003e730

000d7014 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7014:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d7016:	b538      	push	{r3, r4, r5, lr}
   d7018:	4604      	mov	r4, r0
   d701a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d701c:	d80a      	bhi.n	d7034 <pinMode+0x20>
   d701e:	29ff      	cmp	r1, #255	; 0xff
   d7020:	d008      	beq.n	d7034 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7022:	f7ff ffd3 	bl	d6fcc <pinAvailable>
   d7026:	b128      	cbz	r0, d7034 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7028:	4629      	mov	r1, r5
   d702a:	4620      	mov	r0, r4
}
   d702c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7030:	f7fe b83e 	b.w	d50b0 <HAL_Pin_Mode>
   d7034:	bd38      	pop	{r3, r4, r5, pc}

000d7036 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7036:	b538      	push	{r3, r4, r5, lr}
   d7038:	4604      	mov	r4, r0
   d703a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d703c:	f7fe f840 	bl	d50c0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7040:	28ff      	cmp	r0, #255	; 0xff
   d7042:	d010      	beq.n	d7066 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7044:	2806      	cmp	r0, #6
   d7046:	d804      	bhi.n	d7052 <digitalWrite+0x1c>
   d7048:	234d      	movs	r3, #77	; 0x4d
   d704a:	fa23 f000 	lsr.w	r0, r3, r0
   d704e:	07c3      	lsls	r3, r0, #31
   d7050:	d409      	bmi.n	d7066 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7052:	4620      	mov	r0, r4
   d7054:	f7ff ffba 	bl	d6fcc <pinAvailable>
   d7058:	b128      	cbz	r0, d7066 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d705a:	4629      	mov	r1, r5
   d705c:	4620      	mov	r0, r4
}
   d705e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7062:	f7fe b835 	b.w	d50d0 <HAL_GPIO_Write>
   d7066:	bd38      	pop	{r3, r4, r5, pc}

000d7068 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d7068:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d706a:	4d0b      	ldr	r5, [pc, #44]	; (d7098 <_Z19__fetch_global_Wirev+0x30>)
   d706c:	6829      	ldr	r1, [r5, #0]
   d706e:	f011 0401 	ands.w	r4, r1, #1
   d7072:	d10f      	bne.n	d7094 <_Z19__fetch_global_Wirev+0x2c>
   d7074:	4628      	mov	r0, r5
   d7076:	f7fd f814 	bl	d40a2 <__cxa_guard_acquire>
   d707a:	b158      	cbz	r0, d7094 <_Z19__fetch_global_Wirev+0x2c>
   d707c:	4621      	mov	r1, r4
   d707e:	4807      	ldr	r0, [pc, #28]	; (d709c <_Z19__fetch_global_Wirev+0x34>)
   d7080:	f7fe fd64 	bl	d5b4c <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d7084:	4628      	mov	r0, r5
   d7086:	f7fd f811 	bl	d40ac <__cxa_guard_release>
   d708a:	4a05      	ldr	r2, [pc, #20]	; (d70a0 <_Z19__fetch_global_Wirev+0x38>)
   d708c:	4905      	ldr	r1, [pc, #20]	; (d70a4 <_Z19__fetch_global_Wirev+0x3c>)
   d708e:	4803      	ldr	r0, [pc, #12]	; (d709c <_Z19__fetch_global_Wirev+0x34>)
   d7090:	f000 f82c 	bl	d70ec <__aeabi_atexit>
	return wire;
}
   d7094:	4801      	ldr	r0, [pc, #4]	; (d709c <_Z19__fetch_global_Wirev+0x34>)
   d7096:	bd38      	pop	{r3, r4, r5, pc}
   d7098:	2003e718 	.word	0x2003e718
   d709c:	2003e71c 	.word	0x2003e71c
   d70a0:	2003e268 	.word	0x2003e268
   d70a4:	000d5af5 	.word	0x000d5af5

000d70a8 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d70a8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d70aa:	4c0c      	ldr	r4, [pc, #48]	; (d70dc <_GLOBAL__sub_I_SPI+0x34>)
   d70ac:	4e0c      	ldr	r6, [pc, #48]	; (d70e0 <_GLOBAL__sub_I_SPI+0x38>)
   d70ae:	4d0d      	ldr	r5, [pc, #52]	; (d70e4 <_GLOBAL__sub_I_SPI+0x3c>)
   d70b0:	2100      	movs	r1, #0
   d70b2:	4620      	mov	r0, r4
   d70b4:	f7ff f898 	bl	d61e8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d70b8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d70ba:	4c0b      	ldr	r4, [pc, #44]	; (d70e8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d70bc:	4632      	mov	r2, r6
   d70be:	4629      	mov	r1, r5
   d70c0:	f000 f814 	bl	d70ec <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d70c4:	2101      	movs	r1, #1
   d70c6:	4620      	mov	r0, r4
   d70c8:	f7ff f88e 	bl	d61e8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d70cc:	4632      	mov	r2, r6
   d70ce:	4629      	mov	r1, r5
   d70d0:	4620      	mov	r0, r4
   d70d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d70d6:	f000 b809 	b.w	d70ec <__aeabi_atexit>
   d70da:	bf00      	nop
   d70dc:	2003e730 	.word	0x2003e730
   d70e0:	2003e268 	.word	0x2003e268
   d70e4:	000d61d9 	.word	0x000d61d9
   d70e8:	2003e740 	.word	0x2003e740

000d70ec <__aeabi_atexit>:
   d70ec:	460b      	mov	r3, r1
   d70ee:	4601      	mov	r1, r0
   d70f0:	4618      	mov	r0, r3
   d70f2:	f000 bfff 	b.w	d80f4 <__cxa_atexit>

000d70f6 <_ZSt25__throw_bad_function_callv>:
   d70f6:	b508      	push	{r3, lr}
   d70f8:	f7fe f9ee 	bl	d54d8 <abort>

000d70fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d70fc:	4b24      	ldr	r3, [pc, #144]	; (d7190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d70fe:	681a      	ldr	r2, [r3, #0]
   d7100:	07d0      	lsls	r0, r2, #31
   d7102:	bf5c      	itt	pl
   d7104:	2201      	movpl	r2, #1
   d7106:	601a      	strpl	r2, [r3, #0]
   d7108:	4b22      	ldr	r3, [pc, #136]	; (d7194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d710a:	681a      	ldr	r2, [r3, #0]
   d710c:	07d1      	lsls	r1, r2, #31
   d710e:	bf5c      	itt	pl
   d7110:	2201      	movpl	r2, #1
   d7112:	601a      	strpl	r2, [r3, #0]
   d7114:	4b20      	ldr	r3, [pc, #128]	; (d7198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7116:	681a      	ldr	r2, [r3, #0]
   d7118:	07d2      	lsls	r2, r2, #31
   d711a:	bf5c      	itt	pl
   d711c:	2201      	movpl	r2, #1
   d711e:	601a      	strpl	r2, [r3, #0]
   d7120:	4b1e      	ldr	r3, [pc, #120]	; (d719c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7122:	681a      	ldr	r2, [r3, #0]
   d7124:	07d0      	lsls	r0, r2, #31
   d7126:	bf5c      	itt	pl
   d7128:	2201      	movpl	r2, #1
   d712a:	601a      	strpl	r2, [r3, #0]
   d712c:	4b1c      	ldr	r3, [pc, #112]	; (d71a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d712e:	681a      	ldr	r2, [r3, #0]
   d7130:	07d1      	lsls	r1, r2, #31
   d7132:	bf5c      	itt	pl
   d7134:	2201      	movpl	r2, #1
   d7136:	601a      	strpl	r2, [r3, #0]
   d7138:	4b1a      	ldr	r3, [pc, #104]	; (d71a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d713a:	681a      	ldr	r2, [r3, #0]
   d713c:	07d2      	lsls	r2, r2, #31
   d713e:	bf5c      	itt	pl
   d7140:	2201      	movpl	r2, #1
   d7142:	601a      	strpl	r2, [r3, #0]
   d7144:	4b18      	ldr	r3, [pc, #96]	; (d71a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d7146:	681a      	ldr	r2, [r3, #0]
   d7148:	07d0      	lsls	r0, r2, #31
   d714a:	bf5c      	itt	pl
   d714c:	2201      	movpl	r2, #1
   d714e:	601a      	strpl	r2, [r3, #0]
   d7150:	4b16      	ldr	r3, [pc, #88]	; (d71ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7152:	681a      	ldr	r2, [r3, #0]
   d7154:	07d1      	lsls	r1, r2, #31
   d7156:	bf5c      	itt	pl
   d7158:	2201      	movpl	r2, #1
   d715a:	601a      	strpl	r2, [r3, #0]
   d715c:	4b14      	ldr	r3, [pc, #80]	; (d71b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d715e:	681a      	ldr	r2, [r3, #0]
   d7160:	07d2      	lsls	r2, r2, #31
   d7162:	bf5c      	itt	pl
   d7164:	2201      	movpl	r2, #1
   d7166:	601a      	strpl	r2, [r3, #0]
   d7168:	4b12      	ldr	r3, [pc, #72]	; (d71b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d716a:	681a      	ldr	r2, [r3, #0]
   d716c:	07d0      	lsls	r0, r2, #31
   d716e:	bf5c      	itt	pl
   d7170:	2201      	movpl	r2, #1
   d7172:	601a      	strpl	r2, [r3, #0]
   d7174:	4b10      	ldr	r3, [pc, #64]	; (d71b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d7176:	681a      	ldr	r2, [r3, #0]
   d7178:	07d1      	lsls	r1, r2, #31
   d717a:	bf5c      	itt	pl
   d717c:	2201      	movpl	r2, #1
   d717e:	601a      	strpl	r2, [r3, #0]
   d7180:	4b0e      	ldr	r3, [pc, #56]	; (d71bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7182:	681a      	ldr	r2, [r3, #0]
   d7184:	07d2      	lsls	r2, r2, #31
   d7186:	bf5c      	itt	pl
   d7188:	2201      	movpl	r2, #1
   d718a:	601a      	strpl	r2, [r3, #0]
   d718c:	4770      	bx	lr
   d718e:	bf00      	nop
   d7190:	2003e77c 	.word	0x2003e77c
   d7194:	2003e778 	.word	0x2003e778
   d7198:	2003e774 	.word	0x2003e774
   d719c:	2003e770 	.word	0x2003e770
   d71a0:	2003e76c 	.word	0x2003e76c
   d71a4:	2003e768 	.word	0x2003e768
   d71a8:	2003e764 	.word	0x2003e764
   d71ac:	2003e760 	.word	0x2003e760
   d71b0:	2003e75c 	.word	0x2003e75c
   d71b4:	2003e758 	.word	0x2003e758
   d71b8:	2003e754 	.word	0x2003e754
   d71bc:	2003e750 	.word	0x2003e750

000d71c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d71c0:	4b18      	ldr	r3, [pc, #96]	; (d7224 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d71c2:	681a      	ldr	r2, [r3, #0]
   d71c4:	07d1      	lsls	r1, r2, #31
   d71c6:	bf5c      	itt	pl
   d71c8:	2201      	movpl	r2, #1
   d71ca:	601a      	strpl	r2, [r3, #0]
   d71cc:	4b16      	ldr	r3, [pc, #88]	; (d7228 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d71ce:	681a      	ldr	r2, [r3, #0]
   d71d0:	07d2      	lsls	r2, r2, #31
   d71d2:	bf5c      	itt	pl
   d71d4:	2201      	movpl	r2, #1
   d71d6:	601a      	strpl	r2, [r3, #0]
   d71d8:	4b14      	ldr	r3, [pc, #80]	; (d722c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d71da:	681a      	ldr	r2, [r3, #0]
   d71dc:	07d0      	lsls	r0, r2, #31
   d71de:	bf5c      	itt	pl
   d71e0:	2201      	movpl	r2, #1
   d71e2:	601a      	strpl	r2, [r3, #0]
   d71e4:	4b12      	ldr	r3, [pc, #72]	; (d7230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d71e6:	681a      	ldr	r2, [r3, #0]
   d71e8:	07d1      	lsls	r1, r2, #31
   d71ea:	bf5c      	itt	pl
   d71ec:	2201      	movpl	r2, #1
   d71ee:	601a      	strpl	r2, [r3, #0]
   d71f0:	4b10      	ldr	r3, [pc, #64]	; (d7234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d71f2:	681a      	ldr	r2, [r3, #0]
   d71f4:	07d2      	lsls	r2, r2, #31
   d71f6:	bf5c      	itt	pl
   d71f8:	2201      	movpl	r2, #1
   d71fa:	601a      	strpl	r2, [r3, #0]
   d71fc:	4b0e      	ldr	r3, [pc, #56]	; (d7238 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d71fe:	681a      	ldr	r2, [r3, #0]
   d7200:	07d0      	lsls	r0, r2, #31
   d7202:	bf5c      	itt	pl
   d7204:	2201      	movpl	r2, #1
   d7206:	601a      	strpl	r2, [r3, #0]
   d7208:	4b0c      	ldr	r3, [pc, #48]	; (d723c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d720a:	681a      	ldr	r2, [r3, #0]
   d720c:	07d1      	lsls	r1, r2, #31
   d720e:	bf5c      	itt	pl
   d7210:	2201      	movpl	r2, #1
   d7212:	601a      	strpl	r2, [r3, #0]
   d7214:	4b0a      	ldr	r3, [pc, #40]	; (d7240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7216:	681a      	ldr	r2, [r3, #0]
   d7218:	07d2      	lsls	r2, r2, #31
   d721a:	bf5c      	itt	pl
   d721c:	2201      	movpl	r2, #1
   d721e:	601a      	strpl	r2, [r3, #0]
   d7220:	4770      	bx	lr
   d7222:	bf00      	nop
   d7224:	2003e79c 	.word	0x2003e79c
   d7228:	2003e798 	.word	0x2003e798
   d722c:	2003e794 	.word	0x2003e794
   d7230:	2003e790 	.word	0x2003e790
   d7234:	2003e78c 	.word	0x2003e78c
   d7238:	2003e788 	.word	0x2003e788
   d723c:	2003e784 	.word	0x2003e784
   d7240:	2003e780 	.word	0x2003e780

000d7244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7244:	4b18      	ldr	r3, [pc, #96]	; (d72a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7246:	681a      	ldr	r2, [r3, #0]
   d7248:	07d1      	lsls	r1, r2, #31
   d724a:	bf5c      	itt	pl
   d724c:	2201      	movpl	r2, #1
   d724e:	601a      	strpl	r2, [r3, #0]
   d7250:	4b16      	ldr	r3, [pc, #88]	; (d72ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7252:	681a      	ldr	r2, [r3, #0]
   d7254:	07d2      	lsls	r2, r2, #31
   d7256:	bf5c      	itt	pl
   d7258:	2201      	movpl	r2, #1
   d725a:	601a      	strpl	r2, [r3, #0]
   d725c:	4b14      	ldr	r3, [pc, #80]	; (d72b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d725e:	681a      	ldr	r2, [r3, #0]
   d7260:	07d0      	lsls	r0, r2, #31
   d7262:	bf5c      	itt	pl
   d7264:	2201      	movpl	r2, #1
   d7266:	601a      	strpl	r2, [r3, #0]
   d7268:	4b12      	ldr	r3, [pc, #72]	; (d72b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d726a:	681a      	ldr	r2, [r3, #0]
   d726c:	07d1      	lsls	r1, r2, #31
   d726e:	bf5c      	itt	pl
   d7270:	2201      	movpl	r2, #1
   d7272:	601a      	strpl	r2, [r3, #0]
   d7274:	4b10      	ldr	r3, [pc, #64]	; (d72b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7276:	681a      	ldr	r2, [r3, #0]
   d7278:	07d2      	lsls	r2, r2, #31
   d727a:	bf5c      	itt	pl
   d727c:	2201      	movpl	r2, #1
   d727e:	601a      	strpl	r2, [r3, #0]
   d7280:	4b0e      	ldr	r3, [pc, #56]	; (d72bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7282:	681a      	ldr	r2, [r3, #0]
   d7284:	07d0      	lsls	r0, r2, #31
   d7286:	bf5c      	itt	pl
   d7288:	2201      	movpl	r2, #1
   d728a:	601a      	strpl	r2, [r3, #0]
   d728c:	4b0c      	ldr	r3, [pc, #48]	; (d72c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d728e:	681a      	ldr	r2, [r3, #0]
   d7290:	07d1      	lsls	r1, r2, #31
   d7292:	bf5c      	itt	pl
   d7294:	2201      	movpl	r2, #1
   d7296:	601a      	strpl	r2, [r3, #0]
   d7298:	4b0a      	ldr	r3, [pc, #40]	; (d72c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d729a:	681a      	ldr	r2, [r3, #0]
   d729c:	07d2      	lsls	r2, r2, #31
   d729e:	bf5c      	itt	pl
   d72a0:	2201      	movpl	r2, #1
   d72a2:	601a      	strpl	r2, [r3, #0]
   d72a4:	4770      	bx	lr
   d72a6:	bf00      	nop
   d72a8:	2003e7bc 	.word	0x2003e7bc
   d72ac:	2003e7b8 	.word	0x2003e7b8
   d72b0:	2003e7b4 	.word	0x2003e7b4
   d72b4:	2003e7b0 	.word	0x2003e7b0
   d72b8:	2003e7ac 	.word	0x2003e7ac
   d72bc:	2003e7a8 	.word	0x2003e7a8
   d72c0:	2003e7a4 	.word	0x2003e7a4
   d72c4:	2003e7a0 	.word	0x2003e7a0

000d72c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d72c8:	4b24      	ldr	r3, [pc, #144]	; (d735c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d72ca:	681a      	ldr	r2, [r3, #0]
   d72cc:	07d0      	lsls	r0, r2, #31
   d72ce:	bf5c      	itt	pl
   d72d0:	2201      	movpl	r2, #1
   d72d2:	601a      	strpl	r2, [r3, #0]
   d72d4:	4b22      	ldr	r3, [pc, #136]	; (d7360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d72d6:	681a      	ldr	r2, [r3, #0]
   d72d8:	07d1      	lsls	r1, r2, #31
   d72da:	bf5c      	itt	pl
   d72dc:	2201      	movpl	r2, #1
   d72de:	601a      	strpl	r2, [r3, #0]
   d72e0:	4b20      	ldr	r3, [pc, #128]	; (d7364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d72e2:	681a      	ldr	r2, [r3, #0]
   d72e4:	07d2      	lsls	r2, r2, #31
   d72e6:	bf5c      	itt	pl
   d72e8:	2201      	movpl	r2, #1
   d72ea:	601a      	strpl	r2, [r3, #0]
   d72ec:	4b1e      	ldr	r3, [pc, #120]	; (d7368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d72ee:	681a      	ldr	r2, [r3, #0]
   d72f0:	07d0      	lsls	r0, r2, #31
   d72f2:	bf5c      	itt	pl
   d72f4:	2201      	movpl	r2, #1
   d72f6:	601a      	strpl	r2, [r3, #0]
   d72f8:	4b1c      	ldr	r3, [pc, #112]	; (d736c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d72fa:	681a      	ldr	r2, [r3, #0]
   d72fc:	07d1      	lsls	r1, r2, #31
   d72fe:	bf5c      	itt	pl
   d7300:	2201      	movpl	r2, #1
   d7302:	601a      	strpl	r2, [r3, #0]
   d7304:	4b1a      	ldr	r3, [pc, #104]	; (d7370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7306:	681a      	ldr	r2, [r3, #0]
   d7308:	07d2      	lsls	r2, r2, #31
   d730a:	bf5c      	itt	pl
   d730c:	2201      	movpl	r2, #1
   d730e:	601a      	strpl	r2, [r3, #0]
   d7310:	4b18      	ldr	r3, [pc, #96]	; (d7374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7312:	681a      	ldr	r2, [r3, #0]
   d7314:	07d0      	lsls	r0, r2, #31
   d7316:	bf5c      	itt	pl
   d7318:	2201      	movpl	r2, #1
   d731a:	601a      	strpl	r2, [r3, #0]
   d731c:	4b16      	ldr	r3, [pc, #88]	; (d7378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d731e:	681a      	ldr	r2, [r3, #0]
   d7320:	07d1      	lsls	r1, r2, #31
   d7322:	bf5c      	itt	pl
   d7324:	2201      	movpl	r2, #1
   d7326:	601a      	strpl	r2, [r3, #0]
   d7328:	4b14      	ldr	r3, [pc, #80]	; (d737c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d732a:	681a      	ldr	r2, [r3, #0]
   d732c:	07d2      	lsls	r2, r2, #31
   d732e:	bf5c      	itt	pl
   d7330:	2201      	movpl	r2, #1
   d7332:	601a      	strpl	r2, [r3, #0]
   d7334:	4b12      	ldr	r3, [pc, #72]	; (d7380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7336:	681a      	ldr	r2, [r3, #0]
   d7338:	07d0      	lsls	r0, r2, #31
   d733a:	bf5c      	itt	pl
   d733c:	2201      	movpl	r2, #1
   d733e:	601a      	strpl	r2, [r3, #0]
   d7340:	4b10      	ldr	r3, [pc, #64]	; (d7384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7342:	681a      	ldr	r2, [r3, #0]
   d7344:	07d1      	lsls	r1, r2, #31
   d7346:	bf5c      	itt	pl
   d7348:	2201      	movpl	r2, #1
   d734a:	601a      	strpl	r2, [r3, #0]
   d734c:	4b0e      	ldr	r3, [pc, #56]	; (d7388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d734e:	681a      	ldr	r2, [r3, #0]
   d7350:	07d2      	lsls	r2, r2, #31
   d7352:	bf5c      	itt	pl
   d7354:	2201      	movpl	r2, #1
   d7356:	601a      	strpl	r2, [r3, #0]
   d7358:	4770      	bx	lr
   d735a:	bf00      	nop
   d735c:	2003e7ec 	.word	0x2003e7ec
   d7360:	2003e7e8 	.word	0x2003e7e8
   d7364:	2003e7e4 	.word	0x2003e7e4
   d7368:	2003e7e0 	.word	0x2003e7e0
   d736c:	2003e7dc 	.word	0x2003e7dc
   d7370:	2003e7d8 	.word	0x2003e7d8
   d7374:	2003e7d4 	.word	0x2003e7d4
   d7378:	2003e7d0 	.word	0x2003e7d0
   d737c:	2003e7cc 	.word	0x2003e7cc
   d7380:	2003e7c8 	.word	0x2003e7c8
   d7384:	2003e7c4 	.word	0x2003e7c4
   d7388:	2003e7c0 	.word	0x2003e7c0

000d738c <__aeabi_drsub>:
   d738c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7390:	e002      	b.n	d7398 <__adddf3>
   d7392:	bf00      	nop

000d7394 <__aeabi_dsub>:
   d7394:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7398 <__adddf3>:
   d7398:	b530      	push	{r4, r5, lr}
   d739a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d739e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d73a2:	ea94 0f05 	teq	r4, r5
   d73a6:	bf08      	it	eq
   d73a8:	ea90 0f02 	teqeq	r0, r2
   d73ac:	bf1f      	itttt	ne
   d73ae:	ea54 0c00 	orrsne.w	ip, r4, r0
   d73b2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d73b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d73ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d73be:	f000 80e2 	beq.w	d7586 <__adddf3+0x1ee>
   d73c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d73c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d73ca:	bfb8      	it	lt
   d73cc:	426d      	neglt	r5, r5
   d73ce:	dd0c      	ble.n	d73ea <__adddf3+0x52>
   d73d0:	442c      	add	r4, r5
   d73d2:	ea80 0202 	eor.w	r2, r0, r2
   d73d6:	ea81 0303 	eor.w	r3, r1, r3
   d73da:	ea82 0000 	eor.w	r0, r2, r0
   d73de:	ea83 0101 	eor.w	r1, r3, r1
   d73e2:	ea80 0202 	eor.w	r2, r0, r2
   d73e6:	ea81 0303 	eor.w	r3, r1, r3
   d73ea:	2d36      	cmp	r5, #54	; 0x36
   d73ec:	bf88      	it	hi
   d73ee:	bd30      	pophi	{r4, r5, pc}
   d73f0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d73f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d73f8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d73fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7400:	d002      	beq.n	d7408 <__adddf3+0x70>
   d7402:	4240      	negs	r0, r0
   d7404:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7408:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d740c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7410:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7414:	d002      	beq.n	d741c <__adddf3+0x84>
   d7416:	4252      	negs	r2, r2
   d7418:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d741c:	ea94 0f05 	teq	r4, r5
   d7420:	f000 80a7 	beq.w	d7572 <__adddf3+0x1da>
   d7424:	f1a4 0401 	sub.w	r4, r4, #1
   d7428:	f1d5 0e20 	rsbs	lr, r5, #32
   d742c:	db0d      	blt.n	d744a <__adddf3+0xb2>
   d742e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7432:	fa22 f205 	lsr.w	r2, r2, r5
   d7436:	1880      	adds	r0, r0, r2
   d7438:	f141 0100 	adc.w	r1, r1, #0
   d743c:	fa03 f20e 	lsl.w	r2, r3, lr
   d7440:	1880      	adds	r0, r0, r2
   d7442:	fa43 f305 	asr.w	r3, r3, r5
   d7446:	4159      	adcs	r1, r3
   d7448:	e00e      	b.n	d7468 <__adddf3+0xd0>
   d744a:	f1a5 0520 	sub.w	r5, r5, #32
   d744e:	f10e 0e20 	add.w	lr, lr, #32
   d7452:	2a01      	cmp	r2, #1
   d7454:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7458:	bf28      	it	cs
   d745a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d745e:	fa43 f305 	asr.w	r3, r3, r5
   d7462:	18c0      	adds	r0, r0, r3
   d7464:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d746c:	d507      	bpl.n	d747e <__adddf3+0xe6>
   d746e:	f04f 0e00 	mov.w	lr, #0
   d7472:	f1dc 0c00 	rsbs	ip, ip, #0
   d7476:	eb7e 0000 	sbcs.w	r0, lr, r0
   d747a:	eb6e 0101 	sbc.w	r1, lr, r1
   d747e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7482:	d31b      	bcc.n	d74bc <__adddf3+0x124>
   d7484:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7488:	d30c      	bcc.n	d74a4 <__adddf3+0x10c>
   d748a:	0849      	lsrs	r1, r1, #1
   d748c:	ea5f 0030 	movs.w	r0, r0, rrx
   d7490:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7494:	f104 0401 	add.w	r4, r4, #1
   d7498:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d749c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d74a0:	f080 809a 	bcs.w	d75d8 <__adddf3+0x240>
   d74a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d74a8:	bf08      	it	eq
   d74aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d74ae:	f150 0000 	adcs.w	r0, r0, #0
   d74b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d74b6:	ea41 0105 	orr.w	r1, r1, r5
   d74ba:	bd30      	pop	{r4, r5, pc}
   d74bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d74c0:	4140      	adcs	r0, r0
   d74c2:	eb41 0101 	adc.w	r1, r1, r1
   d74c6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d74ca:	f1a4 0401 	sub.w	r4, r4, #1
   d74ce:	d1e9      	bne.n	d74a4 <__adddf3+0x10c>
   d74d0:	f091 0f00 	teq	r1, #0
   d74d4:	bf04      	itt	eq
   d74d6:	4601      	moveq	r1, r0
   d74d8:	2000      	moveq	r0, #0
   d74da:	fab1 f381 	clz	r3, r1
   d74de:	bf08      	it	eq
   d74e0:	3320      	addeq	r3, #32
   d74e2:	f1a3 030b 	sub.w	r3, r3, #11
   d74e6:	f1b3 0220 	subs.w	r2, r3, #32
   d74ea:	da0c      	bge.n	d7506 <__adddf3+0x16e>
   d74ec:	320c      	adds	r2, #12
   d74ee:	dd08      	ble.n	d7502 <__adddf3+0x16a>
   d74f0:	f102 0c14 	add.w	ip, r2, #20
   d74f4:	f1c2 020c 	rsb	r2, r2, #12
   d74f8:	fa01 f00c 	lsl.w	r0, r1, ip
   d74fc:	fa21 f102 	lsr.w	r1, r1, r2
   d7500:	e00c      	b.n	d751c <__adddf3+0x184>
   d7502:	f102 0214 	add.w	r2, r2, #20
   d7506:	bfd8      	it	le
   d7508:	f1c2 0c20 	rsble	ip, r2, #32
   d750c:	fa01 f102 	lsl.w	r1, r1, r2
   d7510:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7514:	bfdc      	itt	le
   d7516:	ea41 010c 	orrle.w	r1, r1, ip
   d751a:	4090      	lslle	r0, r2
   d751c:	1ae4      	subs	r4, r4, r3
   d751e:	bfa2      	ittt	ge
   d7520:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7524:	4329      	orrge	r1, r5
   d7526:	bd30      	popge	{r4, r5, pc}
   d7528:	ea6f 0404 	mvn.w	r4, r4
   d752c:	3c1f      	subs	r4, #31
   d752e:	da1c      	bge.n	d756a <__adddf3+0x1d2>
   d7530:	340c      	adds	r4, #12
   d7532:	dc0e      	bgt.n	d7552 <__adddf3+0x1ba>
   d7534:	f104 0414 	add.w	r4, r4, #20
   d7538:	f1c4 0220 	rsb	r2, r4, #32
   d753c:	fa20 f004 	lsr.w	r0, r0, r4
   d7540:	fa01 f302 	lsl.w	r3, r1, r2
   d7544:	ea40 0003 	orr.w	r0, r0, r3
   d7548:	fa21 f304 	lsr.w	r3, r1, r4
   d754c:	ea45 0103 	orr.w	r1, r5, r3
   d7550:	bd30      	pop	{r4, r5, pc}
   d7552:	f1c4 040c 	rsb	r4, r4, #12
   d7556:	f1c4 0220 	rsb	r2, r4, #32
   d755a:	fa20 f002 	lsr.w	r0, r0, r2
   d755e:	fa01 f304 	lsl.w	r3, r1, r4
   d7562:	ea40 0003 	orr.w	r0, r0, r3
   d7566:	4629      	mov	r1, r5
   d7568:	bd30      	pop	{r4, r5, pc}
   d756a:	fa21 f004 	lsr.w	r0, r1, r4
   d756e:	4629      	mov	r1, r5
   d7570:	bd30      	pop	{r4, r5, pc}
   d7572:	f094 0f00 	teq	r4, #0
   d7576:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d757a:	bf06      	itte	eq
   d757c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7580:	3401      	addeq	r4, #1
   d7582:	3d01      	subne	r5, #1
   d7584:	e74e      	b.n	d7424 <__adddf3+0x8c>
   d7586:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d758a:	bf18      	it	ne
   d758c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7590:	d029      	beq.n	d75e6 <__adddf3+0x24e>
   d7592:	ea94 0f05 	teq	r4, r5
   d7596:	bf08      	it	eq
   d7598:	ea90 0f02 	teqeq	r0, r2
   d759c:	d005      	beq.n	d75aa <__adddf3+0x212>
   d759e:	ea54 0c00 	orrs.w	ip, r4, r0
   d75a2:	bf04      	itt	eq
   d75a4:	4619      	moveq	r1, r3
   d75a6:	4610      	moveq	r0, r2
   d75a8:	bd30      	pop	{r4, r5, pc}
   d75aa:	ea91 0f03 	teq	r1, r3
   d75ae:	bf1e      	ittt	ne
   d75b0:	2100      	movne	r1, #0
   d75b2:	2000      	movne	r0, #0
   d75b4:	bd30      	popne	{r4, r5, pc}
   d75b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d75ba:	d105      	bne.n	d75c8 <__adddf3+0x230>
   d75bc:	0040      	lsls	r0, r0, #1
   d75be:	4149      	adcs	r1, r1
   d75c0:	bf28      	it	cs
   d75c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d75c6:	bd30      	pop	{r4, r5, pc}
   d75c8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d75cc:	bf3c      	itt	cc
   d75ce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d75d2:	bd30      	popcc	{r4, r5, pc}
   d75d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d75d8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d75dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d75e0:	f04f 0000 	mov.w	r0, #0
   d75e4:	bd30      	pop	{r4, r5, pc}
   d75e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d75ea:	bf1a      	itte	ne
   d75ec:	4619      	movne	r1, r3
   d75ee:	4610      	movne	r0, r2
   d75f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d75f4:	bf1c      	itt	ne
   d75f6:	460b      	movne	r3, r1
   d75f8:	4602      	movne	r2, r0
   d75fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d75fe:	bf06      	itte	eq
   d7600:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7604:	ea91 0f03 	teqeq	r1, r3
   d7608:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d760c:	bd30      	pop	{r4, r5, pc}
   d760e:	bf00      	nop

000d7610 <__aeabi_ui2d>:
   d7610:	f090 0f00 	teq	r0, #0
   d7614:	bf04      	itt	eq
   d7616:	2100      	moveq	r1, #0
   d7618:	4770      	bxeq	lr
   d761a:	b530      	push	{r4, r5, lr}
   d761c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7620:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7624:	f04f 0500 	mov.w	r5, #0
   d7628:	f04f 0100 	mov.w	r1, #0
   d762c:	e750      	b.n	d74d0 <__adddf3+0x138>
   d762e:	bf00      	nop

000d7630 <__aeabi_i2d>:
   d7630:	f090 0f00 	teq	r0, #0
   d7634:	bf04      	itt	eq
   d7636:	2100      	moveq	r1, #0
   d7638:	4770      	bxeq	lr
   d763a:	b530      	push	{r4, r5, lr}
   d763c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7640:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7644:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7648:	bf48      	it	mi
   d764a:	4240      	negmi	r0, r0
   d764c:	f04f 0100 	mov.w	r1, #0
   d7650:	e73e      	b.n	d74d0 <__adddf3+0x138>
   d7652:	bf00      	nop

000d7654 <__aeabi_f2d>:
   d7654:	0042      	lsls	r2, r0, #1
   d7656:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d765a:	ea4f 0131 	mov.w	r1, r1, rrx
   d765e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7662:	bf1f      	itttt	ne
   d7664:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7668:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d766c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7670:	4770      	bxne	lr
   d7672:	f092 0f00 	teq	r2, #0
   d7676:	bf14      	ite	ne
   d7678:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d767c:	4770      	bxeq	lr
   d767e:	b530      	push	{r4, r5, lr}
   d7680:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7688:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d768c:	e720      	b.n	d74d0 <__adddf3+0x138>
   d768e:	bf00      	nop

000d7690 <__aeabi_ul2d>:
   d7690:	ea50 0201 	orrs.w	r2, r0, r1
   d7694:	bf08      	it	eq
   d7696:	4770      	bxeq	lr
   d7698:	b530      	push	{r4, r5, lr}
   d769a:	f04f 0500 	mov.w	r5, #0
   d769e:	e00a      	b.n	d76b6 <__aeabi_l2d+0x16>

000d76a0 <__aeabi_l2d>:
   d76a0:	ea50 0201 	orrs.w	r2, r0, r1
   d76a4:	bf08      	it	eq
   d76a6:	4770      	bxeq	lr
   d76a8:	b530      	push	{r4, r5, lr}
   d76aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d76ae:	d502      	bpl.n	d76b6 <__aeabi_l2d+0x16>
   d76b0:	4240      	negs	r0, r0
   d76b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d76b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d76ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d76be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d76c2:	f43f aedc 	beq.w	d747e <__adddf3+0xe6>
   d76c6:	f04f 0203 	mov.w	r2, #3
   d76ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d76ce:	bf18      	it	ne
   d76d0:	3203      	addne	r2, #3
   d76d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d76d6:	bf18      	it	ne
   d76d8:	3203      	addne	r2, #3
   d76da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d76de:	f1c2 0320 	rsb	r3, r2, #32
   d76e2:	fa00 fc03 	lsl.w	ip, r0, r3
   d76e6:	fa20 f002 	lsr.w	r0, r0, r2
   d76ea:	fa01 fe03 	lsl.w	lr, r1, r3
   d76ee:	ea40 000e 	orr.w	r0, r0, lr
   d76f2:	fa21 f102 	lsr.w	r1, r1, r2
   d76f6:	4414      	add	r4, r2
   d76f8:	e6c1      	b.n	d747e <__adddf3+0xe6>
   d76fa:	bf00      	nop

000d76fc <__aeabi_dmul>:
   d76fc:	b570      	push	{r4, r5, r6, lr}
   d76fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7702:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7706:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d770a:	bf1d      	ittte	ne
   d770c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7710:	ea94 0f0c 	teqne	r4, ip
   d7714:	ea95 0f0c 	teqne	r5, ip
   d7718:	f000 f8de 	bleq	d78d8 <__aeabi_dmul+0x1dc>
   d771c:	442c      	add	r4, r5
   d771e:	ea81 0603 	eor.w	r6, r1, r3
   d7722:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d7726:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d772a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d772e:	bf18      	it	ne
   d7730:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7734:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7738:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d773c:	d038      	beq.n	d77b0 <__aeabi_dmul+0xb4>
   d773e:	fba0 ce02 	umull	ip, lr, r0, r2
   d7742:	f04f 0500 	mov.w	r5, #0
   d7746:	fbe1 e502 	umlal	lr, r5, r1, r2
   d774a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d774e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7752:	f04f 0600 	mov.w	r6, #0
   d7756:	fbe1 5603 	umlal	r5, r6, r1, r3
   d775a:	f09c 0f00 	teq	ip, #0
   d775e:	bf18      	it	ne
   d7760:	f04e 0e01 	orrne.w	lr, lr, #1
   d7764:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7768:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d776c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7770:	d204      	bcs.n	d777c <__aeabi_dmul+0x80>
   d7772:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d7776:	416d      	adcs	r5, r5
   d7778:	eb46 0606 	adc.w	r6, r6, r6
   d777c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7780:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7784:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7788:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d778c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7790:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7794:	bf88      	it	hi
   d7796:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d779a:	d81e      	bhi.n	d77da <__aeabi_dmul+0xde>
   d779c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d77a0:	bf08      	it	eq
   d77a2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d77a6:	f150 0000 	adcs.w	r0, r0, #0
   d77aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d77ae:	bd70      	pop	{r4, r5, r6, pc}
   d77b0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d77b4:	ea46 0101 	orr.w	r1, r6, r1
   d77b8:	ea40 0002 	orr.w	r0, r0, r2
   d77bc:	ea81 0103 	eor.w	r1, r1, r3
   d77c0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d77c4:	bfc2      	ittt	gt
   d77c6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d77ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d77ce:	bd70      	popgt	{r4, r5, r6, pc}
   d77d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d77d4:	f04f 0e00 	mov.w	lr, #0
   d77d8:	3c01      	subs	r4, #1
   d77da:	f300 80ab 	bgt.w	d7934 <__aeabi_dmul+0x238>
   d77de:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d77e2:	bfde      	ittt	le
   d77e4:	2000      	movle	r0, #0
   d77e6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d77ea:	bd70      	pople	{r4, r5, r6, pc}
   d77ec:	f1c4 0400 	rsb	r4, r4, #0
   d77f0:	3c20      	subs	r4, #32
   d77f2:	da35      	bge.n	d7860 <__aeabi_dmul+0x164>
   d77f4:	340c      	adds	r4, #12
   d77f6:	dc1b      	bgt.n	d7830 <__aeabi_dmul+0x134>
   d77f8:	f104 0414 	add.w	r4, r4, #20
   d77fc:	f1c4 0520 	rsb	r5, r4, #32
   d7800:	fa00 f305 	lsl.w	r3, r0, r5
   d7804:	fa20 f004 	lsr.w	r0, r0, r4
   d7808:	fa01 f205 	lsl.w	r2, r1, r5
   d780c:	ea40 0002 	orr.w	r0, r0, r2
   d7810:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7814:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7818:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d781c:	fa21 f604 	lsr.w	r6, r1, r4
   d7820:	eb42 0106 	adc.w	r1, r2, r6
   d7824:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7828:	bf08      	it	eq
   d782a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d782e:	bd70      	pop	{r4, r5, r6, pc}
   d7830:	f1c4 040c 	rsb	r4, r4, #12
   d7834:	f1c4 0520 	rsb	r5, r4, #32
   d7838:	fa00 f304 	lsl.w	r3, r0, r4
   d783c:	fa20 f005 	lsr.w	r0, r0, r5
   d7840:	fa01 f204 	lsl.w	r2, r1, r4
   d7844:	ea40 0002 	orr.w	r0, r0, r2
   d7848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d784c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7850:	f141 0100 	adc.w	r1, r1, #0
   d7854:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7858:	bf08      	it	eq
   d785a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d785e:	bd70      	pop	{r4, r5, r6, pc}
   d7860:	f1c4 0520 	rsb	r5, r4, #32
   d7864:	fa00 f205 	lsl.w	r2, r0, r5
   d7868:	ea4e 0e02 	orr.w	lr, lr, r2
   d786c:	fa20 f304 	lsr.w	r3, r0, r4
   d7870:	fa01 f205 	lsl.w	r2, r1, r5
   d7874:	ea43 0302 	orr.w	r3, r3, r2
   d7878:	fa21 f004 	lsr.w	r0, r1, r4
   d787c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7880:	fa21 f204 	lsr.w	r2, r1, r4
   d7884:	ea20 0002 	bic.w	r0, r0, r2
   d7888:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d788c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7890:	bf08      	it	eq
   d7892:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7896:	bd70      	pop	{r4, r5, r6, pc}
   d7898:	f094 0f00 	teq	r4, #0
   d789c:	d10f      	bne.n	d78be <__aeabi_dmul+0x1c2>
   d789e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d78a2:	0040      	lsls	r0, r0, #1
   d78a4:	eb41 0101 	adc.w	r1, r1, r1
   d78a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d78ac:	bf08      	it	eq
   d78ae:	3c01      	subeq	r4, #1
   d78b0:	d0f7      	beq.n	d78a2 <__aeabi_dmul+0x1a6>
   d78b2:	ea41 0106 	orr.w	r1, r1, r6
   d78b6:	f095 0f00 	teq	r5, #0
   d78ba:	bf18      	it	ne
   d78bc:	4770      	bxne	lr
   d78be:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d78c2:	0052      	lsls	r2, r2, #1
   d78c4:	eb43 0303 	adc.w	r3, r3, r3
   d78c8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d78cc:	bf08      	it	eq
   d78ce:	3d01      	subeq	r5, #1
   d78d0:	d0f7      	beq.n	d78c2 <__aeabi_dmul+0x1c6>
   d78d2:	ea43 0306 	orr.w	r3, r3, r6
   d78d6:	4770      	bx	lr
   d78d8:	ea94 0f0c 	teq	r4, ip
   d78dc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d78e0:	bf18      	it	ne
   d78e2:	ea95 0f0c 	teqne	r5, ip
   d78e6:	d00c      	beq.n	d7902 <__aeabi_dmul+0x206>
   d78e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d78ec:	bf18      	it	ne
   d78ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d78f2:	d1d1      	bne.n	d7898 <__aeabi_dmul+0x19c>
   d78f4:	ea81 0103 	eor.w	r1, r1, r3
   d78f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d78fc:	f04f 0000 	mov.w	r0, #0
   d7900:	bd70      	pop	{r4, r5, r6, pc}
   d7902:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7906:	bf06      	itte	eq
   d7908:	4610      	moveq	r0, r2
   d790a:	4619      	moveq	r1, r3
   d790c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7910:	d019      	beq.n	d7946 <__aeabi_dmul+0x24a>
   d7912:	ea94 0f0c 	teq	r4, ip
   d7916:	d102      	bne.n	d791e <__aeabi_dmul+0x222>
   d7918:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d791c:	d113      	bne.n	d7946 <__aeabi_dmul+0x24a>
   d791e:	ea95 0f0c 	teq	r5, ip
   d7922:	d105      	bne.n	d7930 <__aeabi_dmul+0x234>
   d7924:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7928:	bf1c      	itt	ne
   d792a:	4610      	movne	r0, r2
   d792c:	4619      	movne	r1, r3
   d792e:	d10a      	bne.n	d7946 <__aeabi_dmul+0x24a>
   d7930:	ea81 0103 	eor.w	r1, r1, r3
   d7934:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7938:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d793c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7940:	f04f 0000 	mov.w	r0, #0
   d7944:	bd70      	pop	{r4, r5, r6, pc}
   d7946:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d794a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d794e:	bd70      	pop	{r4, r5, r6, pc}

000d7950 <__aeabi_ddiv>:
   d7950:	b570      	push	{r4, r5, r6, lr}
   d7952:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7956:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d795a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d795e:	bf1d      	ittte	ne
   d7960:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7964:	ea94 0f0c 	teqne	r4, ip
   d7968:	ea95 0f0c 	teqne	r5, ip
   d796c:	f000 f8a7 	bleq	d7abe <__aeabi_ddiv+0x16e>
   d7970:	eba4 0405 	sub.w	r4, r4, r5
   d7974:	ea81 0e03 	eor.w	lr, r1, r3
   d7978:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d797c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7980:	f000 8088 	beq.w	d7a94 <__aeabi_ddiv+0x144>
   d7984:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7988:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d798c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7990:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7994:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7998:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d799c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d79a0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d79a4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d79a8:	429d      	cmp	r5, r3
   d79aa:	bf08      	it	eq
   d79ac:	4296      	cmpeq	r6, r2
   d79ae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d79b2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d79b6:	d202      	bcs.n	d79be <__aeabi_ddiv+0x6e>
   d79b8:	085b      	lsrs	r3, r3, #1
   d79ba:	ea4f 0232 	mov.w	r2, r2, rrx
   d79be:	1ab6      	subs	r6, r6, r2
   d79c0:	eb65 0503 	sbc.w	r5, r5, r3
   d79c4:	085b      	lsrs	r3, r3, #1
   d79c6:	ea4f 0232 	mov.w	r2, r2, rrx
   d79ca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d79ce:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d79d2:	ebb6 0e02 	subs.w	lr, r6, r2
   d79d6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d79da:	bf22      	ittt	cs
   d79dc:	1ab6      	subcs	r6, r6, r2
   d79de:	4675      	movcs	r5, lr
   d79e0:	ea40 000c 	orrcs.w	r0, r0, ip
   d79e4:	085b      	lsrs	r3, r3, #1
   d79e6:	ea4f 0232 	mov.w	r2, r2, rrx
   d79ea:	ebb6 0e02 	subs.w	lr, r6, r2
   d79ee:	eb75 0e03 	sbcs.w	lr, r5, r3
   d79f2:	bf22      	ittt	cs
   d79f4:	1ab6      	subcs	r6, r6, r2
   d79f6:	4675      	movcs	r5, lr
   d79f8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d79fc:	085b      	lsrs	r3, r3, #1
   d79fe:	ea4f 0232 	mov.w	r2, r2, rrx
   d7a02:	ebb6 0e02 	subs.w	lr, r6, r2
   d7a06:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7a0a:	bf22      	ittt	cs
   d7a0c:	1ab6      	subcs	r6, r6, r2
   d7a0e:	4675      	movcs	r5, lr
   d7a10:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7a14:	085b      	lsrs	r3, r3, #1
   d7a16:	ea4f 0232 	mov.w	r2, r2, rrx
   d7a1a:	ebb6 0e02 	subs.w	lr, r6, r2
   d7a1e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7a22:	bf22      	ittt	cs
   d7a24:	1ab6      	subcs	r6, r6, r2
   d7a26:	4675      	movcs	r5, lr
   d7a28:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7a2c:	ea55 0e06 	orrs.w	lr, r5, r6
   d7a30:	d018      	beq.n	d7a64 <__aeabi_ddiv+0x114>
   d7a32:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d7a36:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d7a3a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7a3e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7a42:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d7a46:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d7a4a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7a4e:	d1c0      	bne.n	d79d2 <__aeabi_ddiv+0x82>
   d7a50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7a54:	d10b      	bne.n	d7a6e <__aeabi_ddiv+0x11e>
   d7a56:	ea41 0100 	orr.w	r1, r1, r0
   d7a5a:	f04f 0000 	mov.w	r0, #0
   d7a5e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7a62:	e7b6      	b.n	d79d2 <__aeabi_ddiv+0x82>
   d7a64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7a68:	bf04      	itt	eq
   d7a6a:	4301      	orreq	r1, r0
   d7a6c:	2000      	moveq	r0, #0
   d7a6e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7a72:	bf88      	it	hi
   d7a74:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7a78:	f63f aeaf 	bhi.w	d77da <__aeabi_dmul+0xde>
   d7a7c:	ebb5 0c03 	subs.w	ip, r5, r3
   d7a80:	bf04      	itt	eq
   d7a82:	ebb6 0c02 	subseq.w	ip, r6, r2
   d7a86:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7a8a:	f150 0000 	adcs.w	r0, r0, #0
   d7a8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7a92:	bd70      	pop	{r4, r5, r6, pc}
   d7a94:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7a98:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7a9c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7aa0:	bfc2      	ittt	gt
   d7aa2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7aa6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7aaa:	bd70      	popgt	{r4, r5, r6, pc}
   d7aac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7ab0:	f04f 0e00 	mov.w	lr, #0
   d7ab4:	3c01      	subs	r4, #1
   d7ab6:	e690      	b.n	d77da <__aeabi_dmul+0xde>
   d7ab8:	ea45 0e06 	orr.w	lr, r5, r6
   d7abc:	e68d      	b.n	d77da <__aeabi_dmul+0xde>
   d7abe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7ac2:	ea94 0f0c 	teq	r4, ip
   d7ac6:	bf08      	it	eq
   d7ac8:	ea95 0f0c 	teqeq	r5, ip
   d7acc:	f43f af3b 	beq.w	d7946 <__aeabi_dmul+0x24a>
   d7ad0:	ea94 0f0c 	teq	r4, ip
   d7ad4:	d10a      	bne.n	d7aec <__aeabi_ddiv+0x19c>
   d7ad6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7ada:	f47f af34 	bne.w	d7946 <__aeabi_dmul+0x24a>
   d7ade:	ea95 0f0c 	teq	r5, ip
   d7ae2:	f47f af25 	bne.w	d7930 <__aeabi_dmul+0x234>
   d7ae6:	4610      	mov	r0, r2
   d7ae8:	4619      	mov	r1, r3
   d7aea:	e72c      	b.n	d7946 <__aeabi_dmul+0x24a>
   d7aec:	ea95 0f0c 	teq	r5, ip
   d7af0:	d106      	bne.n	d7b00 <__aeabi_ddiv+0x1b0>
   d7af2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7af6:	f43f aefd 	beq.w	d78f4 <__aeabi_dmul+0x1f8>
   d7afa:	4610      	mov	r0, r2
   d7afc:	4619      	mov	r1, r3
   d7afe:	e722      	b.n	d7946 <__aeabi_dmul+0x24a>
   d7b00:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7b04:	bf18      	it	ne
   d7b06:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7b0a:	f47f aec5 	bne.w	d7898 <__aeabi_dmul+0x19c>
   d7b0e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7b12:	f47f af0d 	bne.w	d7930 <__aeabi_dmul+0x234>
   d7b16:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d7b1a:	f47f aeeb 	bne.w	d78f4 <__aeabi_dmul+0x1f8>
   d7b1e:	e712      	b.n	d7946 <__aeabi_dmul+0x24a>

000d7b20 <__gedf2>:
   d7b20:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d7b24:	e006      	b.n	d7b34 <__cmpdf2+0x4>
   d7b26:	bf00      	nop

000d7b28 <__ledf2>:
   d7b28:	f04f 0c01 	mov.w	ip, #1
   d7b2c:	e002      	b.n	d7b34 <__cmpdf2+0x4>
   d7b2e:	bf00      	nop

000d7b30 <__cmpdf2>:
   d7b30:	f04f 0c01 	mov.w	ip, #1
   d7b34:	f84d cd04 	str.w	ip, [sp, #-4]!
   d7b38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7b3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7b40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7b44:	bf18      	it	ne
   d7b46:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d7b4a:	d01b      	beq.n	d7b84 <__cmpdf2+0x54>
   d7b4c:	b001      	add	sp, #4
   d7b4e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d7b52:	bf0c      	ite	eq
   d7b54:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d7b58:	ea91 0f03 	teqne	r1, r3
   d7b5c:	bf02      	ittt	eq
   d7b5e:	ea90 0f02 	teqeq	r0, r2
   d7b62:	2000      	moveq	r0, #0
   d7b64:	4770      	bxeq	lr
   d7b66:	f110 0f00 	cmn.w	r0, #0
   d7b6a:	ea91 0f03 	teq	r1, r3
   d7b6e:	bf58      	it	pl
   d7b70:	4299      	cmppl	r1, r3
   d7b72:	bf08      	it	eq
   d7b74:	4290      	cmpeq	r0, r2
   d7b76:	bf2c      	ite	cs
   d7b78:	17d8      	asrcs	r0, r3, #31
   d7b7a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d7b7e:	f040 0001 	orr.w	r0, r0, #1
   d7b82:	4770      	bx	lr
   d7b84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7b8c:	d102      	bne.n	d7b94 <__cmpdf2+0x64>
   d7b8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7b92:	d107      	bne.n	d7ba4 <__cmpdf2+0x74>
   d7b94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7b98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7b9c:	d1d6      	bne.n	d7b4c <__cmpdf2+0x1c>
   d7b9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7ba2:	d0d3      	beq.n	d7b4c <__cmpdf2+0x1c>
   d7ba4:	f85d 0b04 	ldr.w	r0, [sp], #4
   d7ba8:	4770      	bx	lr
   d7baa:	bf00      	nop

000d7bac <__aeabi_cdrcmple>:
   d7bac:	4684      	mov	ip, r0
   d7bae:	4610      	mov	r0, r2
   d7bb0:	4662      	mov	r2, ip
   d7bb2:	468c      	mov	ip, r1
   d7bb4:	4619      	mov	r1, r3
   d7bb6:	4663      	mov	r3, ip
   d7bb8:	e000      	b.n	d7bbc <__aeabi_cdcmpeq>
   d7bba:	bf00      	nop

000d7bbc <__aeabi_cdcmpeq>:
   d7bbc:	b501      	push	{r0, lr}
   d7bbe:	f7ff ffb7 	bl	d7b30 <__cmpdf2>
   d7bc2:	2800      	cmp	r0, #0
   d7bc4:	bf48      	it	mi
   d7bc6:	f110 0f00 	cmnmi.w	r0, #0
   d7bca:	bd01      	pop	{r0, pc}

000d7bcc <__aeabi_dcmpeq>:
   d7bcc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7bd0:	f7ff fff4 	bl	d7bbc <__aeabi_cdcmpeq>
   d7bd4:	bf0c      	ite	eq
   d7bd6:	2001      	moveq	r0, #1
   d7bd8:	2000      	movne	r0, #0
   d7bda:	f85d fb08 	ldr.w	pc, [sp], #8
   d7bde:	bf00      	nop

000d7be0 <__aeabi_dcmplt>:
   d7be0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7be4:	f7ff ffea 	bl	d7bbc <__aeabi_cdcmpeq>
   d7be8:	bf34      	ite	cc
   d7bea:	2001      	movcc	r0, #1
   d7bec:	2000      	movcs	r0, #0
   d7bee:	f85d fb08 	ldr.w	pc, [sp], #8
   d7bf2:	bf00      	nop

000d7bf4 <__aeabi_dcmple>:
   d7bf4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7bf8:	f7ff ffe0 	bl	d7bbc <__aeabi_cdcmpeq>
   d7bfc:	bf94      	ite	ls
   d7bfe:	2001      	movls	r0, #1
   d7c00:	2000      	movhi	r0, #0
   d7c02:	f85d fb08 	ldr.w	pc, [sp], #8
   d7c06:	bf00      	nop

000d7c08 <__aeabi_dcmpge>:
   d7c08:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7c0c:	f7ff ffce 	bl	d7bac <__aeabi_cdrcmple>
   d7c10:	bf94      	ite	ls
   d7c12:	2001      	movls	r0, #1
   d7c14:	2000      	movhi	r0, #0
   d7c16:	f85d fb08 	ldr.w	pc, [sp], #8
   d7c1a:	bf00      	nop

000d7c1c <__aeabi_dcmpgt>:
   d7c1c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7c20:	f7ff ffc4 	bl	d7bac <__aeabi_cdrcmple>
   d7c24:	bf34      	ite	cc
   d7c26:	2001      	movcc	r0, #1
   d7c28:	2000      	movcs	r0, #0
   d7c2a:	f85d fb08 	ldr.w	pc, [sp], #8
   d7c2e:	bf00      	nop

000d7c30 <__aeabi_dcmpun>:
   d7c30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7c34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7c38:	d102      	bne.n	d7c40 <__aeabi_dcmpun+0x10>
   d7c3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7c3e:	d10a      	bne.n	d7c56 <__aeabi_dcmpun+0x26>
   d7c40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7c44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7c48:	d102      	bne.n	d7c50 <__aeabi_dcmpun+0x20>
   d7c4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7c4e:	d102      	bne.n	d7c56 <__aeabi_dcmpun+0x26>
   d7c50:	f04f 0000 	mov.w	r0, #0
   d7c54:	4770      	bx	lr
   d7c56:	f04f 0001 	mov.w	r0, #1
   d7c5a:	4770      	bx	lr

000d7c5c <__aeabi_d2iz>:
   d7c5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7c60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7c64:	d215      	bcs.n	d7c92 <__aeabi_d2iz+0x36>
   d7c66:	d511      	bpl.n	d7c8c <__aeabi_d2iz+0x30>
   d7c68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7c6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7c70:	d912      	bls.n	d7c98 <__aeabi_d2iz+0x3c>
   d7c72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7c76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7c7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7c7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7c82:	fa23 f002 	lsr.w	r0, r3, r2
   d7c86:	bf18      	it	ne
   d7c88:	4240      	negne	r0, r0
   d7c8a:	4770      	bx	lr
   d7c8c:	f04f 0000 	mov.w	r0, #0
   d7c90:	4770      	bx	lr
   d7c92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7c96:	d105      	bne.n	d7ca4 <__aeabi_d2iz+0x48>
   d7c98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d7c9c:	bf08      	it	eq
   d7c9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7ca2:	4770      	bx	lr
   d7ca4:	f04f 0000 	mov.w	r0, #0
   d7ca8:	4770      	bx	lr
   d7caa:	bf00      	nop

000d7cac <__aeabi_d2uiz>:
   d7cac:	004a      	lsls	r2, r1, #1
   d7cae:	d211      	bcs.n	d7cd4 <__aeabi_d2uiz+0x28>
   d7cb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7cb4:	d211      	bcs.n	d7cda <__aeabi_d2uiz+0x2e>
   d7cb6:	d50d      	bpl.n	d7cd4 <__aeabi_d2uiz+0x28>
   d7cb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7cbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7cc0:	d40e      	bmi.n	d7ce0 <__aeabi_d2uiz+0x34>
   d7cc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7cc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7cca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7cce:	fa23 f002 	lsr.w	r0, r3, r2
   d7cd2:	4770      	bx	lr
   d7cd4:	f04f 0000 	mov.w	r0, #0
   d7cd8:	4770      	bx	lr
   d7cda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7cde:	d102      	bne.n	d7ce6 <__aeabi_d2uiz+0x3a>
   d7ce0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d7ce4:	4770      	bx	lr
   d7ce6:	f04f 0000 	mov.w	r0, #0
   d7cea:	4770      	bx	lr

000d7cec <__aeabi_d2f>:
   d7cec:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7cf0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d7cf4:	bf24      	itt	cs
   d7cf6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d7cfa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d7cfe:	d90d      	bls.n	d7d1c <__aeabi_d2f+0x30>
   d7d00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d7d04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d7d08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d7d0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d7d10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d7d14:	bf08      	it	eq
   d7d16:	f020 0001 	biceq.w	r0, r0, #1
   d7d1a:	4770      	bx	lr
   d7d1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7d20:	d121      	bne.n	d7d66 <__aeabi_d2f+0x7a>
   d7d22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d7d26:	bfbc      	itt	lt
   d7d28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7d2c:	4770      	bxlt	lr
   d7d2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7d32:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d7d36:	f1c2 0218 	rsb	r2, r2, #24
   d7d3a:	f1c2 0c20 	rsb	ip, r2, #32
   d7d3e:	fa10 f30c 	lsls.w	r3, r0, ip
   d7d42:	fa20 f002 	lsr.w	r0, r0, r2
   d7d46:	bf18      	it	ne
   d7d48:	f040 0001 	orrne.w	r0, r0, #1
   d7d4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7d50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7d54:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7d58:	ea40 000c 	orr.w	r0, r0, ip
   d7d5c:	fa23 f302 	lsr.w	r3, r3, r2
   d7d60:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7d64:	e7cc      	b.n	d7d00 <__aeabi_d2f+0x14>
   d7d66:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d7d6a:	d107      	bne.n	d7d7c <__aeabi_d2f+0x90>
   d7d6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7d70:	bf1e      	ittt	ne
   d7d72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d7d76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d7d7a:	4770      	bxne	lr
   d7d7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7d80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7d84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7d88:	4770      	bx	lr
   d7d8a:	bf00      	nop

000d7d8c <__aeabi_uldivmod>:
   d7d8c:	b953      	cbnz	r3, d7da4 <__aeabi_uldivmod+0x18>
   d7d8e:	b94a      	cbnz	r2, d7da4 <__aeabi_uldivmod+0x18>
   d7d90:	2900      	cmp	r1, #0
   d7d92:	bf08      	it	eq
   d7d94:	2800      	cmpeq	r0, #0
   d7d96:	bf1c      	itt	ne
   d7d98:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d7d9c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   d7da0:	f000 b9a2 	b.w	d80e8 <__aeabi_idiv0>
   d7da4:	f1ad 0c08 	sub.w	ip, sp, #8
   d7da8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d7dac:	f000 f82a 	bl	d7e04 <__udivmoddi4>
   d7db0:	f8dd e004 	ldr.w	lr, [sp, #4]
   d7db4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d7db8:	b004      	add	sp, #16
   d7dba:	4770      	bx	lr

000d7dbc <__aeabi_d2ulz>:
   d7dbc:	b5d0      	push	{r4, r6, r7, lr}
   d7dbe:	2200      	movs	r2, #0
   d7dc0:	4b0e      	ldr	r3, [pc, #56]	; (d7dfc <__aeabi_d2ulz+0x40>)
   d7dc2:	4606      	mov	r6, r0
   d7dc4:	460f      	mov	r7, r1
   d7dc6:	f7ff fc99 	bl	d76fc <__aeabi_dmul>
   d7dca:	f7ff ff6f 	bl	d7cac <__aeabi_d2uiz>
   d7dce:	4604      	mov	r4, r0
   d7dd0:	f7ff fc1e 	bl	d7610 <__aeabi_ui2d>
   d7dd4:	2200      	movs	r2, #0
   d7dd6:	4b0a      	ldr	r3, [pc, #40]	; (d7e00 <__aeabi_d2ulz+0x44>)
   d7dd8:	f7ff fc90 	bl	d76fc <__aeabi_dmul>
   d7ddc:	4602      	mov	r2, r0
   d7dde:	460b      	mov	r3, r1
   d7de0:	4630      	mov	r0, r6
   d7de2:	4639      	mov	r1, r7
   d7de4:	f7ff fad6 	bl	d7394 <__aeabi_dsub>
   d7de8:	f7ff ff60 	bl	d7cac <__aeabi_d2uiz>
   d7dec:	4623      	mov	r3, r4
   d7dee:	2200      	movs	r2, #0
   d7df0:	ea42 0200 	orr.w	r2, r2, r0
   d7df4:	4610      	mov	r0, r2
   d7df6:	4619      	mov	r1, r3
   d7df8:	bdd0      	pop	{r4, r6, r7, pc}
   d7dfa:	bf00      	nop
   d7dfc:	3df00000 	.word	0x3df00000
   d7e00:	41f00000 	.word	0x41f00000

000d7e04 <__udivmoddi4>:
   d7e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7e08:	468c      	mov	ip, r1
   d7e0a:	460e      	mov	r6, r1
   d7e0c:	4604      	mov	r4, r0
   d7e0e:	9d08      	ldr	r5, [sp, #32]
   d7e10:	2b00      	cmp	r3, #0
   d7e12:	d150      	bne.n	d7eb6 <__udivmoddi4+0xb2>
   d7e14:	428a      	cmp	r2, r1
   d7e16:	4617      	mov	r7, r2
   d7e18:	d96c      	bls.n	d7ef4 <__udivmoddi4+0xf0>
   d7e1a:	fab2 fe82 	clz	lr, r2
   d7e1e:	f1be 0f00 	cmp.w	lr, #0
   d7e22:	d00b      	beq.n	d7e3c <__udivmoddi4+0x38>
   d7e24:	f1ce 0420 	rsb	r4, lr, #32
   d7e28:	fa20 f404 	lsr.w	r4, r0, r4
   d7e2c:	fa01 f60e 	lsl.w	r6, r1, lr
   d7e30:	ea44 0c06 	orr.w	ip, r4, r6
   d7e34:	fa02 f70e 	lsl.w	r7, r2, lr
   d7e38:	fa00 f40e 	lsl.w	r4, r0, lr
   d7e3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d7e40:	0c22      	lsrs	r2, r4, #16
   d7e42:	fbbc f0f9 	udiv	r0, ip, r9
   d7e46:	fa1f f887 	uxth.w	r8, r7
   d7e4a:	fb09 c610 	mls	r6, r9, r0, ip
   d7e4e:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d7e52:	fb00 f308 	mul.w	r3, r0, r8
   d7e56:	42b3      	cmp	r3, r6
   d7e58:	d909      	bls.n	d7e6e <__udivmoddi4+0x6a>
   d7e5a:	19f6      	adds	r6, r6, r7
   d7e5c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d7e60:	f080 8122 	bcs.w	d80a8 <__udivmoddi4+0x2a4>
   d7e64:	42b3      	cmp	r3, r6
   d7e66:	f240 811f 	bls.w	d80a8 <__udivmoddi4+0x2a4>
   d7e6a:	3802      	subs	r0, #2
   d7e6c:	443e      	add	r6, r7
   d7e6e:	1af6      	subs	r6, r6, r3
   d7e70:	b2a2      	uxth	r2, r4
   d7e72:	fbb6 f3f9 	udiv	r3, r6, r9
   d7e76:	fb09 6613 	mls	r6, r9, r3, r6
   d7e7a:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d7e7e:	fb03 f808 	mul.w	r8, r3, r8
   d7e82:	45a0      	cmp	r8, r4
   d7e84:	d909      	bls.n	d7e9a <__udivmoddi4+0x96>
   d7e86:	19e4      	adds	r4, r4, r7
   d7e88:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d7e8c:	f080 810a 	bcs.w	d80a4 <__udivmoddi4+0x2a0>
   d7e90:	45a0      	cmp	r8, r4
   d7e92:	f240 8107 	bls.w	d80a4 <__udivmoddi4+0x2a0>
   d7e96:	3b02      	subs	r3, #2
   d7e98:	443c      	add	r4, r7
   d7e9a:	ebc8 0404 	rsb	r4, r8, r4
   d7e9e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d7ea2:	2100      	movs	r1, #0
   d7ea4:	2d00      	cmp	r5, #0
   d7ea6:	d062      	beq.n	d7f6e <__udivmoddi4+0x16a>
   d7ea8:	fa24 f40e 	lsr.w	r4, r4, lr
   d7eac:	2300      	movs	r3, #0
   d7eae:	602c      	str	r4, [r5, #0]
   d7eb0:	606b      	str	r3, [r5, #4]
   d7eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7eb6:	428b      	cmp	r3, r1
   d7eb8:	d907      	bls.n	d7eca <__udivmoddi4+0xc6>
   d7eba:	2d00      	cmp	r5, #0
   d7ebc:	d055      	beq.n	d7f6a <__udivmoddi4+0x166>
   d7ebe:	2100      	movs	r1, #0
   d7ec0:	e885 0041 	stmia.w	r5, {r0, r6}
   d7ec4:	4608      	mov	r0, r1
   d7ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7eca:	fab3 f183 	clz	r1, r3
   d7ece:	2900      	cmp	r1, #0
   d7ed0:	f040 8090 	bne.w	d7ff4 <__udivmoddi4+0x1f0>
   d7ed4:	42b3      	cmp	r3, r6
   d7ed6:	d302      	bcc.n	d7ede <__udivmoddi4+0xda>
   d7ed8:	4282      	cmp	r2, r0
   d7eda:	f200 80f8 	bhi.w	d80ce <__udivmoddi4+0x2ca>
   d7ede:	1a84      	subs	r4, r0, r2
   d7ee0:	eb66 0603 	sbc.w	r6, r6, r3
   d7ee4:	2001      	movs	r0, #1
   d7ee6:	46b4      	mov	ip, r6
   d7ee8:	2d00      	cmp	r5, #0
   d7eea:	d040      	beq.n	d7f6e <__udivmoddi4+0x16a>
   d7eec:	e885 1010 	stmia.w	r5, {r4, ip}
   d7ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7ef4:	b912      	cbnz	r2, d7efc <__udivmoddi4+0xf8>
   d7ef6:	2701      	movs	r7, #1
   d7ef8:	fbb7 f7f2 	udiv	r7, r7, r2
   d7efc:	fab7 fe87 	clz	lr, r7
   d7f00:	f1be 0f00 	cmp.w	lr, #0
   d7f04:	d135      	bne.n	d7f72 <__udivmoddi4+0x16e>
   d7f06:	1bf3      	subs	r3, r6, r7
   d7f08:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d7f0c:	fa1f fc87 	uxth.w	ip, r7
   d7f10:	2101      	movs	r1, #1
   d7f12:	fbb3 f0f8 	udiv	r0, r3, r8
   d7f16:	0c22      	lsrs	r2, r4, #16
   d7f18:	fb08 3610 	mls	r6, r8, r0, r3
   d7f1c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d7f20:	fb0c f300 	mul.w	r3, ip, r0
   d7f24:	42b3      	cmp	r3, r6
   d7f26:	d907      	bls.n	d7f38 <__udivmoddi4+0x134>
   d7f28:	19f6      	adds	r6, r6, r7
   d7f2a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d7f2e:	d202      	bcs.n	d7f36 <__udivmoddi4+0x132>
   d7f30:	42b3      	cmp	r3, r6
   d7f32:	f200 80ce 	bhi.w	d80d2 <__udivmoddi4+0x2ce>
   d7f36:	4610      	mov	r0, r2
   d7f38:	1af6      	subs	r6, r6, r3
   d7f3a:	b2a2      	uxth	r2, r4
   d7f3c:	fbb6 f3f8 	udiv	r3, r6, r8
   d7f40:	fb08 6613 	mls	r6, r8, r3, r6
   d7f44:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d7f48:	fb0c fc03 	mul.w	ip, ip, r3
   d7f4c:	45a4      	cmp	ip, r4
   d7f4e:	d907      	bls.n	d7f60 <__udivmoddi4+0x15c>
   d7f50:	19e4      	adds	r4, r4, r7
   d7f52:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d7f56:	d202      	bcs.n	d7f5e <__udivmoddi4+0x15a>
   d7f58:	45a4      	cmp	ip, r4
   d7f5a:	f200 80b5 	bhi.w	d80c8 <__udivmoddi4+0x2c4>
   d7f5e:	4613      	mov	r3, r2
   d7f60:	ebcc 0404 	rsb	r4, ip, r4
   d7f64:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d7f68:	e79c      	b.n	d7ea4 <__udivmoddi4+0xa0>
   d7f6a:	4629      	mov	r1, r5
   d7f6c:	4628      	mov	r0, r5
   d7f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7f72:	f1ce 0120 	rsb	r1, lr, #32
   d7f76:	fa06 f30e 	lsl.w	r3, r6, lr
   d7f7a:	fa07 f70e 	lsl.w	r7, r7, lr
   d7f7e:	fa20 f901 	lsr.w	r9, r0, r1
   d7f82:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d7f86:	40ce      	lsrs	r6, r1
   d7f88:	ea49 0903 	orr.w	r9, r9, r3
   d7f8c:	fbb6 faf8 	udiv	sl, r6, r8
   d7f90:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d7f94:	fb08 661a 	mls	r6, r8, sl, r6
   d7f98:	fa1f fc87 	uxth.w	ip, r7
   d7f9c:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d7fa0:	fb0a f20c 	mul.w	r2, sl, ip
   d7fa4:	429a      	cmp	r2, r3
   d7fa6:	fa00 f40e 	lsl.w	r4, r0, lr
   d7faa:	d90a      	bls.n	d7fc2 <__udivmoddi4+0x1be>
   d7fac:	19db      	adds	r3, r3, r7
   d7fae:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
   d7fb2:	f080 8087 	bcs.w	d80c4 <__udivmoddi4+0x2c0>
   d7fb6:	429a      	cmp	r2, r3
   d7fb8:	f240 8084 	bls.w	d80c4 <__udivmoddi4+0x2c0>
   d7fbc:	f1aa 0a02 	sub.w	sl, sl, #2
   d7fc0:	443b      	add	r3, r7
   d7fc2:	1a9b      	subs	r3, r3, r2
   d7fc4:	fa1f f989 	uxth.w	r9, r9
   d7fc8:	fbb3 f1f8 	udiv	r1, r3, r8
   d7fcc:	fb08 3311 	mls	r3, r8, r1, r3
   d7fd0:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d7fd4:	fb01 f60c 	mul.w	r6, r1, ip
   d7fd8:	429e      	cmp	r6, r3
   d7fda:	d907      	bls.n	d7fec <__udivmoddi4+0x1e8>
   d7fdc:	19db      	adds	r3, r3, r7
   d7fde:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
   d7fe2:	d26b      	bcs.n	d80bc <__udivmoddi4+0x2b8>
   d7fe4:	429e      	cmp	r6, r3
   d7fe6:	d969      	bls.n	d80bc <__udivmoddi4+0x2b8>
   d7fe8:	3902      	subs	r1, #2
   d7fea:	443b      	add	r3, r7
   d7fec:	1b9b      	subs	r3, r3, r6
   d7fee:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d7ff2:	e78e      	b.n	d7f12 <__udivmoddi4+0x10e>
   d7ff4:	f1c1 0e20 	rsb	lr, r1, #32
   d7ff8:	fa22 f40e 	lsr.w	r4, r2, lr
   d7ffc:	408b      	lsls	r3, r1
   d7ffe:	4323      	orrs	r3, r4
   d8000:	fa20 f70e 	lsr.w	r7, r0, lr
   d8004:	fa06 f401 	lsl.w	r4, r6, r1
   d8008:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d800c:	fa26 f60e 	lsr.w	r6, r6, lr
   d8010:	433c      	orrs	r4, r7
   d8012:	fbb6 f9fc 	udiv	r9, r6, ip
   d8016:	0c27      	lsrs	r7, r4, #16
   d8018:	fb0c 6619 	mls	r6, ip, r9, r6
   d801c:	fa1f f883 	uxth.w	r8, r3
   d8020:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d8024:	fb09 f708 	mul.w	r7, r9, r8
   d8028:	42b7      	cmp	r7, r6
   d802a:	fa02 f201 	lsl.w	r2, r2, r1
   d802e:	fa00 fa01 	lsl.w	sl, r0, r1
   d8032:	d908      	bls.n	d8046 <__udivmoddi4+0x242>
   d8034:	18f6      	adds	r6, r6, r3
   d8036:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d803a:	d241      	bcs.n	d80c0 <__udivmoddi4+0x2bc>
   d803c:	42b7      	cmp	r7, r6
   d803e:	d93f      	bls.n	d80c0 <__udivmoddi4+0x2bc>
   d8040:	f1a9 0902 	sub.w	r9, r9, #2
   d8044:	441e      	add	r6, r3
   d8046:	1bf6      	subs	r6, r6, r7
   d8048:	b2a0      	uxth	r0, r4
   d804a:	fbb6 f4fc 	udiv	r4, r6, ip
   d804e:	fb0c 6614 	mls	r6, ip, r4, r6
   d8052:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d8056:	fb04 f808 	mul.w	r8, r4, r8
   d805a:	45b8      	cmp	r8, r7
   d805c:	d907      	bls.n	d806e <__udivmoddi4+0x26a>
   d805e:	18ff      	adds	r7, r7, r3
   d8060:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
   d8064:	d228      	bcs.n	d80b8 <__udivmoddi4+0x2b4>
   d8066:	45b8      	cmp	r8, r7
   d8068:	d926      	bls.n	d80b8 <__udivmoddi4+0x2b4>
   d806a:	3c02      	subs	r4, #2
   d806c:	441f      	add	r7, r3
   d806e:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d8072:	ebc8 0707 	rsb	r7, r8, r7
   d8076:	fba0 8902 	umull	r8, r9, r0, r2
   d807a:	454f      	cmp	r7, r9
   d807c:	4644      	mov	r4, r8
   d807e:	464e      	mov	r6, r9
   d8080:	d314      	bcc.n	d80ac <__udivmoddi4+0x2a8>
   d8082:	d029      	beq.n	d80d8 <__udivmoddi4+0x2d4>
   d8084:	b365      	cbz	r5, d80e0 <__udivmoddi4+0x2dc>
   d8086:	ebba 0304 	subs.w	r3, sl, r4
   d808a:	eb67 0706 	sbc.w	r7, r7, r6
   d808e:	fa07 fe0e 	lsl.w	lr, r7, lr
   d8092:	40cb      	lsrs	r3, r1
   d8094:	40cf      	lsrs	r7, r1
   d8096:	ea4e 0303 	orr.w	r3, lr, r3
   d809a:	e885 0088 	stmia.w	r5, {r3, r7}
   d809e:	2100      	movs	r1, #0
   d80a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d80a4:	4613      	mov	r3, r2
   d80a6:	e6f8      	b.n	d7e9a <__udivmoddi4+0x96>
   d80a8:	4610      	mov	r0, r2
   d80aa:	e6e0      	b.n	d7e6e <__udivmoddi4+0x6a>
   d80ac:	ebb8 0402 	subs.w	r4, r8, r2
   d80b0:	eb69 0603 	sbc.w	r6, r9, r3
   d80b4:	3801      	subs	r0, #1
   d80b6:	e7e5      	b.n	d8084 <__udivmoddi4+0x280>
   d80b8:	4604      	mov	r4, r0
   d80ba:	e7d8      	b.n	d806e <__udivmoddi4+0x26a>
   d80bc:	4611      	mov	r1, r2
   d80be:	e795      	b.n	d7fec <__udivmoddi4+0x1e8>
   d80c0:	4681      	mov	r9, r0
   d80c2:	e7c0      	b.n	d8046 <__udivmoddi4+0x242>
   d80c4:	468a      	mov	sl, r1
   d80c6:	e77c      	b.n	d7fc2 <__udivmoddi4+0x1be>
   d80c8:	3b02      	subs	r3, #2
   d80ca:	443c      	add	r4, r7
   d80cc:	e748      	b.n	d7f60 <__udivmoddi4+0x15c>
   d80ce:	4608      	mov	r0, r1
   d80d0:	e70a      	b.n	d7ee8 <__udivmoddi4+0xe4>
   d80d2:	3802      	subs	r0, #2
   d80d4:	443e      	add	r6, r7
   d80d6:	e72f      	b.n	d7f38 <__udivmoddi4+0x134>
   d80d8:	45c2      	cmp	sl, r8
   d80da:	d3e7      	bcc.n	d80ac <__udivmoddi4+0x2a8>
   d80dc:	463e      	mov	r6, r7
   d80de:	e7d1      	b.n	d8084 <__udivmoddi4+0x280>
   d80e0:	4629      	mov	r1, r5
   d80e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d80e6:	bf00      	nop

000d80e8 <__aeabi_idiv0>:
   d80e8:	4770      	bx	lr
   d80ea:	bf00      	nop

000d80ec <atol>:
   d80ec:	220a      	movs	r2, #10
   d80ee:	2100      	movs	r1, #0
   d80f0:	f000 b90c 	b.w	d830c <strtol>

000d80f4 <__cxa_atexit>:
   d80f4:	b510      	push	{r4, lr}
   d80f6:	4c05      	ldr	r4, [pc, #20]	; (d810c <__cxa_atexit+0x18>)
   d80f8:	4613      	mov	r3, r2
   d80fa:	b12c      	cbz	r4, d8108 <__cxa_atexit+0x14>
   d80fc:	460a      	mov	r2, r1
   d80fe:	4601      	mov	r1, r0
   d8100:	2002      	movs	r0, #2
   d8102:	f3af 8000 	nop.w
   d8106:	bd10      	pop	{r4, pc}
   d8108:	4620      	mov	r0, r4
   d810a:	bd10      	pop	{r4, pc}
   d810c:	00000000 	.word	0x00000000

000d8110 <memcpy>:
   d8110:	b510      	push	{r4, lr}
   d8112:	1e43      	subs	r3, r0, #1
   d8114:	440a      	add	r2, r1
   d8116:	4291      	cmp	r1, r2
   d8118:	d004      	beq.n	d8124 <memcpy+0x14>
   d811a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d811e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8122:	e7f8      	b.n	d8116 <memcpy+0x6>
   d8124:	bd10      	pop	{r4, pc}

000d8126 <memset>:
   d8126:	4402      	add	r2, r0
   d8128:	4603      	mov	r3, r0
   d812a:	4293      	cmp	r3, r2
   d812c:	d002      	beq.n	d8134 <memset+0xe>
   d812e:	f803 1b01 	strb.w	r1, [r3], #1
   d8132:	e7fa      	b.n	d812a <memset+0x4>
   d8134:	4770      	bx	lr
	...

000d8138 <srand>:
   d8138:	b538      	push	{r3, r4, r5, lr}
   d813a:	4b12      	ldr	r3, [pc, #72]	; (d8184 <srand+0x4c>)
   d813c:	681c      	ldr	r4, [r3, #0]
   d813e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8140:	4605      	mov	r5, r0
   d8142:	b9d3      	cbnz	r3, d817a <srand+0x42>
   d8144:	2018      	movs	r0, #24
   d8146:	f7fd f99f 	bl	d5488 <malloc>
   d814a:	f243 330e 	movw	r3, #13070	; 0x330e
   d814e:	63a0      	str	r0, [r4, #56]	; 0x38
   d8150:	8003      	strh	r3, [r0, #0]
   d8152:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d8156:	8043      	strh	r3, [r0, #2]
   d8158:	f241 2334 	movw	r3, #4660	; 0x1234
   d815c:	8083      	strh	r3, [r0, #4]
   d815e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d8162:	80c3      	strh	r3, [r0, #6]
   d8164:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d8168:	8103      	strh	r3, [r0, #8]
   d816a:	2305      	movs	r3, #5
   d816c:	8143      	strh	r3, [r0, #10]
   d816e:	230b      	movs	r3, #11
   d8170:	8183      	strh	r3, [r0, #12]
   d8172:	2201      	movs	r2, #1
   d8174:	2300      	movs	r3, #0
   d8176:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d817a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d817c:	2200      	movs	r2, #0
   d817e:	611d      	str	r5, [r3, #16]
   d8180:	615a      	str	r2, [r3, #20]
   d8182:	bd38      	pop	{r3, r4, r5, pc}
   d8184:	2003e264 	.word	0x2003e264

000d8188 <strcat>:
   d8188:	b510      	push	{r4, lr}
   d818a:	4602      	mov	r2, r0
   d818c:	4613      	mov	r3, r2
   d818e:	3201      	adds	r2, #1
   d8190:	781c      	ldrb	r4, [r3, #0]
   d8192:	2c00      	cmp	r4, #0
   d8194:	d1fa      	bne.n	d818c <strcat+0x4>
   d8196:	3b01      	subs	r3, #1
   d8198:	f811 2b01 	ldrb.w	r2, [r1], #1
   d819c:	f803 2f01 	strb.w	r2, [r3, #1]!
   d81a0:	2a00      	cmp	r2, #0
   d81a2:	d1f9      	bne.n	d8198 <strcat+0x10>
   d81a4:	bd10      	pop	{r4, pc}

000d81a6 <strcpy>:
   d81a6:	4603      	mov	r3, r0
   d81a8:	f811 2b01 	ldrb.w	r2, [r1], #1
   d81ac:	f803 2b01 	strb.w	r2, [r3], #1
   d81b0:	2a00      	cmp	r2, #0
   d81b2:	d1f9      	bne.n	d81a8 <strcpy+0x2>
   d81b4:	4770      	bx	lr
	...

000d81b8 <strdup>:
   d81b8:	4b02      	ldr	r3, [pc, #8]	; (d81c4 <strdup+0xc>)
   d81ba:	4601      	mov	r1, r0
   d81bc:	6818      	ldr	r0, [r3, #0]
   d81be:	f000 b803 	b.w	d81c8 <_strdup_r>
   d81c2:	bf00      	nop
   d81c4:	2003e264 	.word	0x2003e264

000d81c8 <_strdup_r>:
   d81c8:	b570      	push	{r4, r5, r6, lr}
   d81ca:	4606      	mov	r6, r0
   d81cc:	4608      	mov	r0, r1
   d81ce:	460c      	mov	r4, r1
   d81d0:	f000 f80d 	bl	d81ee <strlen>
   d81d4:	1c45      	adds	r5, r0, #1
   d81d6:	4629      	mov	r1, r5
   d81d8:	4630      	mov	r0, r6
   d81da:	f7fd f985 	bl	d54e8 <_malloc_r>
   d81de:	4606      	mov	r6, r0
   d81e0:	b118      	cbz	r0, d81ea <_strdup_r+0x22>
   d81e2:	462a      	mov	r2, r5
   d81e4:	4621      	mov	r1, r4
   d81e6:	f7ff ff93 	bl	d8110 <memcpy>
   d81ea:	4630      	mov	r0, r6
   d81ec:	bd70      	pop	{r4, r5, r6, pc}

000d81ee <strlen>:
   d81ee:	4603      	mov	r3, r0
   d81f0:	f813 2b01 	ldrb.w	r2, [r3], #1
   d81f4:	2a00      	cmp	r2, #0
   d81f6:	d1fb      	bne.n	d81f0 <strlen+0x2>
   d81f8:	1a18      	subs	r0, r3, r0
   d81fa:	3801      	subs	r0, #1
   d81fc:	4770      	bx	lr
	...

000d8200 <_strtol_r>:
   d8200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8204:	4680      	mov	r8, r0
   d8206:	4840      	ldr	r0, [pc, #256]	; (d8308 <_strtol_r+0x108>)
   d8208:	f8d0 9000 	ldr.w	r9, [r0]
   d820c:	460f      	mov	r7, r1
   d820e:	463d      	mov	r5, r7
   d8210:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8214:	eb09 0004 	add.w	r0, r9, r4
   d8218:	7840      	ldrb	r0, [r0, #1]
   d821a:	f000 0008 	and.w	r0, r0, #8
   d821e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d8222:	b108      	cbz	r0, d8228 <_strtol_r+0x28>
   d8224:	462f      	mov	r7, r5
   d8226:	e7f2      	b.n	d820e <_strtol_r+0xe>
   d8228:	2c2d      	cmp	r4, #45	; 0x2d
   d822a:	d103      	bne.n	d8234 <_strtol_r+0x34>
   d822c:	1cbd      	adds	r5, r7, #2
   d822e:	787c      	ldrb	r4, [r7, #1]
   d8230:	2601      	movs	r6, #1
   d8232:	e003      	b.n	d823c <_strtol_r+0x3c>
   d8234:	2c2b      	cmp	r4, #43	; 0x2b
   d8236:	bf04      	itt	eq
   d8238:	787c      	ldrbeq	r4, [r7, #1]
   d823a:	1cbd      	addeq	r5, r7, #2
   d823c:	b113      	cbz	r3, d8244 <_strtol_r+0x44>
   d823e:	2b10      	cmp	r3, #16
   d8240:	d10a      	bne.n	d8258 <_strtol_r+0x58>
   d8242:	e05b      	b.n	d82fc <_strtol_r+0xfc>
   d8244:	2c30      	cmp	r4, #48	; 0x30
   d8246:	d157      	bne.n	d82f8 <_strtol_r+0xf8>
   d8248:	7828      	ldrb	r0, [r5, #0]
   d824a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d824e:	2858      	cmp	r0, #88	; 0x58
   d8250:	d14d      	bne.n	d82ee <_strtol_r+0xee>
   d8252:	786c      	ldrb	r4, [r5, #1]
   d8254:	2310      	movs	r3, #16
   d8256:	3502      	adds	r5, #2
   d8258:	2e00      	cmp	r6, #0
   d825a:	bf14      	ite	ne
   d825c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d8260:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d8264:	2700      	movs	r7, #0
   d8266:	fbbc faf3 	udiv	sl, ip, r3
   d826a:	4638      	mov	r0, r7
   d826c:	fb03 cc1a 	mls	ip, r3, sl, ip
   d8270:	eb09 0e04 	add.w	lr, r9, r4
   d8274:	f89e e001 	ldrb.w	lr, [lr, #1]
   d8278:	f01e 0f04 	tst.w	lr, #4
   d827c:	d001      	beq.n	d8282 <_strtol_r+0x82>
   d827e:	3c30      	subs	r4, #48	; 0x30
   d8280:	e00b      	b.n	d829a <_strtol_r+0x9a>
   d8282:	f01e 0e03 	ands.w	lr, lr, #3
   d8286:	d01b      	beq.n	d82c0 <_strtol_r+0xc0>
   d8288:	f1be 0f01 	cmp.w	lr, #1
   d828c:	bf0c      	ite	eq
   d828e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d8292:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d8296:	ebce 0404 	rsb	r4, lr, r4
   d829a:	42a3      	cmp	r3, r4
   d829c:	dd10      	ble.n	d82c0 <_strtol_r+0xc0>
   d829e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d82a2:	d00a      	beq.n	d82ba <_strtol_r+0xba>
   d82a4:	4550      	cmp	r0, sl
   d82a6:	d806      	bhi.n	d82b6 <_strtol_r+0xb6>
   d82a8:	d101      	bne.n	d82ae <_strtol_r+0xae>
   d82aa:	4564      	cmp	r4, ip
   d82ac:	dc03      	bgt.n	d82b6 <_strtol_r+0xb6>
   d82ae:	fb03 4000 	mla	r0, r3, r0, r4
   d82b2:	2701      	movs	r7, #1
   d82b4:	e001      	b.n	d82ba <_strtol_r+0xba>
   d82b6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d82ba:	f815 4b01 	ldrb.w	r4, [r5], #1
   d82be:	e7d7      	b.n	d8270 <_strtol_r+0x70>
   d82c0:	1c7b      	adds	r3, r7, #1
   d82c2:	d10c      	bne.n	d82de <_strtol_r+0xde>
   d82c4:	2e00      	cmp	r6, #0
   d82c6:	f04f 0322 	mov.w	r3, #34	; 0x22
   d82ca:	bf14      	ite	ne
   d82cc:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d82d0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d82d4:	f8c8 3000 	str.w	r3, [r8]
   d82d8:	b92a      	cbnz	r2, d82e6 <_strtol_r+0xe6>
   d82da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d82de:	b106      	cbz	r6, d82e2 <_strtol_r+0xe2>
   d82e0:	4240      	negs	r0, r0
   d82e2:	b172      	cbz	r2, d8302 <_strtol_r+0x102>
   d82e4:	b107      	cbz	r7, d82e8 <_strtol_r+0xe8>
   d82e6:	1e69      	subs	r1, r5, #1
   d82e8:	6011      	str	r1, [r2, #0]
   d82ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d82ee:	2430      	movs	r4, #48	; 0x30
   d82f0:	2b00      	cmp	r3, #0
   d82f2:	d1b1      	bne.n	d8258 <_strtol_r+0x58>
   d82f4:	2308      	movs	r3, #8
   d82f6:	e7af      	b.n	d8258 <_strtol_r+0x58>
   d82f8:	230a      	movs	r3, #10
   d82fa:	e7ad      	b.n	d8258 <_strtol_r+0x58>
   d82fc:	2c30      	cmp	r4, #48	; 0x30
   d82fe:	d0a3      	beq.n	d8248 <_strtol_r+0x48>
   d8300:	e7aa      	b.n	d8258 <_strtol_r+0x58>
   d8302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8306:	bf00      	nop
   d8308:	2003e200 	.word	0x2003e200

000d830c <strtol>:
   d830c:	4613      	mov	r3, r2
   d830e:	460a      	mov	r2, r1
   d8310:	4601      	mov	r1, r0
   d8312:	4802      	ldr	r0, [pc, #8]	; (d831c <strtol+0x10>)
   d8314:	6800      	ldr	r0, [r0, #0]
   d8316:	f7ff bf73 	b.w	d8200 <_strtol_r>
   d831a:	bf00      	nop
   d831c:	2003e264 	.word	0x2003e264

000d8320 <dynalib_user>:
   d8320:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d8330:	00000000 66352e25 25252500 00583230     ....%.5f.%%%02X.
   d8340:	50545448 312e312f 69706100 6968742e     HTTP/1.1.api.thi
   d8350:	7073676e 2e6b6165 006d6f63 61656826     ngspeak.com.&hea
   d8360:	73726564 6c61663d 50006573 2054534f     ders=false.POST 
   d8370:	6470752f 20657461 50545448 312e312f     /update HTTP/1.1
   d8380:	48000a0d 3a74736f 69706120 6968742e     ...Host: api.thi
   d8390:	7073676e 2e6b6165 0d6d6f63 6f43000a     ngspeak.com...Co
   d83a0:	63656e6e 6e6f6974 6c63203a 0d65736f     nnection: close.
   d83b0:	7355000a 412d7265 746e6567 7400203a     ..User-Agent: .t
   d83c0:	62696c73 6472612d 6f6e6975 352e312f     slib-arduino/1.5
   d83d0:	61702820 63697472 6120656c 6e6f6772      (particle argon
   d83e0:	2d580029 4e494854 45505347 50414b41     ).X-THINGSPEAKAP
   d83f0:	59454b49 4300203a 65746e6f 4c2d746e     IKEY: .Content-L
   d8400:	74676e65 00203a68 0a0d0a0d 6e6f4300     ength: ......Con
   d8410:	746e6574 7079542d 61203a65 696c7070     tent-Type: appli
   d8420:	69746163 782f6e6f 7777772d 726f662d     cation/x-www-for
   d8430:	72752d6d 636e656c 6465646f 26000a0d     m-urlencoded...&
   d8440:	65696600 6c00646c 003d7461 676e6f6c     .field.lat=.long
   d8450:	6c65003d 74617665 3d6e6f69 61747300     =.elevation=.sta
   d8460:	3d737574 69777400 72657474 7774003d     tus=.twitter=.tw
   d8470:	3d746565 65726300 64657461 3d74615f     eet=.created_at=
   d8480:	61655700 72656874 61745320 6e6f6974     .Weather Station
   d8490:	776f5000 4e4f7265 756f4300 746e646c     .PowerON.Couldnt
   d84a0:	6e696620 65732064 726f736e 20662500      find sensor.%f 
   d84b0:	68636e49 28207365 00296748 73657270     Inches (Hg).pres
   d84c0:	65727573 20662500 6574656d 61007372     sure.%f meters.a
   d84d0:	006d746c 706d6554 20736920 432a6625     ltm.Temp is %f*C
   d84e0:	6d657400 33320070 58554833 39333939     .temp.233HUX9939
   d84f0:	43374b39 00004841                       9K7CAH..

000d84f8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d8500:	000d5535 000d553b 000d5563 000d5547     5U..;U..cU..GU..
   d8510:	000d5537                                7U..

000d8514 <_ZTVN5spark13EthernetClassE>:
	...
   d851c:	000d5ad7 000d5acd 000d5ac3 000d5ab9     .Z...Z...Z...Z..
   d852c:	000d5aad 000d5aa1 000d5a95 000d5a8d     .Z...Z...Z...Z..
   d853c:	000d5a83 000d5a79 000d5e6d              .Z..yZ..m^..

000d8548 <_ZTV7TwoWire>:
	...
   d8550:	000d5af5 000d5b3f 000d5b17 000d5af7     .Z..?[...[...Z..
   d8560:	000d5b1f 000d5b27 000d5b2f 000d5b37     .[..'[../[..7[..

000d8570 <_ZTV9IPAddress>:
	...
   d8578:	000d5bc1 000d5bb3 000d5bb5 66006e6c     .[...[...[..ln.f
   d8588:	6f63006e 64006564 69617465 3025006c     n.code.detail.%0
   d8598:	20753031 00205d00 2800202c 00203a29     10u .] ., .(): .
   d85a8:	63005b20 2065646f 2500203d 65640069      [.code = .%i.de
   d85b8:	6c696174 203d2073 75616200 65530064     tails = .baud.Se
   d85c8:	6c616972 72655300 316c6169 70797400     rial.Serial1.typ
   d85d8:	61700065 006d6172 00646d63 68006469     e.param.cmd.id.h
   d85e8:	7300646e 006d7274 746c6966 6c766c00     nd.strm.filt.lvl
   d85f8:	64646100 646e6148 0072656c 6f6d6572     .addHandler.remo
   d8608:	61486576 656c646e 6e650072 61486d75     veHandler.enumHa
   d8618:	656c646e 4a007372 534e4f53 61657274     ndlers.JSONStrea
   d8628:	676f4c6d 646e6148 0072656c 00707061     mLogHandler.app.
   d8638:	656e6f6e 61727400 69006563 006f666e     none.trace.info.
   d8648:	6e726177 72726500 7000726f 63696e61     warn.error.panic
   d8658:	6c6c6100 00000000                       .all....

000d8660 <_ZTVN5spark9MeshClassE>:
	...
   d8668:	000d5d2f 000d5d25 000d5d1b 000d5d11     /]..%]...]...]..
   d8678:	000d5d05 000d5cf9 000d5ced 000d5ce5     .]...\...\...\..
   d8688:	000d5cdb 000d5cd1 000d5e6d              .\...\..m^..

000d8694 <_ZTVN5spark12NetworkClassE>:
	...
   d869c:	000d5e05 000d5e0f 000d5e19 000d5e23     .^...^...^..#^..
   d86ac:	000d5e2d 000d5e39 000d5e45 000d5e51     -^..9^..E^..Q^..
   d86bc:	000d5e59 000d5e63 000d5e6d 006e616e     Y^..c^..m^..nan.
   d86cc:	0066766f 6e69002e 00000066              ovf...inf...

000d86d8 <_ZTV8SPIClass>:
	...
   d86e0:	000d61d9 000d61db                       .a...a..

000d86e8 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d86f0:	000d6739 000d673f 000d6c27 000d674b     9g..?g..'l..Kg..
   d8700:	000d673b                                ;g..

000d8704 <_ZTV9TCPClient>:
	...
   d870c:	000d49e1 000d49f9 000d66b1 000d66cb     .I...I...f...f..
   d871c:	000d6acd 000d690f 000d68e1 000d66f5     .j...i...h...f..
   d872c:	000d69a5 000d6751 000d6943 000d6a9f     .i..Qg..Ci...j..
   d873c:	000d66f7 000d672f 000d66dd 000d6841     .f../g...f..Ah..
   d874c:	000d68c1 69726977 7200676e 20766365     .h..wiring.recv 
   d875c:	6f727265 203d2072 5a006425 302b2500     error = %d.Z.%+0
   d876c:	253a6433 00753230 252d5925 64252d6d     3d:%02u.%Y-%m-%d
   d877c:	3a482554 253a4d25 007a2553 74637361     T%H:%M:%S%z.asct
   d878c:	00656d69                                ime.

000d8790 <_ZTV11USARTSerial>:
	...
   d8798:	000d6c55 000d6c79 000d6c85 000d5f05     Ul..yl...l..._..
   d87a8:	000d6c61 000d6c6d 000d6c67 000d6c73     al..ml..gl..sl..
   d87b8:	000d6c57 000d6c5b                       Wl..[l..

000d87c0 <_ZTV9USBSerial>:
	...
   d87c8:	000d6d2d 000d6d71 000d6d4b 000d5f05     -m..qm..Km..._..
   d87d8:	000d6d45 000d6d2f 000d6d37 000d6d6b     Em../m..7m..km..
   d87e8:	000d6d3f 000d6d29                       ?m..)m..

000d87f0 <_ZTVN5spark9WiFiClassE>:
	...
   d87f8:	000d6e5f 000d6e55 000d6e4b 000d6e01     _n..Un..Kn...n..
   d8808:	000d6e3f 000d6e33 000d6e27 000d6e1f     ?n..3n..'n...n..
   d8818:	000d6e15 000d6e0b 000d5e6d              .n...n..m^..

000d8824 <_ctype_>:
   d8824:	20202000 20202020 28282020 20282828     .         ((((( 
   d8834:	20202020 20202020 20202020 20202020                     
   d8844:	10108820 10101010 10101010 10101010      ...............
   d8854:	04040410 04040404 10040404 10101010     ................
   d8864:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d8874:	01010101 01010101 01010101 10101010     ................
   d8884:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d8894:	02020202 02020202 02020202 10101010     ................
   d88a4:	00000020 00000000 00000000 00000000      ...............
	...

000d8928 <__sf_fake_stdin>:
	...

000d8948 <__sf_fake_stdout>:
	...

000d8968 <__sf_fake_stderr>:
	...

000d8988 <link_const_variable_data_end>:
   d8988:	000d4c85 	.word	0x000d4c85
   d898c:	000d4f07 	.word	0x000d4f07
   d8990:	000d4f0b 	.word	0x000d4f0b
   d8994:	000d4f11 	.word	0x000d4f11
   d8998:	000d5009 	.word	0x000d5009
   d899c:	000d5ae1 	.word	0x000d5ae1
   d89a0:	000d5cc1 	.word	0x000d5cc1
   d89a4:	000d5db9 	.word	0x000d5db9
   d89a8:	000d5ef1 	.word	0x000d5ef1
   d89ac:	000d61bd 	.word	0x000d61bd
   d89b0:	000d6699 	.word	0x000d6699
   d89b4:	000d6c41 	.word	0x000d6c41
   d89b8:	000d6e69 	.word	0x000d6e69
   d89bc:	000d70a9 	.word	0x000d70a9
   d89c0:	000d70fd 	.word	0x000d70fd
   d89c4:	000d71c1 	.word	0x000d71c1
   d89c8:	000d7245 	.word	0x000d7245
   d89cc:	000d72c9 	.word	0x000d72c9
